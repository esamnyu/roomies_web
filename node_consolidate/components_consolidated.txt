// Consolidated 20 files from the "components" folder
// This file contains all code files within the "components" folder and its subfolders.

// Directory: components\auth, File: LoginForm.tsx
// File Type: tsx
```tsx
// src/components/auth/LoginForm.tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';

export default function LoginForm() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Failed to login');
      }

      // Successfully logged in
      router.push('/dashboard');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred during login');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="w-full max-w-md mx-auto p-6 bg-white rounded-lg shadow-md dark:bg-gray-800">
      <h2 className="text-2xl font-bold text-center text-gray-800 dark:text-white mb-6">
        Login to Roomies
      </h2>

      {error && (
        <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-md">
          {error}
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label 
            htmlFor="email" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Email
          </label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="Enter your email"
            required
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>

        <div>
          <label 
            htmlFor="password" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Password
          </label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            placeholder="Enter your password"
            required
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>

        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <input
              id="remember-me"
              type="checkbox"
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-700 dark:text-gray-300">
              Remember me
            </label>
          </div>

          <div className="text-sm">
            <Link
              href="/forgot-password"
              className="text-blue-600 hover:text-blue-500 dark:text-blue-400"
            >
              Forgot password?
            </Link>
          </div>
        </div>

        <button
          type="submit"
          disabled={loading}
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {loading ? 'Logging in...' : 'Log in'}
        </button>

        <div className="text-center mt-4">
          <p className="text-sm text-gray-600 dark:text-gray-400">
            Don't have an account?{' '}
            <Link
              href="/register"
              className="text-blue-600 hover:text-blue-500 dark:text-blue-400 font-medium"
            >
              Sign up
            </Link>
          </p>
        </div>
      </form>
    </div>
  );
}
```

// Directory: components\auth, File: RegisterForm.tsx
// File Type: tsx
```tsx
// src/components/auth/RegisterForm.tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';

export default function RegisterForm() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    // Validate form inputs
    if (password !== confirmPassword) {
      setError('Passwords do not match');
      setLoading(false);
      return;
    }

    if (password.length < 8) {
      setError('Password must be at least 8 characters long');
      setLoading(false);
      return;
    }

    try {
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name, email, password }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Failed to register');
      }

      // Successfully registered
      router.push('/login?registered=true');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred during registration');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="w-full max-w-md mx-auto p-6 bg-white rounded-lg shadow-md dark:bg-gray-800">
      <h2 className="text-2xl font-bold text-center text-gray-800 dark:text-white mb-6">
        Create a Roomies Account
      </h2>

      {error && (
        <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-md">
          {error}
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label 
            htmlFor="name" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Full Name
          </label>
          <input
            id="name"
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            placeholder="Enter your name"
            required
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>

        <div>
          <label 
            htmlFor="email" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Email
          </label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="Enter your email"
            required
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>

        <div>
          <label 
            htmlFor="password" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Password
          </label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            placeholder="Create a password"
            required
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>

        <div>
          <label 
            htmlFor="confirmPassword" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Confirm Password
          </label>
          <input
            id="confirmPassword"
            type="password"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            placeholder="Confirm your password"
            required
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>

        <div className="flex items-center">
          <input
            id="terms"
            type="checkbox"
            required
            className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
          />
          <label htmlFor="terms" className="ml-2 block text-sm text-gray-700 dark:text-gray-300">
            I agree to the{' '}
            <Link href="/terms" className="text-blue-600 hover:text-blue-500 dark:text-blue-400">
              Terms of Service
            </Link>{' '}
            and{' '}
            <Link href="/privacy" className="text-blue-600 hover:text-blue-500 dark:text-blue-400">
              Privacy Policy
            </Link>
          </label>
        </div>

        <button
          type="submit"
          disabled={loading}
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {loading ? 'Creating account...' : 'Create account'}
        </button>

        <div className="text-center mt-4">
          <p className="text-sm text-gray-600 dark:text-gray-400">
            Already have an account?{' '}
            <Link
              href="/login"
              className="text-blue-600 hover:text-blue-500 dark:text-blue-400 font-medium"
            >
              Log in
            </Link>
          </p>
        </div>
      </form>
    </div>
  );
}
```

// Directory: components\chat, File: ChatInput.tsx
// File Type: tsx
```tsx
// src/components/chat/ChatInput.tsx
'use client';

import { useState, useRef, useEffect } from 'react';

interface ChatInputProps {
  onSendMessage: (message: string) => void;
  isLoading?: boolean;
  placeholder?: string;
  disabled?: boolean;
}

export default function ChatInput({
  onSendMessage,
  isLoading = false,
  placeholder = 'Type your message...',
  disabled = false
}: ChatInputProps) {
  const [message, setMessage] = useState('');
  const inputRef = useRef<HTMLInputElement>(null);

  // Focus input when component mounts
  useEffect(() => {
    if (inputRef.current && !disabled) {
      inputRef.current.focus();
    }
  }, [disabled]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const trimmedMessage = message.trim();
    if (trimmedMessage && !isLoading && !disabled) {
      onSendMessage(trimmedMessage);
      setMessage('');
    }
  };

  // Handle Ctrl+Enter to submit
  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      handleSubmit(e);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="flex items-center">
      <input
        ref={inputRef}
        type="text"
        value={message}
        onChange={(e) => setMessage(e.target.value)}
        onKeyDown={handleKeyDown}
        placeholder={placeholder}
        disabled={disabled || isLoading}
        className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white disabled:opacity-50 disabled:cursor-not-allowed"
        aria-label="Type a message"
      />
      <button
        type="submit"
        disabled={!message.trim() || isLoading || disabled}
        className="bg-blue-500 text-white px-4 py-2 rounded-r-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        {isLoading ? (
          <svg 
            className="animate-spin h-5 w-5 text-white" 
            xmlns="http://www.w3.org/2000/svg" 
            fill="none" 
            viewBox="0 0 24 24"
          >
            <circle 
              className="opacity-25" 
              cx="12" 
              cy="12" 
              r="10" 
              stroke="currentColor" 
              strokeWidth="4"
            ></circle>
            <path 
              className="opacity-75" 
              fill="currentColor" 
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
        ) : (
          <svg 
            className="h-5 w-5" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24" 
            xmlns="http://www.w3.org/2000/svg"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" 
            />
          </svg>
        )}
      </button>
    </form>
  );
}
```

// Directory: components\chat, File: MessageBubble.tsx
// File Type: tsx
```tsx
// src/components/chat/MessageBubble.tsx
'use client';

import { useState } from 'react';
import Image from 'next/image';

interface MessageBubbleProps {
  id: string;
  text: string;
  timestamp: Date;
  isCurrentUser: boolean;
  senderName?: string;
  senderAvatar?: string;
  isGroupChat?: boolean;
  isRead?: boolean;
}

export default function MessageBubble({
  id,
  text,
  timestamp,
  isCurrentUser,
  senderName,
  senderAvatar,
  isGroupChat = false,
  isRead = false
}: MessageBubbleProps) {
  const [showTimestamp, setShowTimestamp] = useState(false);

  const formatTimestamp = (date: Date) => {
    const now = new Date();
    const messageDate = new Date(date);
    
    // If message is from today, show only time
    if (messageDate.toDateString() === now.toDateString()) {
      return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }
    
    // If message is from this week, show day and time
    const diffDays = Math.floor((now.getTime() - messageDate.getTime()) / (1000 * 60 * 60 * 24));
    if (diffDays < 7) {
      return `${messageDate.toLocaleDateString([], { weekday: 'short' })} ${messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
    }
    
    // Otherwise, show full date
    return messageDate.toLocaleDateString();
  };

  return (
    <div 
      className={`flex ${isCurrentUser ? 'justify-end' : 'justify-start'} mb-4`}
      onClick={() => setShowTimestamp(!showTimestamp)}
    >
      <div className={`flex max-w-[75%] ${isCurrentUser ? 'flex-row-reverse' : 'flex-row'}`}>
        {/* Avatar - only show if not current user and in group chat */}
        {!isCurrentUser && isGroupChat && (
          <div className="flex-shrink-0 mr-2">
            {senderAvatar ? (
              <Image
                src={senderAvatar}
                alt={senderName || 'User'}
                width={32}
                height={32}
                className="rounded-full h-8 w-8"
              />
            ) : (
              <div className="bg-gray-300 dark:bg-gray-600 rounded-full h-8 w-8 flex items-center justify-center text-sm font-medium text-gray-600 dark:text-gray-200">
                {senderName ? senderName.charAt(0).toUpperCase() : '?'}
              </div>
            )}
          </div>
        )}
        
        <div className={`flex flex-col ${isCurrentUser ? 'items-end' : 'items-start'}`}>
          {/* Sender name - only show in group chat and not current user */}
          {!isCurrentUser && isGroupChat && senderName && (
            <span className="text-xs font-medium text-gray-500 dark:text-gray-400 mb-1 ml-1">
              {senderName}
            </span>
          )}
          
          {/* Message bubble */}
          <div 
            className={`px-4 py-2 rounded-lg break-words ${
              isCurrentUser 
                ? 'bg-blue-500 text-white rounded-tr-none' 
                : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-tl-none'
            }`}
          >
            <p className="whitespace-pre-wrap">{text}</p>
          </div>
          
          {/* Timestamp and read status */}
          <div 
            className={`flex items-center mt-1 text-xs text-gray-500 dark:text-gray-400 ${
              isCurrentUser ? 'justify-end' : 'justify-start'
            }`}
          >
            {(showTimestamp || isCurrentUser) && (
              <span className="mx-1">{formatTimestamp(timestamp)}</span>
            )}
            
            {isCurrentUser && (
              <span className="ml-1">
                {isRead ? (
                  <svg 
                    className="h-3 w-3 text-blue-500" 
                    fill="currentColor" 
                    viewBox="0 0 24 24"
                  >
                    <path d="M18 7l-8 8-4-4 1.5-1.5L10 12l6.5-6.5L18 7z" />
                  </svg>
                ) : (
                  <svg 
                    className="h-3 w-3 text-gray-400" 
                    fill="currentColor" 
                    viewBox="0 0 24 24"
                  >
                    <path d="M18 7l-8 8-4-4 1.5-1.5L10 12l6.5-6.5L18 7z" />
                  </svg>
                )}
              </span>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
```

// Directory: components\dashboard, File: HouseholdInfo.tsx
// File Type: tsx
```tsx
// src/components/dashboard/HouseholdInfo.tsx
'use client';

import { useState } from 'react';

interface HouseholdInfoProps {
  householdId: string;
  name: string;
  address: string;
  moveInDate: string;
  memberCount: number;
  pendingExpenses?: number;
  upcomingTasks?: number;
  unreadMessages?: number;
  onUpdate?: (updated: { name: string; address: string }) => void;
}

export default function HouseholdInfo({
  householdId,
  name,
  address,
  moveInDate,
  memberCount,
  pendingExpenses = 0,
  upcomingTasks = 0,
  unreadMessages = 0,
  onUpdate,
}: HouseholdInfoProps) {
  const [isEditing, setIsEditing] = useState(false);
  const [householdName, setHouseholdName] = useState(name);
  const [householdAddress, setHouseholdAddress] = useState(address);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSave = async () => {
    setIsSubmitting(true);
    setError(null);
    
    try {
      const response = await fetch(`/api/households/${householdId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: householdName,
          address: householdAddress,
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || 'Failed to update household information');
      }
      
      // Update successful
      setIsEditing(false);
      
      // Notify parent component if needed
      if (onUpdate) {
        onUpdate({
          name: householdName,
          address: householdAddress,
        });
      }
    } catch (err) {
      console.error('Error updating household:', err);
      setError(err instanceof Error ? err.message : 'An error occurred while updating household information');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6">
      {error && (
        <div className="mb-4 p-3 bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-400 rounded-md">
          {error}
        </div>
      )}

      <div className="flex justify-between items-center mb-4">
        {isEditing ? (
          <input
            type="text"
            value={householdName}
            onChange={(e) => setHouseholdName(e.target.value)}
            className="text-2xl font-bold text-gray-900 dark:text-white bg-gray-100 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 w-full"
          />
        ) : (
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white">{householdName}</h2>
        )}
        
        <button
          onClick={() => isEditing ? handleSave() : setIsEditing(true)}
          disabled={isSubmitting}
          className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-blue-400 disabled:cursor-not-allowed"
        >
          {isSubmitting ? 'Saving...' : isEditing ? 'Save' : 'Edit'}
        </button>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <div>
          <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Address</p>
          {isEditing ? (
            <input
              type="text"
              value={householdAddress}
              onChange={(e) => setHouseholdAddress(e.target.value)}
              className="text-gray-900 dark:text-white bg-gray-100 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 w-full"
            />
          ) : (
            <p className="text-gray-700 dark:text-gray-300">{householdAddress}</p>
          )}
        </div>
        <div>
          <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Move-in Date</p>
          <p className="text-gray-700 dark:text-gray-300">{moveInDate}</p>
        </div>
        <div>
          <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Members</p>
          <p className="text-gray-700 dark:text-gray-300">{memberCount} people</p>
        </div>
      </div>
      
      <div className="grid grid-cols-3 gap-4">
        <div className="bg-blue-50 dark:bg-blue-900/30 p-4 rounded-md">
          <p className="text-sm font-medium text-blue-700 dark:text-blue-300">Pending Expenses</p>
          <p className="text-2xl font-bold text-blue-700 dark:text-blue-300">{pendingExpenses}</p>
        </div>
        <div className="bg-green-50 dark:bg-green-900/30 p-4 rounded-md">
          <p className="text-sm font-medium text-green-700 dark:text-green-300">Upcoming Tasks</p>
          <p className="text-2xl font-bold text-green-700 dark:text-green-300">{upcomingTasks}</p>
        </div>
        <div className="bg-purple-50 dark:bg-purple-900/30 p-4 rounded-md">
          <p className="text-sm font-medium text-purple-700 dark:text-purple-300">Unread Messages</p>
          <p className="text-2xl font-bold text-purple-700 dark:text-purple-300">{unreadMessages}</p>
        </div>
      </div>
    </div>
  );
}
```

// Directory: components\dashboard, File: HouseholdMembers.tsx
// File Type: tsx
```tsx
'use client';

import { useState } from 'react';
import InviteModal from '@/components/invitations/InviteModal';
import Button from '@/components/ui/Button';

interface Member {
  id: string;
  name: string;
  email: string;
  role: string;
  avatar?: string;
}

interface HouseholdMembersProps {
  householdId: string;
  members: Member[];
  isAdmin: boolean;
}

export default function HouseholdMembers({ 
  householdId, 
  members, 
  isAdmin 
}: HouseholdMembersProps) {
  const [showInviteModal, setShowInviteModal] = useState(false);
  
  return (
    <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-lg font-medium text-gray-900 dark:text-white">
          Household Members ({members.length})
        </h2>
        
        {isAdmin && (
          <Button 
            variant="primary" 
            size="sm"
            onClick={() => setShowInviteModal(true)}
          >
            Invite Member
          </Button>
        )}
      </div>
      
      <ul className="divide-y divide-gray-200 dark:divide-gray-700">
        {members.map((member) => (
          <li key={member.id} className="py-4 flex items-center justify-between">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                {member.avatar ? (
                  <img 
                    src={member.avatar} 
                    alt={member.name} 
                    className="h-10 w-10 rounded-full"
                  />
                ) : (
                  <div className="h-10 w-10 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center">
                    <span className="text-blue-600 dark:text-blue-300 text-sm font-medium">
                      {member.name.charAt(0).toUpperCase()}
                    </span>
                  </div>
                )}
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium text-gray-900 dark:text-white">
                  {member.name}
                </p>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  {member.email}
                </p>
              </div>
            </div>
            <div className="flex items-center">
              <span className="px-2.5 py-0.5 text-xs rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                {member.role}
              </span>
            </div>
          </li>
        ))}
      </ul>
      
      {showInviteModal && (
        <InviteModal 
          householdId={householdId} 
          onClose={() => setShowInviteModal(false)} 
        />
      )}
    </div>
  );
}
```

// Directory: components\dashboard, File: MemberGrid.tsx
// File Type: tsx
```tsx
// src/components/dashboard/MemberGrid.tsx
'use client';

import { useState, useEffect } from 'react';
import Image from 'next/image';
import { supabaseClient } from '@/lib/supabase';

interface Member {
  id: string;
  name: string;
  avatar: string;
  role: 'ADMIN' | 'MEMBER' | 'GUEST';
  status: 'ONLINE' | 'AWAY' | 'OFFLINE';
  joinedAt: string;
  owes?: number;
  isOwed?: number;
  tasksCompleted?: number;
  tasksPending?: number;
}

interface MemberGridProps {
  householdId: string;
  onInvite?: () => void;
}

export default function MemberGrid({ householdId, onInvite }: MemberGridProps) {
  const [members, setMembers] = useState<Member[]>([]);
  const [activeTab, setActiveTab] = useState<'ALL' | 'ONLINE' | 'AWAY'>('ALL');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  useEffect(() => {
    fetchMembers();
  }, [householdId]);
  
  const fetchMembers = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch(`/api/households/${householdId}/members`);
      
      if (!response.ok) {
        throw new Error('Failed to fetch household members');
      }
      
      const data = await response.json();
      setMembers(data);
    } catch (err) {
      console.error('Error fetching members:', err);
      setError(err instanceof Error ? err.message : 'An error occurred while fetching members');
    } finally {
      setLoading(false);
    }
  };
  
  // Get current user's ID for UI enhancements
  const [currentUserId, setCurrentUserId] = useState<string | null>(null);
  
  useEffect(() => {
    const getCurrentUser = async () => {
      const { data: { session } } = await supabaseClient.auth.getSession();
      if (session?.user) {
        setCurrentUserId(session.user.id);
      }
    };
    
    getCurrentUser();
  }, []);
  
  const filteredMembers = activeTab === 'ALL' 
    ? members 
    : members.filter(member => member.status === activeTab);

  const getRoleColor = (role: Member['role']) => {
    switch (role) {
      case 'ADMIN':
        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';
      case 'MEMBER':
        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';
      case 'GUEST':
        return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
    }
  };

  const getStatusColor = (status: Member['status']) => {
    switch (status) {
      case 'ONLINE':
        return 'bg-green-500';
      case 'AWAY':
        return 'bg-yellow-500';
      case 'OFFLINE':
        return 'bg-gray-500';
    }
  };
  
  const handleMessageMember = async (memberId: string) => {
    try {
      // Implementation would depend on your chat system
      console.log(`Opening chat with member: ${memberId}`);
      // Navigate to chat or open chat modal
    } catch (err) {
      console.error('Error starting chat:', err);
    }
  };
  
  const handleMemberOptions = (memberId: string) => {
    // This would open a dropdown or modal with member options
    console.log(`Show options for member: ${memberId}`);
  };

  if (loading) {
    return (
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <div className="flex items-center justify-center h-40">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-white"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <div className="text-red-600 dark:text-red-400">
          Error: {error}
          <button 
            onClick={fetchMembers}
            className="ml-2 text-blue-600 dark:text-blue-400 underline"
          >
            Try again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md">
      <div className="border-b border-gray-200 dark:border-gray-700">
        <div className="flex items-center justify-between px-6 py-4">
          <div>
            <h3 className="text-lg font-medium text-gray-900 dark:text-white">Household Members</h3>
            <p className="text-sm text-gray-500 dark:text-gray-400">
              {members.length} {members.length === 1 ? 'member' : 'members'}
            </p>
          </div>
          
          <button
            onClick={onInvite}
            className="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            <svg 
              className="h-4 w-4 mr-1" 
              fill="none" 
              stroke="currentColor" 
              viewBox="0 0 24 24" 
              xmlns="http://www.w3.org/2000/svg"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={2} 
                d="M12 6v6m0 0v6m0-6h6m-6 0H6" 
              />
            </svg>
            Invite
          </button>
        </div>
        
        <div className="px-2">
          <nav className="-mb-px flex">
            <button
              onClick={() => setActiveTab('ALL')}
              className={`${
                activeTab === 'ALL'
                  ? 'border-blue-500 text-blue-600 dark:text-blue-500'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
              } flex-1 whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm`}
            >
              All
            </button>
            <button
              onClick={() => setActiveTab('ONLINE')}
              className={`${
                activeTab === 'ONLINE'
                  ? 'border-blue-500 text-blue-600 dark:text-blue-500'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
              } flex-1 whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm`}
            >
              Online
            </button>
            <button
              onClick={() => setActiveTab('AWAY')}
              className={`${
                activeTab === 'AWAY'
                  ? 'border-blue-500 text-blue-600 dark:text-blue-500'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
              } flex-1 whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm`}
            >
              Away
            </button>
          </nav>
        </div>
      </div>
      
      <ul className="divide-y divide-gray-200 dark:divide-gray-700">
        {filteredMembers.length > 0 ? (
          filteredMembers.map((member) => (
            <li key={member.id} className="px-6 py-4">
              <div className="flex items-center">
                <div className="relative flex-shrink-0">
                  <Image
                    className="h-12 w-12 rounded-full object-cover"
                    src={member.avatar}
                    alt={member.name}
                    width={48}
                    height={48}
                  />
                  <div 
                    className={`absolute bottom-0 right-0 h-3 w-3 rounded-full border-2 border-white dark:border-gray-800 ${getStatusColor(member.status)}`}
                  />
                </div>
                
                <div className="ml-4 flex-1">
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="text-sm font-medium text-gray-900 dark:text-white">
                        {member.name} {member.id === currentUserId && ' (You)'}
                      </h4>
                      <div className="flex items-center mt-1">
                        <span 
                          className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getRoleColor(member.role)}`}
                        >
                          {member.role.charAt(0) + member.role.slice(1).toLowerCase()}
                        </span>
                        <span className="text-xs text-gray-500 dark:text-gray-400 ml-2">
                          Joined {new Date(member.joinedAt).toLocaleDateString()}
                        </span>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <button 
                        className="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300"
                        onClick={() => handleMessageMember(member.id)}
                        aria-label={`Message ${member.name}`}
                      >
                        <svg 
                          className="h-5 w-5" 
                          fill="none" 
                          stroke="currentColor" 
                          viewBox="0 0 24 24" 
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path 
                            strokeLinecap="round" 
                            strokeLinejoin="round" 
                            strokeWidth={2} 
                            d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" 
                          />
                        </svg>
                      </button>
                      <button 
                        className="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300"
                        onClick={() => handleMemberOptions(member.id)}
                        aria-label={`More options for ${member.name}`}
                      >
                        <svg 
                          className="h-5 w-5" 
                          fill="none" 
                          stroke="currentColor" 
                          viewBox="0 0 24 24" 
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path 
                            strokeLinecap="round" 
                            strokeLinejoin="round" 
                            strokeWidth={2} 
                            d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" 
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                  
                  <div className="mt-2 grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <p className="text-gray-500 dark:text-gray-400">Financial</p>
                      <div className="flex space-x-4 mt-1">
                        <div className="text-red-600 dark:text-red-400">
                          Owes: ${member.owes?.toFixed(2) || '0.00'}
                        </div>
                        <div className="text-green-600 dark:text-green-400">
                          Owed: ${member.isOwed?.toFixed(2) || '0.00'}
                        </div>
                      </div>
                    </div>
                    <div>
                      <p className="text-gray-500 dark:text-gray-400">Tasks</p>
                      <div className="flex space-x-4 mt-1">
                        <div className="text-green-600 dark:text-green-400">
                          Done: {member.tasksCompleted || 0}
                        </div>
                        <div className="text-yellow-600 dark:text-yellow-400">
                          Pending: {member.tasksPending || 0}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </li>
          ))
        ) : (
          <li className="px-6 py-4 text-center text-gray-500 dark:text-gray-400">
            No members found with the selected filter.
          </li>
        )}
      </ul>
    </div>
  );
}
```

// Directory: components\dashboard, File: PendingInvitationsPanel.tsx
// File Type: tsx
```tsx
// src/components/dashboard/PendingInvitationsPanel.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { supabaseClient } from '@/lib/supabase';
import Button from '@/components/ui/Button';
import Card from '@/components/ui/Card';

// Define the interface for invitation objects
interface Invitation {
  id: string;
  token: string;
  email: string;
  status: string;
  message?: string;
  expiresAt: string;
  createdAt: string;
  householdId: string;
  inviterId: string;
  role: string;
  inviter?: {
    id: string;
    name: string;
    email: string;
  };
  household?: {
    id: string;
    name: string;
    address?: string;
  };
}

export default function PendingInvitationsPanel() {
  const [invitations, setInvitations] = useState<Invitation[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentUserEmail, setCurrentUserEmail] = useState<string | null>(null);
  const [processingToken, setProcessingToken] = useState<string | null>(null);
  const [debugInfo, setDebugInfo] = useState<any>(null);
  const router = useRouter();

  // TEST MODE: Set to true to show all invitations regardless of email
  const TEST_MODE = true;

  useEffect(() => {
    const fetchInvitations = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Get current user info first
        const { data } = await supabaseClient.auth.getSession();
        const session = data.session;
        const userEmail = session?.user?.email || null;
        setCurrentUserEmail(userEmail);
        
        console.log('Current user email:', userEmail);
        
        // Direct query to get all pending invitations
        const { data: allInvitations, error: queryError } = await supabaseClient
          .from('Invitation')
          .select(`
            *,
            inviter:inviterId(id, name, email),
            household:householdId(id, name, address)
          `)
          .eq('status', 'PENDING');
        
        if (queryError) {
          console.error('Supabase query error:', queryError);
          throw queryError;
        }
        
        console.log('All pending invitations:', allInvitations);
        
        // Store debug info
        setDebugInfo({
          userEmail: userEmail || 'Not logged in',
          allInvitations: allInvitations || []
        });
        
        // In test mode, show all invitations
        // In normal mode, filter to only show invitations for current user
        if (TEST_MODE) {
          setInvitations(allInvitations || []);
        } else {
          setInvitations(
            allInvitations?.filter(inv => 
              userEmail && inv.email.toLowerCase() === userEmail.toLowerCase()
            ) || []
          );
        }
      } catch (error) {
        console.error('Error fetching invitations:', error);
        setError(error instanceof Error ? error.message : 'Unknown error occurred');
      } finally {
        setLoading(false);
      }
    };

    fetchInvitations();
  }, []);

  const handleAccept = async (invitation: Invitation) => {
    try {
      setProcessingToken(invitation.token);
      console.log('Accepting invitation with token:', invitation.token);
      
      // First update the invitation status
      const { error: updateError } = await supabaseClient
        .from('Invitation')
        .update({
          status: 'ACCEPTED',
          updatedAt: new Date().toISOString(),
          respondedAt: new Date().toISOString()
        })
        .eq('id', invitation.id);
        
      if (updateError) {
        throw updateError;
      }
      
      // Then add user to the household
      const { data: sessionData } = await supabaseClient.auth.getSession();
      if (!sessionData.session?.user?.id) {
        throw new Error('User not authenticated');
      }
      
      const userId = sessionData.session.user.id;
      const membershipId = crypto.randomUUID();
      
      const { error: membershipError } = await supabaseClient
        .from('HouseholdUser')
        .insert({
          id: membershipId,
          userId: userId,
          householdId: invitation.householdId,
          role: invitation.role,
          joinedAt: new Date().toISOString()
        });
        
      if (membershipError) {
        throw membershipError;
      }
      
      // Success!
      setInvitations(invitations.filter(inv => inv.id !== invitation.id));
      alert(`You've successfully joined ${invitation.household?.name || 'the household'}!`);
      
      // Redirect to chat
      router.push('/chat');
    } catch (error) {
      console.error('Error accepting invitation:', error);
      setError(error instanceof Error ? error.message : 'Failed to accept invitation');
      alert(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setProcessingToken(null);
    }
  };
  
  const handleViewDetails = (token: string) => {
    router.push(`/invite?token=${token}`);
  };

  // Debug panel - remove in production
  const renderDebugPanel = () => {
    if (!debugInfo) return null;
    
    return (
      <div className="mt-4 p-3 bg-yellow-50 dark:bg-yellow-900/30 rounded-md text-xs">
        <h4 className="font-bold mb-1">Debug Info:</h4>
        <p>Your email: {debugInfo.userEmail}</p>
        <p>Invitations found: {debugInfo.allInvitations.length}</p>
        {TEST_MODE && (
          <p className="text-red-500 font-bold">TEST MODE ENABLED - Showing all invitations</p>
        )}
        <details>
          <summary>Show details</summary>
          <pre className="mt-2 overflow-auto max-h-40">
            {JSON.stringify(debugInfo, null, 2)}
          </pre>
        </details>
      </div>
    );
  };

  if (loading) {
    return (
      <Card title="Pending Invitations">
        <div className="flex justify-center items-center p-4">
          <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </Card>
    );
  }

  if (error) {
    return (
      <Card title="Pending Invitations">
        <div className="p-4 text-red-500 dark:text-red-400">
          <p>Error loading invitations: {error}</p>
          <button 
            onClick={() => window.location.reload()}
            className="mt-2 text-blue-500 dark:text-blue-400 underline"
          >
            Refresh
          </button>
        </div>
        {renderDebugPanel()}
      </Card>
    );
  }

  if (invitations.length === 0) {
    return (
      <Card title="Pending Invitations">
        <div className="p-4 text-gray-500">
          No pending invitations found.
          {renderDebugPanel()}
        </div>
      </Card>
    );
  }

  return (
    <Card title="Pending Invitations">
      <div className="space-y-4 p-2">
        {invitations.map((invitation) => (
          <div 
            key={invitation.id}
            className="border border-gray-200 dark:border-gray-700 rounded-lg p-4 bg-gray-50 dark:bg-gray-800"
          >
            <div className="flex justify-between items-start">
              <div>
                <h3 className="font-medium text-gray-900 dark:text-white">
                  {invitation.inviter?.name || 'Someone'} invited you to join {invitation.household?.name || 'a household'}
                </h3>
                <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                  Sent to: {invitation.email}
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  Role: {invitation.role?.charAt(0)?.toUpperCase() + invitation.role?.slice(1)?.toLowerCase() || 'Member'}
                </p>
                {invitation.message && (
                  <p className="text-sm italic mt-2 text-gray-600 dark:text-gray-400">
                    "{invitation.message}"
                  </p>
                )}
              </div>
              <div className="flex space-x-2">
                <Button
                  variant="primary"
                  size="sm"
                  onClick={() => handleAccept(invitation)}
                  isLoading={processingToken === invitation.token}
                  disabled={processingToken !== null}
                >
                  Accept
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleViewDetails(invitation.token)}
                  disabled={processingToken !== null}
                >
                  Details
                </Button>
              </div>
            </div>
          </div>
        ))}
      </div>
      {renderDebugPanel()}
    </Card>
  );
}
```

// Directory: components\expenses, File: ExpenseForm.tsx
// File Type: tsx
```tsx
// src/components/expenses/ExpenseForm.tsx
'use client';

import { useState, useEffect } from 'react';
import { supabaseClient } from '@/lib/supabase';
import { useSession } from 'next-auth/react';
interface Member {
  id: string;
  name: string;
  avatar?: string;
}

interface Split {
  userId: string;
  userName: string;
  amount: number;
  percentage?: number;
}

interface Payment {
  userId: string;
  userName: string;
  amount: number;
  status: 'PENDING' | 'COMPLETED' | 'DECLINED';
}

interface Expense {
  id?: string;
  title: string;
  amount: number;
  date: Date;
  description?: string;
  splitType: 'EQUAL' | 'PERCENTAGE' | 'CUSTOM';
  creatorId: string;
  creatorName: string;
  householdId: string;
  splits: Split[];
  payments: Payment[];
}

interface ExpenseFormProps {
  expense?: Expense | null;
  members: Member[];
  householdId: string; // Add householdId prop
  onSubmit: (expense: Expense) => void;
  onCancel: () => void;
}

export default function ExpenseForm({ 
  expense, 
  members, 
  householdId, 
  onSubmit, 
  onCancel 
}: ExpenseFormProps) {
  const { data: session } = useSession();
  const currentUserId = session?.user?.id || '';
  const currentUser = members.find(m => m.id === currentUserId);
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // Default state for a new expense
  const getDefaultState = () => ({
    title: '',
    amount: 0,
    date: new Date().toISOString().split('T')[0], // Today in YYYY-MM-DD format
    description: '',
    splitType: 'EQUAL' as const,
    creatorId: currentUserId,
    creatorName: currentUser?.name || '',
    householdId, // Use prop instead of hardcoded value
    splits: [],
    payments: []
  });

  const [formData, setFormData] = useState<Omit<Expense, 'date'> & { date: string }>(getDefaultState());
  const [splitPercentages, setSplitPercentages] = useState<Record<string, number>>({});
  const [splitAmounts, setSplitAmounts] = useState<Record<string, number>>({});
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});

  // Initialize form data when expense prop changes or user session loads
  useEffect(() => {
    if (!currentUserId) return; // Wait for user session
    
    if (expense) {
      const tempSplitPercentages: Record<string, number> = {};
      const tempSplitAmounts: Record<string, number> = {};
      
      expense.splits.forEach(split => {
        tempSplitPercentages[split.userId] = split.percentage || 0;
        tempSplitAmounts[split.userId] = split.amount;
      });
      
      setSplitPercentages(tempSplitPercentages);
      setSplitAmounts(tempSplitAmounts);
      
      setFormData({
        ...expense,
        date: expense.date.toISOString().split('T')[0] // Convert Date to YYYY-MM-DD
      });
    } else {
      // Initialize equal splits for new expense
      const membersCount = members.length;
      const tempSplitPercentages: Record<string, number> = {};
      const tempSplitAmounts: Record<string, number> = {};
      
      members.forEach(member => {
        tempSplitPercentages[member.id] = 100 / membersCount;
        tempSplitAmounts[member.id] = 0; // Will be calculated when amount is set
      });
      
      setSplitPercentages(tempSplitPercentages);
      setSplitAmounts(tempSplitAmounts);
      
      setFormData({
        ...getDefaultState(),
        creatorId: currentUserId,
        creatorName: currentUser?.name || '',
      });
    }
  }, [expense, members, currentUserId, currentUser, householdId]);

  // Calculate splits when amount or splitType changes
  useEffect(() => {
    if (formData.amount > 0) {
      calculateSplits();
    }
  }, [formData.amount, formData.splitType]);

  const calculateSplits = () => {
    const amount = formData.amount;
    const tempSplitAmounts: Record<string, number> = {};
    
    if (formData.splitType === 'EQUAL') {
      // Equal split
      const memberCount = members.length;
      const equalAmount = amount / memberCount;
      
      members.forEach((member, index) => {
        // Handle rounding issues by adjusting the last member's amount
        if (index === memberCount - 1) {
          const sum = Object.values(tempSplitAmounts).reduce((a, b) => a + b, 0);
          tempSplitAmounts[member.id] = +(amount - sum).toFixed(2);
        } else {
          tempSplitAmounts[member.id] = +equalAmount.toFixed(2);
        }
      });
    } else if (formData.splitType === 'PERCENTAGE') {
      // Percentage-based split
      members.forEach(member => {
        const percentage = splitPercentages[member.id] || 0;
        tempSplitAmounts[member.id] = +(amount * percentage / 100).toFixed(2);
      });
    }
    // For CUSTOM, we don't calculate automatically - user sets amounts directly
    
    setSplitAmounts(tempSplitAmounts);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    
    if (name === 'amount') {
      const numValue = parseFloat(value);
      setFormData({ ...formData, [name]: numValue || 0 });
    } else {
      setFormData({ ...formData, [name]: value });
    }
    
    // Clear error when field is edited
    if (formErrors[name]) {
      setFormErrors({ ...formErrors, [name]: '' });
    }
  };

  const handlePercentageChange = (userId: string, value: number) => {
    const newPercentages = { ...splitPercentages, [userId]: value };
    setSplitPercentages(newPercentages);
    
    // Recalculate amounts based on new percentages
    if (formData.amount > 0) {
      const newSplitAmounts = { ...splitAmounts };
      newSplitAmounts[userId] = +(formData.amount * value / 100).toFixed(2);
      setSplitAmounts(newSplitAmounts);
    }
  };

  const handleAmountChange = (userId: string, value: number) => {
    const newSplitAmounts = { ...splitAmounts, [userId]: value };
    setSplitAmounts(newSplitAmounts);
    
    // Update percentages if amount is greater than 0
    if (formData.amount > 0) {
      const newPercentages = { ...splitPercentages };
      newPercentages[userId] = +(value / formData.amount * 100).toFixed(2);
      setSplitPercentages(newPercentages);
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    
    if (!formData.title.trim()) {
      newErrors.title = 'Title is required';
    }
    
    if (formData.amount <= 0) {
      newErrors.amount = 'Amount must be greater than 0';
    }
    
    if (formData.splitType === 'PERCENTAGE') {
      const totalPercentage = Object.values(splitPercentages).reduce((a, b) => a + b, 0);
      if (Math.abs(totalPercentage - 100) > 0.1) { // Allow small rounding errors
        newErrors.splitType = 'Percentages must add up to 100%';
      }
    } else if (formData.splitType === 'CUSTOM') {
      const totalAmount = Object.values(splitAmounts).reduce((a, b) => a + b, 0);
      if (Math.abs(totalAmount - formData.amount) > 0.01) { // Allow small rounding errors
        newErrors.splitType = 'Split amounts must add up to the total amount';
      }
    }
    
    setFormErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setIsSubmitting(true);
    setError(null);
    
    try {
      // Create splits array
      const splits = members.map(member => ({
        userId: member.id,
        userName: member.name,
        amount: splitAmounts[member.id] || 0,
        percentage: splitPercentages[member.id] || 0
      }));
      
      // Create payments array - the creator is paid, everyone else pays
      const payments = members
        .filter(member => member.id !== formData.creatorId) // Exclude creator
        .map(member => ({
          userId: member.id,
          userName: member.name,
          amount: splitAmounts[member.id] || 0,
          status: expense?.payments?.find(p => p.userId === member.id)?.status || 'PENDING' as const
        }));
      
      // Prepare the expense data
      const expenseData = {
        ...formData,
        date: new Date(formData.date), // Convert string back to Date
        splits,
        payments
      };
      
      // If editing an existing expense
      if (expense?.id) {
        const response = await fetch(`/api/expenses/${expense.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(expenseData),
        });
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.message || 'Failed to update expense');
        }
      } 
      // If creating a new expense
      else {
        const response = await fetch('/api/expenses', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(expenseData),
        });
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.message || 'Failed to create expense');
        }
      }
      
      // Call the onSubmit callback with the expense data
      onSubmit(expenseData);
    } catch (err) {
      console.error('Error saving expense:', err);
      setError(err instanceof Error ? err.message : 'An error occurred while saving the expense');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="mt-5 space-y-4">
      {error && (
        <div className="p-3 bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-400 rounded-md">
          {error}
        </div>
      )}
      
      <div>
        <label 
          htmlFor="title" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Title
        </label>
        <input
          id="title"
          name="title"
          type="text"
          value={formData.title}
          onChange={handleInputChange}
          placeholder="e.g., Groceries, Rent, Utilities"
          required
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
        {formErrors.title && <p className="mt-1 text-sm text-red-600 dark:text-red-400">{formErrors.title}</p>}
      </div>
      
      <div>
        <label 
          htmlFor="amount" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Amount ($)
        </label>
        <input
          id="amount"
          name="amount"
          type="number"
          step="0.01"
          min="0.01"
          value={formData.amount || ''}
          onChange={handleInputChange}
          placeholder="0.00"
          required
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
        {formErrors.amount && <p className="mt-1 text-sm text-red-600 dark:text-red-400">{formErrors.amount}</p>}
      </div>
      
      <div>
        <label 
          htmlFor="date" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Date
        </label>
        <input
          id="date"
          name="date"
          type="date"
          value={formData.date}
          onChange={handleInputChange}
          required
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
      </div>
      
      <div>
        <label 
          htmlFor="description" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Description (Optional)
        </label>
        <textarea
          id="description"
          name="description"
          value={formData.description}
          onChange={handleInputChange}
          rows={3}
          placeholder="Add additional details about this expense..."
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
      </div>
      
      <div>
        <label 
          htmlFor="splitType" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          How do you want to split this expense?
        </label>
        <select
          id="splitType"
          name="splitType"
          value={formData.splitType}
          onChange={handleInputChange}
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        >
          <option value="EQUAL">Split equally</option>
          <option value="PERCENTAGE">Split by percentage</option>
          <option value="CUSTOM">Custom split</option>
        </select>
        {formErrors.splitType && <p className="mt-1 text-sm text-red-600 dark:text-red-400">{formErrors.splitType}</p>}
      </div>
      
      {/* Split details */}
      <div className="mt-4">
        <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Split Details</h4>
        
        <div className="bg-gray-50 dark:bg-gray-700 p-4 rounded-md">
          <div className="grid grid-cols-3 gap-2 mb-2 font-medium text-sm text-gray-700 dark:text-gray-300">
            <div>Member</div>
            {formData.splitType === 'PERCENTAGE' && <div>Percentage</div>}
            <div>{formData.splitType === 'EQUAL' ? 'Amount (auto-calculated)' : 'Amount'}</div>
          </div>
          
          {members.map(member => (
            <div key={member.id} className="grid grid-cols-3 gap-2 mb-3 items-center">
              <div className="text-sm text-gray-800 dark:text-gray-200">
                {member.name} {member.id === formData.creatorId && '(Paid)'}
              </div>
              
              {formData.splitType === 'PERCENTAGE' && (
                <div>
                  <input
                    type="number"
                    min="0"
                    max="100"
                    step="0.01"
                    value={splitPercentages[member.id] || 0}
                    onChange={(e) => handlePercentageChange(member.id, parseFloat(e.target.value) || 0)}
                    className="w-full px-2 py-1 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-600 dark:border-gray-500 dark:text-white"
                  />
                </div>
              )}
              
              <div>
                <div className="relative">
                  <span className="absolute inset-y-0 left-0 pl-2 flex items-center text-gray-500 dark:text-gray-400">$</span>
                  <input
                    type="number"
                    min="0"
                    step="0.01"
                    value={splitAmounts[member.id] || 0}
                    onChange={(e) => handleAmountChange(member.id, parseFloat(e.target.value) || 0)}
                    disabled={formData.splitType === 'EQUAL'}
                    className={`w-full px-2 py-1 pl-6 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-600 dark:border-gray-500 dark:text-white ${
                      formData.splitType === 'EQUAL' ? 'bg-gray-100 dark:bg-gray-700' : ''
                    }`}
                  />
                </div>
              </div>
            </div>
          ))}
          
          <div className="flex justify-between text-sm font-medium pt-2 border-t border-gray-200 dark:border-gray-600 mt-2">
            <span className="text-gray-700 dark:text-gray-300">Total:</span>
            <span className="text-gray-900 dark:text-white">
              ${Object.values(splitAmounts).reduce((sum, amount) => sum + amount, 0).toFixed(2)}
            </span>
          </div>
        </div>
      </div>
      
      <div className="flex justify-end mt-6 gap-3">
        <button
          type="button"
          onClick={onCancel}
          disabled={isSubmitting}
          className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-70 disabled:cursor-not-allowed"
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={isSubmitting}
          className="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-blue-400 disabled:cursor-not-allowed"
        >
          {isSubmitting ? 'Saving...' : expense ? 'Update Expense' : 'Add Expense'}
        </button>
      </div>
    </form>
  );
}
```

// Directory: components\expenses, File: PaymentMatrix.tsx
// File Type: tsx
```tsx
// src/components/expenses/PaymentMatrix.tsx
'use client';

import { useState, useEffect } from 'react';

interface Balance {
  userId: string;
  userName: string;
  owes: number;
  isOwed: number;
  net: number;
}

interface PaymentMatrixProps {
  householdId: string;  // Added householdId prop
}

export default function PaymentMatrix({ householdId }: PaymentMatrixProps) {
  const [view, setView] = useState<'summary' | 'detail'>('summary');
  const [balances, setBalances] = useState<Balance[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // Fetch household balances when component mounts or householdId changes
  useEffect(() => {
    fetchBalances();
  }, [householdId]);
  
  const fetchBalances = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch(`/api/households/${householdId}/balances`);
      
      if (!response.ok) {
        throw new Error('Failed to fetch household balances');
      }
      
      const data = await response.json();
      setBalances(data);
    } catch (err) {
      console.error('Error fetching balances:', err);
      setError(err instanceof Error ? err.message : 'An error occurred while fetching balances');
    } finally {
      setLoading(false);
    }
  };
  
  // Calculate total amounts
  const totalOwed = balances.reduce((sum, balance) => sum + balance.isOwed, 0);
  const totalOwes = balances.reduce((sum, balance) => sum + balance.owes, 0);
  
  // Sort balances by net amount (descending)
  const sortedBalances = [...balances].sort((a, b) => b.net - a.net);
  
  // Calculate optimal payments
  const calculateOptimalPayments = () => {
    // Deep copy of the balances to work with
    const workingBalances = sortedBalances.map(b => ({ ...b }));
    const payments: { from: string, fromName: string, to: string, toName: string, amount: number }[] = [];
    
    // Continue until all balances are settled (within a small epsilon for floating point errors)
    const epsilon = 0.01; // $0.01 precision
    
    while (true) {
      // Find largest debtor (negative net balance)
      const debtor = workingBalances.filter(b => b.net < -epsilon).sort((a, b) => a.net - b.net)[0];
      
      // Find largest creditor (positive net balance)
      const creditor = workingBalances.filter(b => b.net > epsilon).sort((a, b) => b.net - a.net)[0];
      
      // If we can't find either, we're done
      if (!debtor || !creditor) break;
      
      // Calculate payment amount (minimum of the two absolute values)
      const amount = Math.min(Math.abs(debtor.net), creditor.net);
      
      // Record the payment
      payments.push({
        from: debtor.userId,
        fromName: debtor.userName,
        to: creditor.userId,
        toName: creditor.userName,
        amount: parseFloat(amount.toFixed(2)) // Round to 2 decimal places
      });
      
      // Update balances
      debtor.net += amount;
      creditor.net -= amount;
    }
    
    return payments;
  };
  
  const optimalPayments = calculateOptimalPayments();
  
  // Handle a payment being marked as complete
  const handleMarkPaymentComplete = async (fromUserId: string, toUserId: string, amount: number) => {
    try {
      const response = await fetch('/api/payments/mark-complete', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          householdId,
          fromUserId,
          toUserId,
          amount
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || 'Failed to mark payment as complete');
      }
      
      // Refresh balances after marking payment complete
      await fetchBalances();
      
      // Show success message
      alert('Payment marked as complete!');
    } catch (err) {
      console.error('Error marking payment complete:', err);
      alert(err instanceof Error ? err.message : 'An error occurred');
    }
  };

  if (loading) {
    return (
      <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden p-6">
        <div className="flex justify-center items-center h-40">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-white"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden p-6">
        <div className="text-red-600 dark:text-red-400">
          Error: {error}
          <button 
            onClick={fetchBalances}
            className="ml-2 text-blue-600 dark:text-blue-400 underline"
          >
            Try again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden">
      <div className="border-b border-gray-200 dark:border-gray-700 px-4 py-3 sm:px-6">
        <div className="flex justify-between items-center">
          <h3 className="text-lg font-medium text-gray-900 dark:text-white">
            Payment Summary
          </h3>
          
          <div className="flex">
            <button
              onClick={() => setView('summary')}
              className={`px-3 py-1 text-sm font-medium rounded-l-md ${
                view === 'summary'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300'
              }`}
            >
              Summary
            </button>
            <button
              onClick={() => setView('detail')}
              className={`px-3 py-1 text-sm font-medium rounded-r-md ${
                view === 'detail'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300'
              }`}
            >
              Payment Plan
            </button>
          </div>
        </div>
      </div>
      
      {balances.length === 0 ? (
        <div className="p-6 text-center text-gray-500 dark:text-gray-400">
          No financial data available. Add expenses to see payment summaries.
        </div>
      ) : view === 'summary' ? (
        <div className="px-4 py-5 sm:p-6">
          <div className="grid md:grid-cols-3 gap-6">
            {balances.map((balance) => (
              <div 
                key={balance.userId} 
                className="bg-gray-50 dark:bg-gray-700 p-4 rounded-md shadow-sm"
              >
                <div className="font-medium text-gray-900 dark:text-white mb-2">
                  {balance.userName}
                </div>
                <div className="space-y-1">
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-500 dark:text-gray-400">Total paid:</span>
                    <span className="text-gray-900 dark:text-white">${balance.isOwed.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-500 dark:text-gray-400">Total owed:</span>
                    <span className="text-gray-900 dark:text-white">${balance.owes.toFixed(2)}</span>
                  </div>
                  <div className="border-t border-gray-200 dark:border-gray-600 my-1 pt-1"></div>
                  <div className="flex justify-between text-sm font-medium">
                    <span>Balance:</span>
                    <span 
                      className={
                        balance.net > 0 
                          ? 'text-green-600 dark:text-green-400' 
                          : balance.net < 0 
                            ? 'text-red-600 dark:text-red-400' 
                            : 'text-gray-600 dark:text-gray-400'
                      }
                    >
                      {balance.net > 0 ? '+' : ''}{balance.net.toFixed(2)}
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
          
          <div className="mt-6 text-sm text-gray-500 dark:text-gray-400 text-center">
            <p>Total money exchanged in all expenses: ${totalOwed.toFixed(2)}</p>
          </div>
        </div>
      ) : (
        <div className="px-4 py-5 sm:p-6">
          <p className="text-sm text-gray-500 dark:text-gray-400 mb-4">
            To settle all balances, the following payments should be made:
          </p>
          
          {optimalPayments.length > 0 ? (
            <ul className="space-y-2">
              {optimalPayments.map((payment, index) => (
                <li 
                  key={index}
                  className="p-3 bg-gray-50 dark:bg-gray-700 rounded-md flex items-center justify-between"
                >
                  <div className="flex items-center">
                    <span className="font-medium text-gray-900 dark:text-white">{payment.fromName}</span>
                    <svg 
                      className="h-5 w-5 mx-2 text-gray-400" 
                      fill="none" 
                      stroke="currentColor" 
                      viewBox="0 0 24 24" 
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path 
                        strokeLinecap="round" 
                        strokeLinejoin="round" 
                        strokeWidth={2} 
                        d="M14 5l7 7m0 0l-7 7m7-7H3" 
                      />
                    </svg>
                    <span className="font-medium text-gray-900 dark:text-white">{payment.toName}</span>
                  </div>
                  <div className="flex items-center">
                    <span className="font-medium text-green-600 dark:text-green-400 mr-3">
                      ${payment.amount.toFixed(2)}
                    </span>
                    <button 
                      onClick={() => handleMarkPaymentComplete(payment.from, payment.to, payment.amount)}
                      className="px-2 py-1 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300 text-xs rounded-md hover:bg-green-200 dark:hover:bg-green-800"
                    >
                      Mark Paid
                    </button>
                  </div>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-center text-gray-700 dark:text-gray-300">
              All balances are settled. No payments needed.
            </p>
          )}
          
          <div className="mt-6 text-sm text-gray-500 dark:text-gray-400 text-center">
            <p>This payment plan simplifies the settlement process with the minimum number of transactions.</p>
          </div>
        </div>
      )}
    </div>
  );
}
```

// Directory: components\invitations, File: InvitationForm.tsx
// File Type: tsx
```tsx
// src/components/invitations/InvitationForm.tsx
'use client';

import { useState } from 'react';
import Button from '@/components/ui/Button';

interface InvitationFormProps {
  householdId: string;
  onInviteSent?: () => void;
  onCancel?: () => void;
}

export default function InvitationForm({ 
  householdId, 
  onInviteSent, 
  onCancel 
}: InvitationFormProps) {
  const [email, setEmail] = useState('');
  const [role, setRole] = useState<'ADMIN' | 'MEMBER' | 'GUEST'>('MEMBER');
  const [message, setMessage] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [invitationLink, setInvitationLink] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError('');
    setSuccess('');
    setInvitationLink('');

    try {
      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        setError('Please enter a valid email address');
        setIsSubmitting(false);
        return;
      }

      // Call API to send invitation
      const response = await fetch('/api/invitations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email,
          householdId,
          role,
          message: message.trim() || undefined,
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to send invitation');
      }

      // Show success message
      setSuccess(`Invitation sent to ${email}`);
      
      // Store the invitation link to display to the user
      if (data.invitation?.invitationLink) {
        setInvitationLink(data.invitation.invitationLink);
      }
      
      // Reset form
      setEmail('');
      setRole('MEMBER');
      setMessage('');
      
      // Notify parent component
      if (onInviteSent) {
        onInviteSent();
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {error && (
        <div className="p-3 bg-red-50 dark:bg-red-900 text-red-700 dark:text-red-300 rounded-md">
          {error}
        </div>
      )}
      
      {success && (
        <div className="p-3 bg-green-50 dark:bg-green-900 text-green-700 dark:text-green-300 rounded-md">
          {success}
          
          {invitationLink && (
            <div className="mt-2">
              <p className="text-sm font-medium">Invitation Link:</p>
              <div className="mt-1 flex">
                <input
                  type="text"
                  readOnly
                  value={invitationLink}
                  className="flex-1 p-2 text-sm bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-l-md"
                />
                <button
                  type="button"
                  onClick={() => {
                    navigator.clipboard.writeText(invitationLink);
                    alert('Link copied to clipboard!');
                  }}
                  className="px-3 py-2 text-sm bg-blue-600 text-white rounded-r-md hover:bg-blue-700"
                >
                  Copy
                </button>
              </div>
              <p className="mt-1 text-xs">
                Share this link with your roommate to join your household.
              </p>
            </div>
          )}
        </div>
      )}
      
      <div>
        <label 
          htmlFor="email" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Email Address
        </label>
        <input
          id="email"
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="Enter your roommate's email"
          required
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
      </div>
      
      <div>
        <label 
          htmlFor="role" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Role
        </label>
        <select
          id="role"
          value={role}
          onChange={(e) => setRole(e.target.value as 'ADMIN' | 'MEMBER' | 'GUEST')}
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        >
          <option value="ADMIN">Admin (Full access)</option>
          <option value="MEMBER">Member (Standard access)</option>
          <option value="GUEST">Guest (Limited access)</option>
        </select>
        <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
          {role === 'ADMIN' && 'Admins can manage household settings, members, and all features.'}
          {role === 'MEMBER' && 'Members can create expenses, tasks, and participate in all activities.'}
          {role === 'GUEST' && 'Guests can view and participate in activities but cannot modify household settings.'}
        </p>
      </div>
      
      <div>
        <label 
          htmlFor="message" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Personal Message (Optional)
        </label>
        <textarea
          id="message"
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          placeholder="Add a personal message to your invitation..."
          rows={3}
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
      </div>
      
      <div className="flex justify-end space-x-3 pt-3">
        {onCancel && (
          <Button 
            type="button"
            variant="outline"
            onClick={onCancel}
          >
            Cancel
          </Button>
        )}
        
        <Button
          type="submit"
          variant="primary"
          isLoading={isSubmitting}
          disabled={isSubmitting}
        >
          {isSubmitting ? 'Sending...' : 'Send Invitation'}
        </Button>
      </div>
    </form>
  );
}
```

// Directory: components\invitations, File: InvitationManager.tsx
// File Type: tsx
```tsx

```

// Directory: components\invitations, File: InviteModal.tsx
// File Type: tsx
```tsx
// src/components/invitations/InviteModal.tsx
'use client';

import { useState } from 'react';
import InvitationForm from './InvitationForm';
import PendingInvitations from './PendingInvitations';

interface InviteModalProps {
  householdId: string;
  onClose: () => void;
}

export default function InviteModal({
  householdId,
  onClose
}: InviteModalProps) {
  const [activeTab, setActiveTab] = useState<'invite' | 'pending'>('invite');
  const [refreshTrigger, setRefreshTrigger] = useState(0);

  const handleRefresh = () => {
    setRefreshTrigger(prev => prev + 1);
  };

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen px-4">
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={onClose} />
        
        <div className="relative bg-white dark:bg-gray-800 rounded-lg max-w-md w-full p-6 shadow-xl">
          <div className="absolute top-0 right-0 pt-4 pr-4">
            <button
              type="button"
              className="bg-white dark:bg-gray-800 rounded-md text-gray-400 hover:text-gray-500 dark:hover:text-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              onClick={onClose}
            >
              <span className="sr-only">Close</span>
              <svg 
                className="h-6 w-6" 
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor" 
                aria-hidden="true"
              >
                <path 
                  strokeLinecap="round" 
                  strokeLinejoin="round" 
                  strokeWidth="2" 
                  d="M6 18L18 6M6 6l12 12" 
                />
              </svg>
            </button>
          </div>
          
          <div className="mt-3 text-center sm:mt-0 sm:text-left">
            <h3 className="text-lg font-medium leading-6 text-gray-900 dark:text-white">
              Manage Roommate Invitations
            </h3>
            <div className="mt-2">
              <p className="text-sm text-gray-500 dark:text-gray-400">
                Invite your roommates to join your household and manage pending invitations.
              </p>
            </div>
          </div>
          
          {/* Tabs */}
          <div className="mt-4 border-b border-gray-200 dark:border-gray-700">
            <nav className="-mb-px flex space-x-8">
              <button
                onClick={() => setActiveTab('invite')}
                className={`${
                  activeTab === 'invite'
                    ? 'border-blue-500 text-blue-600 dark:text-blue-400'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
                } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
              >
                Send Invitation
              </button>
              
              <button
                onClick={() => setActiveTab('pending')}
                className={`${
                  activeTab === 'pending'
                    ? 'border-blue-500 text-blue-600 dark:text-blue-400'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
                } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
              >
                Pending Invitations
              </button>
            </nav>
          </div>
          
          {/* Tab content */}
          <div className="mt-4">
            {activeTab === 'invite' ? (
              <InvitationForm 
                householdId={householdId} 
                onInviteSent={() => {
                  handleRefresh();
                  setActiveTab('pending');
                }}
              />
            ) : (
              <PendingInvitations 
                householdId={householdId}
                onRefresh={handleRefresh}
                key={refreshTrigger} // Force refresh when triggered
              />
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
```

// Directory: components\invitations, File: PendingInvitations.tsx
// File Type: tsx
```tsx
// src/components/invitations/PendingInvitations.tsx
'use client';

import { useState, useEffect } from 'react';
import { formatDate } from '@/lib/utils';
import Button from '@/components/ui/Button';

interface Invitation {
  id: string;
  email: string;
  role: string;
  status: string;
  message?: string;
  expiresAt: string;
  createdAt: string;
  inviter?: {
    id: string;
    name: string;
    email: string;
    avatar?: string;
  };
}

interface PendingInvitationsProps {
  householdId: string;
  onRefresh?: () => void;
}

export default function PendingInvitations({ 
  householdId,
  onRefresh
}: PendingInvitationsProps) {
  const [invitations, setInvitations] = useState<Invitation[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [isResending, setIsResending] = useState<Record<string, boolean>>({});
  const [isCanceling, setIsCanceling] = useState<Record<string, boolean>>({});

  useEffect(() => {
    fetchInvitations();
  }, [householdId]);

  const fetchInvitations = async () => {
    try {
      setLoading(true);
      setError('');
      
      const response = await fetch(`/api/invitations?householdId=${householdId}&status=PENDING`);
      
      if (!response.ok) {
        throw new Error('Failed to fetch invitations');
      }
      
      const data = await response.json();
      setInvitations(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  const handleResendInvitation = async (invitationId: string) => {
    try {
      setIsResending(prev => ({ ...prev, [invitationId]: true }));
      
      // Make actual API call to resend invitation
      const response = await fetch(`/api/invitations/${invitationId}/resend`, {
        method: 'POST',
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || 'Failed to resend invitation');
      }
      
      // Show success notification
      alert('Invitation has been resent successfully!');
      
      // Refresh the list
      await fetchInvitations();
      
      if (onRefresh) {
        onRefresh();
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to resend invitation');
    } finally {
      setIsResending(prev => ({ ...prev, [invitationId]: false }));
    }
  };

  const handleCancelInvitation = async (invitationId: string) => {
    if (!confirm('Are you sure you want to cancel this invitation?')) {
      return;
    }
    
    try {
      setIsCanceling(prev => ({ ...prev, [invitationId]: true }));
      
      // Make actual API call to cancel invitation
      const response = await fetch(`/api/invitations/${invitationId}`, {
        method: 'DELETE',
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || 'Failed to cancel invitation');
      }
      
      // Remove the invitation from the list
      setInvitations(prev => prev.filter(inv => inv.id !== invitationId));
      
      if (onRefresh) {
        onRefresh();
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to cancel invitation');
    } finally {
      setIsCanceling(prev => ({ ...prev, [invitationId]: false }));
    }
  };

  if (loading) {
    return (
      <div className="py-4 text-center text-gray-500 dark:text-gray-400">
        Loading invitations...
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-4 bg-red-50 dark:bg-red-900 text-red-700 dark:text-red-300 rounded-md">
        Error: {error}
      </div>
    );
  }

  if (invitations.length === 0) {
    return (
      <div className="py-4 text-center text-gray-500 dark:text-gray-400">
        No pending invitations
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {invitations.map(invitation => (
        <div 
          key={invitation.id} 
          className="p-4 bg-white dark:bg-gray-800 rounded-md shadow border border-gray-200 dark:border-gray-700"
        >
          <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
            <div>
              <div className="flex items-center">
                <h3 className="font-medium text-gray-900 dark:text-white">{invitation.email}</h3>
                <span className="ml-2 px-2 py-0.5 text-xs rounded-full bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200">
                  Pending
                </span>
              </div>
              
              <div className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                <p>Role: {invitation.role.charAt(0) + invitation.role.slice(1).toLowerCase()}</p>
                <p>Sent: {formatDate(invitation.createdAt, true)}</p>
                <p>Expires: {formatDate(invitation.expiresAt)}</p>
              </div>
              
              {invitation.message && (
                <div className="mt-2 p-2 bg-gray-50 dark:bg-gray-700 rounded text-sm italic text-gray-600 dark:text-gray-300">
                  "{invitation.message}"
                </div>
              )}
            </div>
            
            <div className="flex sm:flex-col gap-2">
              <Button
                size="sm"
                variant="outline"
                isLoading={isResending[invitation.id]}
                disabled={isResending[invitation.id] || isCanceling[invitation.id]}
                onClick={() => handleResendInvitation(invitation.id)}
              >
                Resend
              </Button>
              
              <Button
                size="sm"
                variant="danger"
                isLoading={isCanceling[invitation.id]}
                disabled={isResending[invitation.id] || isCanceling[invitation.id]}
                onClick={() => handleCancelInvitation(invitation.id)}
              >
                Cancel
              </Button>
            </div>
          </div>
        </div>
      ))}
    </div>
  );
}
```

// Directory: components\invitations, File: UserInvitationsList.tsx
// File Type: tsx
```tsx
'use client';

import { useState, useEffect } from 'react';
import { formatDate } from '@/lib/utils';
import Button from '@/components/ui/Button';

interface Invitation {
  id: string;
  email: string;
  role: string;
  status: string;
  householdId: string;
  household: {
    id: string;
    name: string;
    address?: string;
  };
  inviter: {
    id: string;
    name: string;
    email: string;
    avatar?: string;
  };
  createdAt: string;
  expiresAt: string;
}

export default function UserInvitationsList() {
  const [invitations, setInvitations] = useState<Invitation[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [processingIds, setProcessingIds] = useState<string[]>([]);
  
  // Fetch user's pending invitations
  useEffect(() => {
    const fetchInvitations = async () => {
      try {
        setLoading(true);
        const response = await fetch('/api/invitations?status=PENDING');
        
        if (!response.ok) {
          throw new Error('Failed to fetch invitations');
        }
        
        const data = await response.json();
        setInvitations(data);
      } catch (err) {
        setError('Error loading invitations');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    
    fetchInvitations();
  }, []);
  
  const handleAction = async (id: string, action: 'accept' | 'decline') => {
    setProcessingIds(prev => [...prev, id]);
    
    try {
      const response = await fetch(`/api/invitations/${id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status: action === 'accept' ? 'ACCEPTED' : 'DECLINED' }),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to ${action} invitation`);
      }
      
      // Remove from list or update status
      setInvitations(prev => prev.filter(inv => inv.id !== id));
      
      // If accepted, we might want to redirect to the household
      if (action === 'accept') {
        // Could redirect or show a success message
      }
    } catch (err) {
      setError(`Error ${action}ing invitation`);
      console.error(err);
    } finally {
      setProcessingIds(prev => prev.filter(pid => pid !== id));
    }
  };
  
  if (loading) {
    return <div>Loading your invitations...</div>;
  }
  
  if (error) {
    return <div className="text-red-500">{error}</div>;
  }
  
  if (invitations.length === 0) {
    return <div>You don't have any pending invitations.</div>;
  }
  
  return (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold">Pending Invitations</h2>
      
      {invitations.map((invitation) => (
        <div 
          key={invitation.id} 
          className="p-4 bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700"
        >
          <div className="flex items-start justify-between">
            <div>
              <h3 className="font-medium text-lg">
                Invitation to join {invitation.household.name}
              </h3>
              <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                From: {invitation.inviter.name} ({invitation.inviter.email})
              </p>
              <p className="text-sm text-gray-500 dark:text-gray-400">
                Role: {invitation.role.charAt(0) + invitation.role.slice(1).toLowerCase()}
              </p>
              <p className="text-sm text-gray-500 dark:text-gray-400">
                Sent: {formatDate(invitation.createdAt)}
              </p>
              <p className="text-sm text-gray-500 dark:text-gray-400">
                Expires: {formatDate(invitation.expiresAt)}
              </p>
            </div>
            
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                isLoading={processingIds.includes(invitation.id)}
                disabled={processingIds.includes(invitation.id)}
                onClick={() => handleAction(invitation.id, 'decline')}
              >
                Decline
              </Button>
              <Button
                variant="primary"
                size="sm"
                isLoading={processingIds.includes(invitation.id)}
                disabled={processingIds.includes(invitation.id)}
                onClick={() => handleAction(invitation.id, 'accept')}
              >
                Accept
              </Button>
            </div>
          </div>
        </div>
      ))}
    </div>
  );
}
```

// Directory: components\notifications, File: InvitationBadge.tsx
// File Type: tsx
```tsx
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';

export default function InvitationBadge() {
  const [count, setCount] = useState(0);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const fetchInvitationCount = async () => {
      try {
        const response = await fetch('/api/invitations/count');
        
        if (response.ok) {
          const data = await response.json();
          setCount(data.count || 0);
        }
      } catch (error) {
        console.error('Error fetching invitation count:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchInvitationCount();
    
    // Optionally set up polling or real-time updates
    const interval = setInterval(fetchInvitationCount, 60000); // Check every minute
    
    return () => clearInterval(interval);
  }, []);
  
  if (loading || count === 0) {
    return null;
  }
  
  return (
    <Link href="/dashboard/invitations">
      <div className="relative inline-flex">
        <span className="sr-only">{count} pending invitations</span>
        <svg className="h-6 w-6 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
        </svg>
        <span className="absolute -top-1 -right-1 h-5 w-5 rounded-full bg-red-600 flex items-center justify-center text-xs text-white">
          {count}
        </span>
      </div>
    </Link>
  );
}
```

// Directory: components\tasks, File: TaskForm.tsx
// File Type: tsx
```tsx
// src/components/tasks/TaskForm.tsx
'use client';

import { useState, useEffect } from 'react';
import { supabaseClient } from '@/lib/supabase';

interface Member {
  id: string;
  name: string;
  avatar?: string;
}

interface Task {
  id: string;
  title: string;
  description?: string;
  status: 'PENDING' | 'IN_PROGRESS' | 'COMPLETED' | 'SKIPPED';
  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';
  creatorId: string;
  creatorName?: string;
  assigneeId?: string;
  assigneeName?: string;
  dueDate?: Date | string;
  recurring: boolean;
  recurrenceRule?: string;
  householdId: string;
  completedAt?: Date;
}

// Define a NewTask type that can be used for creation (without id)
type NewTask = Omit<Task, 'id'> & { id?: string };

interface TaskFormProps {
  task?: Task | null;
  members: Member[];
  householdId: string; // Added householdId prop
  onSubmit: (task: Task | NewTask) => void;
  onCancel: () => void;
}

export default function TaskForm({ 
  task, 
  members, 
  householdId, 
  onSubmit, 
  onCancel 
}: TaskFormProps) {
  const [currentUserId, setCurrentUserId] = useState<string>('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // Get current user from Supabase
  useEffect(() => {
    const getCurrentUser = async () => {
      const { data: { session } } = await supabaseClient.auth.getSession();
      if (session?.user) {
        setCurrentUserId(session.user.id);
      }
    };
    
    getCurrentUser();
  }, []);
  
  const currentUser = members.find(m => m.id === currentUserId);
  
  // Default state for a new task
  const getDefaultState = () => ({
    title: '',
    description: '',
    status: 'PENDING' as const,
    priority: 'MEDIUM' as const,
    creatorId: currentUserId,
    assigneeId: '',
    dueDate: '',
    recurring: false,
    recurrenceRule: 'WEEKLY',
    householdId, // Use prop instead of hardcoded value
  });

  const [formData, setFormData] = useState<Omit<Task, 'id' | 'dueDate'> & { id?: string, dueDate: string }>(getDefaultState());
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});

  // Initialize form data when task prop changes or when currentUserId is set
  useEffect(() => {
    if (!currentUserId) return; // Wait for user to be set
    
    if (task) {
      setFormData({
        ...task,
        dueDate: task.dueDate ? new Date(task.dueDate).toISOString().split('T')[0] : '', // Convert Date to YYYY-MM-DD
        recurrenceRule: task.recurrenceRule || 'WEEKLY',
      });
    } else {
      setFormData({
        ...getDefaultState(),
        creatorId: currentUserId,
      });
    }
  }, [task, currentUserId, householdId]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    
    if (type === 'checkbox') {
      const checkbox = e.target as HTMLInputElement;
      setFormData({ ...formData, [name]: checkbox.checked });
    } else {
      setFormData({ ...formData, [name]: value });
    }
    
    // Clear error when field is edited
    if (formErrors[name]) {
      setFormErrors({ ...formErrors, [name]: '' });
    }
    
    // Clear general error
    if (error) {
      setError(null);
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    
    if (!formData.title.trim()) {
      newErrors.title = 'Title is required';
    }
    
    if (!formData.assigneeId) {
      newErrors.assigneeId = 'Please select an assignee';
    }
    
    if (formData.recurring && !formData.recurrenceRule) {
      newErrors.recurrenceRule = 'Please select a recurrence pattern';
    }
    
    setFormErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setIsSubmitting(true);
    setError(null);
    
    try {
      // Prepare task data
      const taskData: NewTask = {
        ...formData,
        dueDate: formData.dueDate ? new Date(formData.dueDate) : undefined, // Convert string back to Date
      };
      
      // Add assignee name
      if (taskData.assigneeId) {
        const assignee = members.find(m => m.id === taskData.assigneeId);
        if (assignee) {
          taskData.assigneeName = assignee.name;
        }
      }
      
      // Add creator name if not already set
      if (!taskData.creatorName && currentUser) {
        taskData.creatorName = currentUser.name;
      }
      
      // If editing an existing task
      if (task?.id) {
        const response = await fetch(`/api/tasks/${task.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(taskData),
        });
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.message || 'Failed to update task');
        }
      } 
      // If creating a new task
      else {
        const response = await fetch('/api/tasks', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(taskData),
        });
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.message || 'Failed to create task');
        }
      }
      
      // Call onSubmit callback with the task data
      onSubmit(taskData);
    } catch (err) {
      console.error('Error saving task:', err);
      setError(err instanceof Error ? err.message : 'An error occurred while saving the task');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="mt-5 space-y-4">
      {error && (
        <div className="p-3 bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-400 rounded-md">
          {error}
        </div>
      )}
      
      <div>
        <label 
          htmlFor="title" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Title
        </label>
        <input
          id="title"
          name="title"
          type="text"
          value={formData.title}
          onChange={handleInputChange}
          placeholder="e.g., Clean the kitchen, Take out trash"
          required
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
        {formErrors.title && <p className="mt-1 text-sm text-red-600 dark:text-red-400">{formErrors.title}</p>}
      </div>
      
      <div>
        <label 
          htmlFor="description" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Description (Optional)
        </label>
        <textarea
          id="description"
          name="description"
          value={formData.description || ''}
          onChange={handleInputChange}
          rows={3}
          placeholder="Add details about the task..."
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label 
            htmlFor="assigneeId" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Assign To
          </label>
          <select
            id="assigneeId"
            name="assigneeId"
            value={formData.assigneeId || ''}
            onChange={handleInputChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          >
            <option value="">Select a person</option>
            {members.map(member => (
              <option key={member.id} value={member.id}>
                {member.name}
              </option>
            ))}
          </select>
          {formErrors.assigneeId && <p className="mt-1 text-sm text-red-600 dark:text-red-400">{formErrors.assigneeId}</p>}
        </div>
        
        <div>
          <label 
            htmlFor="priority" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Priority
          </label>
          <select
            id="priority"
            name="priority"
            value={formData.priority}
            onChange={handleInputChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          >
            <option value="LOW">Low</option>
            <option value="MEDIUM">Medium</option>
            <option value="HIGH">High</option>
            <option value="URGENT">Urgent</option>
          </select>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label 
            htmlFor="dueDate" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Due Date
          </label>
          <input
            id="dueDate"
            name="dueDate"
            type="date"
            value={formData.dueDate}
            onChange={handleInputChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>
        
        <div>
          <label 
            htmlFor="status" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Status
          </label>
          <select
            id="status"
            name="status"
            value={formData.status}
            onChange={handleInputChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          >
            <option value="PENDING">Pending</option>
            <option value="IN_PROGRESS">In Progress</option>
            <option value="COMPLETED">Completed</option>
            <option value="SKIPPED">Skipped</option>
          </select>
        </div>
      </div>
      
      <div className="flex items-center mt-2">
        <input
          id="recurring"
          name="recurring"
          type="checkbox"
          checked={formData.recurring}
          onChange={handleInputChange}
          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
        />
        <label htmlFor="recurring" className="ml-2 block text-sm text-gray-700 dark:text-gray-300">
          Recurring task
        </label>
      </div>
      
      {formData.recurring && (
        <div>
          <label 
            htmlFor="recurrenceRule" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Recurrence Pattern
          </label>
          <select
            id="recurrenceRule"
            name="recurrenceRule"
            value={formData.recurrenceRule}
            onChange={handleInputChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          >
            <option value="DAILY">Daily</option>
            <option value="WEEKLY">Weekly</option>
            <option value="BIWEEKLY">Every 2 weeks</option>
            <option value="MONTHLY">Monthly</option>
          </select>
          {formErrors.recurrenceRule && <p className="mt-1 text-sm text-red-600 dark:text-red-400">{formErrors.recurrenceRule}</p>}
        </div>
      )}
      
      <div className="flex justify-end mt-6 gap-3">
        <button
          type="button"
          onClick={onCancel}
          disabled={isSubmitting}
          className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-70 disabled:cursor-not-allowed"
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={isSubmitting}
          className="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-blue-400 disabled:cursor-not-allowed"
        >
          {isSubmitting ? 'Saving...' : task ? 'Update Task' : 'Create Task'}
        </button>
      </div>
    </form>
  );
}
```

// Directory: components\tasks, File: TaskList.tsx
// File Type: tsx
```tsx
// src/components/tasks/TaskList.tsx
'use client';

import { useState } from 'react';
import Image from 'next/image';

export interface Task {
  id: string;
  title: string;
  description?: string;
  status: 'PENDING' | 'IN_PROGRESS' | 'COMPLETED' | 'SKIPPED';
  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';
  creatorId: string;
  creatorName?: string;
  assigneeId?: string;
  assigneeName?: string;
  dueDate?: Date | string;
  recurring: boolean;
  recurrenceRule?: string;
  householdId: string;
  completedAt?: Date;
}

export interface TaskListProps {
  tasks: Task[];
  currentUserId: string;
  onStatusChange: (taskId: string, newStatus: string) => void;
  onEditTask: (task: Task) => void;
  onDeleteTask: (taskId: string) => void;
}

export default function TaskList({ 
  tasks, 
  currentUserId, 
  onStatusChange, 
  onEditTask, 
  onDeleteTask 
}: TaskListProps) {
  const [expandedTaskId, setExpandedTaskId] = useState<string | null>(null);

  const toggleTaskExpand = (taskId: string) => {
    if (expandedTaskId === taskId) {
      setExpandedTaskId(null);
    } else {
      setExpandedTaskId(taskId);
    }
  };

  const getPriorityColor = (priority: Task['priority']) => {
    switch (priority) {
      case 'LOW':
        return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
      case 'MEDIUM':
        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';
      case 'HIGH':
        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';
      case 'URGENT':
        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';
    }
  };

  const getStatusColor = (status: Task['status']) => {
    switch (status) {
      case 'PENDING':
        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';
      case 'IN_PROGRESS':
        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';
      case 'COMPLETED':
        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';
      case 'SKIPPED':
        return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
    }
  };

  const formatDueDate = (date?: Date | string) => {
    if (!date) return 'No due date';
    const dueDate = typeof date === 'string' ? new Date(date) : date;
    return dueDate.toLocaleDateString();
  };

  return (
    <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden">
      {tasks.length === 0 ? (
        <div className="p-6 text-center text-gray-500 dark:text-gray-400">
          No tasks found with the current filter.
        </div>
      ) : (
        <ul className="divide-y divide-gray-200 dark:divide-gray-700">
          {tasks.map(task => (
            <li key={task.id} className="px-4 py-4">
              <div 
                className="flex items-center justify-between cursor-pointer"
                onClick={() => toggleTaskExpand(task.id)}
              >
                <div className="flex items-start">
                  {/* Task Status Checkbox */}
                  <div className="mr-4 mt-1">
                    <input
                      type="checkbox"
                      checked={task.status === 'COMPLETED'}
                      onChange={(e) => {
                        e.stopPropagation();
                        onStatusChange(task.id, e.target.checked ? 'COMPLETED' : 'PENDING');
                      }}
                      className="h-5 w-5 text-blue-600 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800"
                    />
                  </div>
                  
                  {/* Task Overview */}
                  <div>
                    <h3 className={`text-lg font-medium ${
                      task.status === 'COMPLETED' ? 'text-gray-500 dark:text-gray-400 line-through' : 'text-gray-900 dark:text-white'
                    }`}>
                      {task.title}
                    </h3>
                    
                    <div className="mt-1 flex flex-wrap gap-2">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(task.status)}`}>
                        {task.status.replace('_', ' ')}
                      </span>
                      
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getPriorityColor(task.priority)}`}>
                        {task.priority}
                      </span>
                      
                      {task.recurring && (
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300">
                          Recurring
                        </span>
                      )}
                      
                      <span className="inline-flex items-center text-xs text-gray-500 dark:text-gray-400">
                        Due: {formatDueDate(task.dueDate)}
                      </span>
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center">
                  <span className="text-sm text-gray-500 dark:text-gray-400 mr-2">
                    {task.assigneeName || 'Unassigned'}
                  </span>
                  <svg 
                    className={`h-5 w-5 text-gray-400 transform transition-transform ${expandedTaskId === task.id ? 'rotate-180' : ''}`} 
                    fill="none" 
                    viewBox="0 0 24 24" 
                    stroke="currentColor"
                  >
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7" />
                  </svg>
                </div>
              </div>
              
              {/* Expanded Task Details */}
              {expandedTaskId === task.id && (
                <div className="mt-4 pl-9 border-t border-gray-100 dark:border-gray-700 pt-4">
                  {task.description && (
                    <div className="mb-4">
                      <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Description</h4>
                      <p className="text-sm text-gray-600 dark:text-gray-400">{task.description}</p>
                    </div>
                  )}
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div>
                      <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Assigned by</h4>
                      <p className="text-sm text-gray-600 dark:text-gray-400">{task.creatorName}</p>
                    </div>
                    
                    {task.recurring && (
                      <div>
                        <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Recurrence</h4>
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                          {task.recurrenceRule === 'DAILY' && 'Daily'}
                          {task.recurrenceRule === 'WEEKLY' && 'Weekly'}
                          {task.recurrenceRule === 'BIWEEKLY' && 'Every 2 weeks'}
                          {task.recurrenceRule === 'MONTHLY' && 'Monthly'}
                        </p>
                      </div>
                    )}
                    
                    {task.completedAt && (
                      <div>
                        <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Completed on</h4>
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                          {new Date(task.completedAt).toLocaleDateString()}
                        </p>
                      </div>
                    )}
                  </div>
                  
                  <div className="flex justify-end space-x-2">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        onEditTask(task);
                      }}
                      className="text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
                    >
                      Edit
                    </button>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        onDeleteTask(task.id);
                      }}
                      className="text-sm text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              )}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}
```

// Directory: components\ui, File: Button.tsx
// File Type: tsx
```tsx
// src/components/ui/Button.tsx
'use client';

import { ReactNode, ButtonHTMLAttributes, forwardRef } from 'react';

interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  children: ReactNode;
  variant?: 'primary' | 'secondary' | 'outline' | 'danger' | 'success';
  size?: 'sm' | 'md' | 'lg';
  fullWidth?: boolean;
  isLoading?: boolean;
  leftIcon?: ReactNode;
  rightIcon?: ReactNode;
}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  (
    {
      children,
      variant = 'primary',
      size = 'md',
      fullWidth = false,
      isLoading = false,
      disabled,
      leftIcon,
      rightIcon,
      className = '',
      ...props
    },
    ref
  ) => {
    // Base styles
    const baseStyles = "inline-flex items-center justify-center font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2";
    
    // Variant styles
    const variantStyles = {
      primary: "bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500 border border-transparent disabled:bg-blue-400",
      secondary: "bg-gray-200 text-gray-800 hover:bg-gray-300 focus:ring-gray-500 border border-transparent disabled:bg-gray-200 dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600",
      outline: "bg-transparent text-gray-700 hover:bg-gray-50 focus:ring-gray-500 border border-gray-300 disabled:text-gray-400 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-800",
      danger: "bg-red-600 text-white hover:bg-red-700 focus:ring-red-500 border border-transparent disabled:bg-red-400",
      success: "bg-green-600 text-white hover:bg-green-700 focus:ring-green-500 border border-transparent disabled:bg-green-400"
    };
    
    // Size styles
    const sizeStyles = {
      sm: "text-xs px-2.5 py-1.5",
      md: "text-sm px-4 py-2",
      lg: "text-base px-6 py-3"
    };
    
    // Width styles
    const widthStyles = fullWidth ? "w-full" : "";
    
    // Disabled and loading styles
    const stateStyles = (disabled || isLoading) ? "cursor-not-allowed opacity-70" : "";

    return (
      <button
        ref={ref}
        disabled={disabled || isLoading}
        className={`
          ${baseStyles}
          ${variantStyles[variant]}
          ${sizeStyles[size]}
          ${widthStyles}
          ${stateStyles}
          ${className}
        `}
        {...props}
      >
        {isLoading && (
          <svg 
            className="animate-spin -ml-1 mr-2 h-4 w-4" 
            xmlns="http://www.w3.org/2000/svg" 
            fill="none" 
            viewBox="0 0 24 24"
          >
            <circle 
              className="opacity-25" 
              cx="12" 
              cy="12" 
              r="10" 
              stroke="currentColor" 
              strokeWidth="4"
            ></circle>
            <path 
              className="opacity-75" 
              fill="currentColor" 
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
        )}
        {!isLoading && leftIcon && <span className="mr-2">{leftIcon}</span>}
        {children}
        {!isLoading && rightIcon && <span className="ml-2">{rightIcon}</span>}
      </button>
    );
  }
);

Button.displayName = 'Button';

export default Button;
```

// Directory: components\ui, File: Card.tsx
// File Type: tsx
```tsx
// src/components/ui/Card.tsx
import { ReactNode } from 'react';

interface CardProps {
  children: ReactNode;
  title?: string | ReactNode;
  footer?: ReactNode;
  className?: string;
  headerClassName?: string;
  bodyClassName?: string;
  footerClassName?: string;
  noPadding?: boolean;
}

export default function Card({
  children,
  title,
  footer,
  className = '',
  headerClassName = '',
  bodyClassName = '',
  footerClassName = '',
  noPadding = false
}: CardProps) {
  return (
    <div className={`bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden ${className}`}>
      {title && (
        <div className={`border-b border-gray-200 dark:border-gray-700 px-4 py-3 ${headerClassName}`}>
          {typeof title === 'string' ? (
            <h3 className="text-lg font-medium text-gray-900 dark:text-white">{title}</h3>
          ) : (
            title
          )}
        </div>
      )}
      
      <div className={`${noPadding ? '' : 'p-4'} ${bodyClassName}`}>
        {children}
      </div>
      
      {footer && (
        <div className={`border-t border-gray-200 dark:border-gray-700 px-4 py-3 ${footerClassName}`}>
          {footer}
        </div>
      )}
    </div>
  );
}

// Additional card-related components for more complex layouts
export function CardHeader({ 
  children, 
  className = '' 
}: { 
  children: ReactNode;
  className?: string;
}) {
  return (
    <div className={`border-b border-gray-200 dark:border-gray-700 px-4 py-3 ${className}`}>
      {children}
    </div>
  );
}

export function CardTitle({ 
  children,
  className = ''
}: { 
  children: ReactNode;
  className?: string;
}) {
  return (
    <h3 className={`text-lg font-medium text-gray-900 dark:text-white ${className}`}>
      {children}
    </h3>
  );
}

export function CardBody({ 
  children,
  className = ''
}: { 
  children: ReactNode;
  className?: string;
}) {
  return (
    <div className={`p-4 ${className}`}>
      {children}
    </div>
  );
}

export function CardFooter({ 
  children,
  className = ''
}: { 
  children: ReactNode;
  className?: string;
}) {
  return (
    <div className={`border-t border-gray-200 dark:border-gray-700 px-4 py-3 ${className}`}>
      {children}
    </div>
  );
}
```

