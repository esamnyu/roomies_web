// This master file consolidates 6 main folders from the src directory.
// The following folder consolidations are included:
// - app_consolidated.txt
// - components_consolidated.txt
// - context_consolidated.txt
// - lib_consolidated.txt
// - scripts_consolidated.txt
// - types_consolidated.txt

// Project Statistics:
// - Total lines of code: 14983
// - Total tokens: 243753

// ===== Start of app folder =====

// Consolidated 44 files from the "app" folder
// This file contains all code files within the "app" folder and its subfolders.

// Directory: app, File: globals.css
// File Type: css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

```

// Directory: app, File: layout.tsx
// File Type: tsx
```tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Providers from "./providers";

const geistSans = Geist({
 variable: "--font-geist-sans",
 subsets: ["latin"],
});

const geistMono = Geist_Mono({
 variable: "--font-geist-mono",
 subsets: ["latin"],
});

export const metadata: Metadata = {
 title: "Roomies - Roommate Management App",
 description: "Manage expenses, tasks, and communication with your roommates",
};

export default function RootLayout({
 children,
}: Readonly<{
 children: React.ReactNode;
}>) {
 return (
   <html lang="en">
     <body
       className={`${geistSans.variable} ${geistMono.variable} antialiased`}
     >
       <Providers>{children}</Providers>
     </body>
   </html>
 );
}
```

// Directory: app, File: page.tsx
// File Type: tsx
```tsx
import Image from "next/image";

export default function Home() {
  return (
    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]">
      <main className="flex flex-col gap-8 row-start-2 items-center sm:items-start">
        <Image
          className="dark:invert"
          src="/next.svg"
          alt="Next.js logo"
          width={180}
          height={38}
          priority
        />
        <ol className="list-inside list-decimal text-sm text-center sm:text-left font-[family-name:var(--font-geist-mono)]">
          <li className="mb-2">
            Get started by editing{" "}
            <code className="bg-black/[.05] dark:bg-white/[.06] px-1 py-0.5 rounded font-semibold">
              src/app/page.tsx
            </code>
            .
          </li>
          <li>Save and see your changes instantly.</li>
        </ol>

        <div className="flex gap-4 items-center flex-col sm:flex-row">
          <a
            className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-background gap-2 hover:bg-[#383838] dark:hover:bg-[#ccc] text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5"
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            <Image
              className="dark:invert"
              src="/vercel.svg"
              alt="Vercel logomark"
              width={20}
              height={20}
            />
            Deploy now
          </a>
          <a
            className="rounded-full border border-solid border-black/[.08] dark:border-white/[.145] transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:min-w-44"
            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Read our docs
          </a>
        </div>
      </main>
      <footer className="row-start-3 flex gap-6 flex-wrap items-center justify-center">
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/file.svg"
            alt="File icon"
            width={16}
            height={16}
          />
          Learn
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/window.svg"
            alt="Window icon"
            width={16}
            height={16}
          />
          Examples
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/globe.svg"
            alt="Globe icon"
            width={16}
            height={16}
          />
          Go to nextjs.org →
        </a>
      </footer>
    </div>
  );
}

```

// Directory: app, File: providers.tsx
// File Type: tsx
```tsx
// src/app/providers.tsx
'use client';

import { ReactNode } from 'react';
import { AuthProvider } from '@/context/AuthContext';

interface ProvidersProps {
  children: ReactNode;
}

export default function Providers({ children }: ProvidersProps) {
  return (
    <AuthProvider>
      {children}
    </AuthProvider>
  );
}
```

// Directory: app\(auth)\forgot-password, File: page.tsx
// File Type: tsx
```tsx
// src/app/(auth)/forgot-password/page.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { supabaseClient } from '@/lib/supabase';
import { useAuth } from '@/context/AuthContext';

export default function ForgotPasswordPage() {
  const [email, setEmail] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const [emailSent, setEmailSent] = useState(false);
  
  const router = useRouter();
  const { user, isLoading } = useAuth();
  
  // Redirect if already authenticated
  useEffect(() => {
    if (user && !isLoading) {
      router.push('/dashboard');
    }
  }, [user, isLoading, router]);

  const validateEmail = (email: string) => {
    // Basic email validation
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return regex.test(email);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError('');
    
    // Validate email
    if (!validateEmail(email)) {
      setError('Please enter a valid email address');
      setIsSubmitting(false);
      return;
    }

    try {
      // Use Supabase Auth for password reset
      const { error } = await supabaseClient.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/reset-password`,
      });

      if (error) throw error;
      
      // Wait for animation
      await new Promise(resolve => setTimeout(resolve, 600));
      
      // Show success message
      setSuccess(true);
      setEmailSent(true);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred while processing your request');
    } finally {
      setIsSubmitting(false);
    }
  };

  // If still checking auth status, show loading
  if (isLoading) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="flex min-h-screen items-center justify-center py-12 px-4 sm:px-6 lg:px-8 bg-gray-50 dark:bg-gray-900">
      <div className="w-full max-w-md space-y-8">
        <div>
          <div className="flex justify-center">
            <h1 className="text-3xl font-bold text-blue-600 dark:text-blue-400">Roomies</h1>
          </div>
          <h2 className="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900 dark:text-white">
            Reset your password
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
            Enter your email address and we'll send you a link to reset your password
          </p>
        </div>
        
        {error && (
          <div className="rounded-md bg-red-50 dark:bg-red-900 p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium text-red-800 dark:text-red-200">
                  {error}
                </p>
              </div>
            </div>
          </div>
        )}
        
        {emailSent ? (
          <div className="rounded-md bg-green-50 dark:bg-green-900 p-6 text-center">
            <div className="flex flex-col items-center">
              <div className="flex-shrink-0 mb-4">
                <svg className="h-12 w-12 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
              </div>
              <div>
                <h3 className="text-lg font-medium text-green-800 dark:text-green-200">
                  Password reset email sent
                </h3>
                <p className="mt-2 text-sm text-green-700 dark:text-green-300">
                  We've sent an email to <span className="font-medium">{email}</span> with instructions to reset your password.
                </p>
                <p className="mt-4 text-sm text-green-700 dark:text-green-300">
                  Please check your inbox and follow the link in the email.
                </p>
                <p className="mt-4 text-sm text-gray-500 dark:text-gray-400">
                  Didn't receive an email? Check your spam folder or{' '}
                  <button 
                    onClick={() => setEmailSent(false)}
                    className="text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300 font-medium"
                  >
                    try again
                  </button>
                </p>
              </div>
            </div>
          </div>
        ) : (
          <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
            <div className="rounded-md shadow-sm">
              <div>
                <label htmlFor="email-address" className="sr-only">
                  Email address
                </label>
                <input
                  id="email-address"
                  name="email"
                  type="email"
                  autoComplete="email"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="relative block w-full rounded-md border-0 py-3 text-gray-900 dark:text-white ring-1 ring-inset ring-gray-300 dark:ring-gray-700 dark:bg-gray-800 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6 px-4"
                  placeholder="Email address"
                />
              </div>
            </div>

            <div>
              <button
                type="submit"
                disabled={isSubmitting}
                className="group relative flex w-full justify-center rounded-md bg-blue-600 py-3 px-3 text-sm font-semibold text-white hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isSubmitting ? (
                  <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                    <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                  </span>
                ) : (
                  <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                    <svg className="h-5 w-5 text-blue-500 group-hover:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
                    </svg>
                  </span>
                )}
                {isSubmitting ? 'Sending...' : 'Send reset instructions'}
              </button>
            </div>
            
            <div className="flex items-center justify-center">
              <div className="text-sm">
                <Link href="/login" className="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
                  Back to Login
                </Link>
              </div>
            </div>
          </form>
        )}
      </div>
    </div>
  );
}
```

// Directory: app\(auth)\login, File: page.tsx
// File Type: tsx
```tsx
// src/app/(auth)/login/page.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { supabaseClient } from '@/lib/supabase';
import { useAuth } from '@/context/AuthContext';

export default function LoginPage() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [authChecking, setAuthChecking] = useState(true);
  
  const router = useRouter();
  const searchParams = useSearchParams();
  const callbackUrl = searchParams.get('callbackUrl') || '/dashboard';
  
  // Check if user just registered
  const justRegistered = searchParams.get('registered') === 'true';
  
  const { user, isLoading } = useAuth();
  
  // Check authentication status on mount
  useEffect(() => {
    if (user && !isLoading) {
      // User is already logged in, redirect to dashboard
      router.push(callbackUrl);
    } else if (!isLoading) {
      // User is not logged in, allow them to see the login page
      setAuthChecking(false);
    }
  }, [user, isLoading, router, callbackUrl]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const { error } = await supabaseClient.auth.signInWithPassword({
        email,
        password
      });

      if (error) {
        setError('Invalid email or password');
        setLoading(false);
        return;
      }

      // Success, redirect to dashboard or callback URL
      router.push(callbackUrl);
    } catch (err) {
      setError('An unexpected error occurred');
      setLoading(false);
    }
  };

  // If still checking auth status, show loading
  if (authChecking || isLoading) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="flex min-h-screen items-center justify-center py-12 px-4 sm:px-6 lg:px-8 bg-gray-50 dark:bg-gray-900">
      <div className="w-full max-w-md space-y-8">
        <div>
          <div className="flex justify-center">
            <h1 className="text-3xl font-bold text-blue-600 dark:text-blue-400">Roomies</h1>
          </div>
          <h2 className="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900 dark:text-white">
            Sign in to your account
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
            Or{' '}
            <Link href="/register" className="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
              create a new account
            </Link>
          </p>
        </div>
        
        {justRegistered && (
          <div className="rounded-md bg-green-50 dark:bg-green-900 p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium text-green-800 dark:text-green-200">
                  Your account was created successfully! Please sign in.
                </p>
              </div>
            </div>
          </div>
        )}
        
        {error && (
          <div className="rounded-md bg-red-50 dark:bg-red-900 p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium text-red-800 dark:text-red-200">
                  {error}
                </p>
              </div>
            </div>
          </div>
        )}
        
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="-space-y-px rounded-md shadow-sm">
            <div>
              <label htmlFor="email-address" className="sr-only">
                Email address
              </label>
              <input
                id="email-address"
                name="email"
                type="email"
                autoComplete="email"
                required
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="relative block w-full rounded-t-md border-0 py-3 text-gray-900 dark:text-white ring-1 ring-inset ring-gray-300 dark:ring-gray-700 dark:bg-gray-800 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6 px-4"
                placeholder="Email address"
              />
            </div>
            <div>
              <label htmlFor="password" className="sr-only">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                autoComplete="current-password"
                required
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="relative block w-full rounded-b-md border-0 py-3 text-gray-900 dark:text-white ring-1 ring-inset ring-gray-300 dark:ring-gray-700 dark:bg-gray-800 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6 px-4"
                placeholder="Password"
              />
            </div>
          </div>

          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <input
                id="remember-me"
                name="remember-me"
                type="checkbox"
                className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700"
              />
              <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900 dark:text-gray-300">
                Remember me
              </label>
            </div>

            <div className="text-sm">
              <Link href="/forgot-password" className="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
                Forgot your password?
              </Link>
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={loading}
              className="group relative flex w-full justify-center rounded-md bg-blue-600 py-3 px-3 text-sm font-semibold text-white hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? (
                <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                  <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                </span>
              ) : (
                <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                  <svg className="h-5 w-5 text-blue-500 group-hover:text-blue-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fillRule="evenodd" d="M10 1a4.5 4.5 0 00-4.5 4.5V9H5a2 2 0 00-2 2v6a2 2 0 002 2h10a2 2 0 002-2v-6a2 2 0 00-2-2h-.5V5.5A4.5 4.5 0 0010 1zm3 8V5.5a3 3 0 10-6 0V9h6z" clipRule="evenodd" />
                  </svg>
                </span>
              )}
              {loading ? 'Signing in...' : 'Sign in'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
```

// Directory: app\(auth)\register, File: page.tsx
// File Type: tsx
```tsx
// src/app/(auth)/register/page.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { supabaseClient } from '@/lib/supabase';

export default function RegisterPage() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [loading, setLoading] = useState(false);
  const [authChecking, setAuthChecking] = useState(true);
  
  const router = useRouter();
  
  // Check authentication status on mount
  useEffect(() => {
    const checkAuth = async () => {
      const { data: { session } } = await supabaseClient.auth.getSession();
      
      if (session) {
        // User is already logged in, redirect to dashboard
        router.push('/dashboard');
      } else {
        // User is not logged in, allow them to see the register page
        setAuthChecking(false);
      }
    };
    
    checkAuth();
  }, [router]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');
  
    // Validate input
    if (password !== confirmPassword) {
      setError('Passwords do not match');
      setLoading(false);
      return;
    }

    if (password.length < 8) {
      setError('Password must be at least 8 characters long');
      setLoading(false);
      return;
    }
  
    try {
      // Sign up with Supabase Auth
      const { data, error: signUpError } = await supabaseClient.auth.signUp({
        email,
        password,
        options: {
          data: {
            name
          },
          emailRedirectTo: `${window.location.origin}/auth/callback` // Important for redirect after verification
        }
      });
  
      if (signUpError) throw new Error(signUpError.message);
  
      // Create user record in database if needed
      if (data?.user) {
        try {
          const { error: insertError } = await supabaseClient
            .from('User')
            .insert({
              id: data.user.id,
              email,
              name,
              password: 'MANAGED_BY_SUPABASE_AUTH',
              createdAt: new Date().toISOString(),
              updatedAt: new Date().toISOString()
            });

          if (insertError) {
            console.error('Error creating user record:', insertError);
          }
        } catch (dbError) {
          console.error('Database error:', dbError);
        }
      }
  
      // Check if email confirmation is required
      if (!data.session) {
        // Email confirmation required
        setSuccess(
          'Registration successful! Please check your email to verify your account. You will be redirected to the dashboard after verification.'
        );
        
        // Store email in localStorage to check verification status later
        localStorage.setItem('pendingVerification', email);
      } else {
        // Email confirmation not required (if you disabled it in Supabase)
        router.push('/dashboard');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred during registration');
    } finally {
      setLoading(false);
    }
  };

  // If still checking auth status, show loading
  if (authChecking) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="flex min-h-screen items-center justify-center py-12 px-4 sm:px-6 lg:px-8 bg-gray-50 dark:bg-gray-900">
      <div className="w-full max-w-md space-y-8">
        <div>
          <div className="flex justify-center">
            <h1 className="text-3xl font-bold text-blue-600 dark:text-blue-400">Roomies</h1>
          </div>
          <h2 className="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900 dark:text-white">
            Create a new account
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
            Or{' '}
            <Link href="/login" className="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
              sign in to your existing account
            </Link>
          </p>
        </div>
        
        {error && (
          <div className="rounded-md bg-red-50 dark:bg-red-900 p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium text-red-800 dark:text-red-200">
                  {error}
                </p>
              </div>
            </div>
          </div>
        )}
        
        {success && (
          <div className="rounded-md bg-green-50 dark:bg-green-900 p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium text-green-800 dark:text-green-200">
                  {success}
                </p>
              </div>
            </div>
          </div>
        )}
        
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Full Name
              </label>
              <input
                id="name"
                name="name"
                type="text"
                required
                value={name}
                onChange={(e) => setName(e.target.value)}
                className="relative block w-full rounded-md border-0 py-3 text-gray-900 dark:text-white ring-1 ring-inset ring-gray-300 dark:ring-gray-700 dark:bg-gray-800 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6 px-4 mt-1"
                placeholder="John Doe"
              />
            </div>
            
            <div>
              <label htmlFor="email-address" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Email address
              </label>
              <input
                id="email-address"
                name="email"
                type="email"
                autoComplete="email"
                required
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="relative block w-full rounded-md border-0 py-3 text-gray-900 dark:text-white ring-1 ring-inset ring-gray-300 dark:ring-gray-700 dark:bg-gray-800 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6 px-4 mt-1"
                placeholder="name@example.com"
              />
            </div>
            
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                autoComplete="new-password"
                required
                minLength={8}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="relative block w-full rounded-md border-0 py-3 text-gray-900 dark:text-white ring-1 ring-inset ring-gray-300 dark:ring-gray-700 dark:bg-gray-800 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6 px-4 mt-1"
                placeholder="Create a password"
              />
              <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
                Must be at least 8 characters
              </p>
            </div>
            
            <div>
              <label htmlFor="confirm-password" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Confirm Password
              </label>
              <input
                id="confirm-password"
                name="confirm-password"
                type="password"
                autoComplete="new-password"
                required
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                className="relative block w-full rounded-md border-0 py-3 text-gray-900 dark:text-white ring-1 ring-inset ring-gray-300 dark:ring-gray-700 dark:bg-gray-800 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6 px-4 mt-1"
                placeholder="Confirm your password"
              />
            </div>
          </div>

          <div className="flex items-center">
            <input
              id="agree-terms"
              name="agree-terms"
              type="checkbox"
              required
              className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700"
            />
            <label htmlFor="agree-terms" className="ml-2 block text-sm text-gray-900 dark:text-gray-300">
              I agree to the{' '}
              <Link href="/terms" className="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
                Terms of Service
              </Link>{' '}
              and{' '}
              <Link href="/privacy" className="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
                Privacy Policy
              </Link>
            </label>
          </div>

          <div>
            <button
              type="submit"
              disabled={loading}
              className="group relative flex w-full justify-center rounded-md bg-blue-600 py-3 px-3 text-sm font-semibold text-white hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? (
                <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                  <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                </span>
              ) : (
                <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                  <svg className="h-5 w-5 text-blue-500 group-hover:text-blue-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fillRule="evenodd" d="M10 1a4.5 4.5 0 00-4.5 4.5V9H5a2 2 0 00-2 2v6a2 2 0 002 2h10a2 2 0 002-2v-6a2 2 0 00-2-2h-.5V5.5A4.5 4.5 0 0010 1zm3 8V5.5a3 3 0 10-6 0V9h6z" clipRule="evenodd" />
                  </svg>
                </span>
              )}
              {loading ? 'Creating account...' : 'Create account'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
```

// Directory: app\(auth)\reset-password, File: page.tsx
// File Type: tsx
```tsx
// src/app/(auth)/reset-password/page.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';

export default function ResetPasswordPage() {
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const router = useRouter();
  const searchParams = useSearchParams();
  
  // Check if we have a valid reset token in the URL
  useEffect(() => {
    // The token is automatically handled by Supabase Auth
    // We just need to make sure the user landed here from a reset email
    if (!searchParams.has('token')) {
      setError('Invalid or missing reset token. Please request a new password reset link.');
    }
  }, [searchParams]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError('');
    
    // Validate passwords
    if (password !== confirmPassword) {
      setError('Passwords do not match');
      setIsSubmitting(false);
      return;
    }
    
    if (password.length < 8) {
      setError('Password must be at least 8 characters long');
      setIsSubmitting(false);
      return;
    }

    try {
      const response = await fetch('/api/auth/reset-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ password }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Failed to reset password');
      }

      // Show success message
      setSuccess(true);
      
      // Clear form
      setPassword('');
      setConfirmPassword('');
      
      // Redirect to login after a delay
      setTimeout(() => {
        router.push('/login');
      }, 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred while resetting your password');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="flex min-h-screen items-center justify-center py-12 px-4 sm:px-6 lg:px-8 bg-gray-50 dark:bg-gray-900">
      <div className="w-full max-w-md space-y-8">
        <div>
          <div className="flex justify-center">
            <h1 className="text-3xl font-bold text-blue-600 dark:text-blue-400">Roomies</h1>
          </div>
          <h2 className="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900 dark:text-white">
            Reset your password
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
            Enter your new password below
          </p>
        </div>
        
        {error && (
          <div className="rounded-md bg-red-50 dark:bg-red-900 p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium text-red-800 dark:text-red-200">
                  {error}
                </p>
              </div>
            </div>
          </div>
        )}
        
        {success ? (
          <div className="rounded-md bg-green-50 dark:bg-green-900 p-6 text-center">
            <div className="flex flex-col items-center">
              <div className="flex-shrink-0 mb-4">
                <svg className="h-12 w-12 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
              </div>
              <div>
                <h3 className="text-lg font-medium text-green-800 dark:text-green-200">
                  Password reset successful
                </h3>
                <p className="mt-2 text-sm text-green-700 dark:text-green-300">
                  Your password has been reset successfully.
                </p>
                <p className="mt-4 text-sm text-green-700 dark:text-green-300">
                  You will be redirected to the login page shortly.
                </p>
              </div>
            </div>
          </div>
        ) : (
          <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
            <div className="space-y-4 rounded-md shadow-sm">
              <div>
                <label htmlFor="password" className="sr-only">
                  New Password
                </label>
                <input
                  id="password"
                  name="password"
                  type="password"
                  required
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="relative block w-full rounded-md border-0 py-3 text-gray-900 dark:text-white ring-1 ring-inset ring-gray-300 dark:ring-gray-700 dark:bg-gray-800 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6 px-4"
                  placeholder="New password"
                />
              </div>
              <div>
                <label htmlFor="confirm-password" className="sr-only">
                  Confirm Password
                </label>
                <input
                  id="confirm-password"
                  name="confirmPassword"
                  type="password"
                  required
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  className="relative block w-full rounded-md border-0 py-3 text-gray-900 dark:text-white ring-1 ring-inset ring-gray-300 dark:ring-gray-700 dark:bg-gray-800 placeholder:text-gray-400 focus:z-10 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6 px-4"
                  placeholder="Confirm new password"
                />
              </div>
            </div>

            <div>
              <button
                type="submit"
                disabled={isSubmitting}
                className="group relative flex w-full justify-center rounded-md bg-blue-600 py-3 px-3 text-sm font-semibold text-white hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isSubmitting ? (
                  <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                    <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                  </span>
                ) : (
                  <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                    <svg className="h-5 w-5 text-blue-500 group-hover:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                    </svg>
                  </span>
                )}
                {isSubmitting ? 'Resetting Password...' : 'Reset Password'}
              </button>
            </div>
            
            <div className="flex items-center justify-center">
              <div className="text-sm">
                <Link href="/login" className="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
                  Back to Login
                </Link>
              </div>
            </div>
          </form>
        )}
      </div>
    </div>
  );
}
```

// Directory: app\(dashboard), File: layout.tsx
// File Type: tsx
```tsx
// src/app/(dashboard)/layout.tsx
'use client';

import { useEffect, useState } from 'react';
import { useRouter, usePathname } from 'next/navigation';
import Link from 'next/link';
import Image from 'next/image';
import { supabaseClient } from '@/lib/supabase';

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [invitationCount, setInvitationCount] = useState(0);
  const router = useRouter();
  const pathname = usePathname();
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  useEffect(() => {
    // Check if user is authenticated
    const checkAuth = async () => {
      try {
        const { data: { session } } = await supabaseClient.auth.getSession();
        
        if (!session) {
          // Redirect to login if not authenticated
          router.push('/login');
          return;
        }
        
        // Get user profile data from your database if needed
        // For now, just use the user data from the session
        setUser(session.user);

        // Fetch pending invitations count
        if (session.user.email) {
          const { data, error, count } = await supabaseClient
            .from('Invitation')
            .select('id', { count: 'exact' })
            .eq('email', session.user.email)
            .eq('status', 'PENDING');
          
          if (!error && count !== null) {
            setInvitationCount(count);
          }
        }
      } catch (error) {
        console.error('Authentication error:', error);
        router.push('/login');
      } finally {
        setLoading(false);
      }
    };

    checkAuth();

    // Set up a subscription for real-time invitation updates
    const subscribeToInvitations = async () => {
      const { data: { session } } = await supabaseClient.auth.getSession();
      if (session?.user?.email) {
        const channel = supabaseClient
          .channel('invitations')
          .on(
            'postgres_changes',
            {
              event: '*',
              schema: 'public',
              table: 'Invitation',
              filter: `email=eq.${session.user.email}`
            },
            async () => {
              // Refresh the invitations count when changes occur
              const { count } = await supabaseClient
                .from('Invitation')
                .select('id', { count: 'exact' })
                .eq('email', session.user.email)
                .eq('status', 'PENDING');
              
              if (count !== null) {
                setInvitationCount(count);
              }
            }
          )
          .subscribe();

        return () => {
          supabaseClient.removeChannel(channel);
        };
      }
    };

    subscribeToInvitations();
  }, [router]);

  // Handle sign out
  const handleSignOut = async () => {
    try {
      await supabaseClient.auth.signOut();
      router.push('/login');
    } catch (error) {
      console.error('Error signing out:', error);
    }
  };

  // Show loading state while checking authentication
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  const navigation = [
    { name: 'Dashboard', href: '/dashboard', icon: 'home' },
    { name: 'Expenses', href: '/expenses', icon: 'dollar-sign' },
    { name: 'Tasks', href: '/tasks', icon: 'check-square' },
    { name: 'Chat', href: '/chat', icon: 'message-circle' },
  ];

  const userNavigation = [
    { name: 'Your Profile', href: '/profile' },
    { name: 'Settings', href: '/settings' },
  ];

  const renderIcon = (iconName: string) => {
    switch (iconName) {
      case 'home':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
          </svg>
        );
      case 'dollar-sign':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        );
      case 'check-square':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4" />
          </svg>
        );
      case 'message-circle':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
          </svg>
        );
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
      {/* Mobile menu button */}
      <div className="lg:hidden fixed top-0 left-0 right-0 z-50 bg-white dark:bg-gray-800 shadow-md p-4">
        <div className="flex items-center justify-between">
          <button
            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
            className="text-gray-500 dark:text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 focus:outline-none"
          >
            <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
          <span className="text-xl font-bold text-gray-900 dark:text-white">Roomies</span>
          <div className="relative">
            <button
              className="flex items-center focus:outline-none"
              onClick={() => {/* Toggle user dropdown */}}
            >
              <div className="h-8 w-8 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
                {user?.user_metadata?.avatar_url ? (
                  <Image
                    src={user.user_metadata.avatar_url}
                    alt={user.user_metadata.name || 'User'}
                    width={32}
                    height={32}
                  />
                ) : (
                  <svg className="h-full w-full text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M24 20.993V24H0v-2.996A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z" />
                  </svg>
                )}
              </div>
            </button>
          </div>
        </div>
      </div>

      {/* Mobile menu */}
      {isMobileMenuOpen && (
        <div className="fixed inset-0 z-40 lg:hidden">
          <div className="fixed inset-0 bg-gray-600 bg-opacity-75" onClick={() => setIsMobileMenuOpen(false)}></div>
          <div className="relative flex-1 flex flex-col max-w-xs w-full bg-white dark:bg-gray-800 h-full">
            <div className="pt-5 pb-4 px-4">
              <div className="flex items-center justify-between">
                <div className="text-2xl font-bold text-gray-900 dark:text-white">Roomies</div>
                <button
                  onClick={() => setIsMobileMenuOpen(false)}
                  className="text-gray-500 dark:text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 focus:outline-none"
                >
                  <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              <nav className="mt-8">
                <div className="space-y-1">
                  {navigation.map((item) => (
                    <Link
                      key={item.name}
                      href={item.href}
                      className={`${
                        pathname === item.href
                          ? 'bg-blue-50 dark:bg-blue-900 text-blue-700 dark:text-blue-200'
                          : 'text-gray-600 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'
                      } group flex items-center px-4 py-3 text-base font-medium rounded-md`}
                    >
                      <span className="mr-3">{renderIcon(item.icon)}</span>
                      {item.name}
                    </Link>
                  ))}
                  
                  {/* Invitation Item for Mobile Menu */}
                  <div className="relative">
                    {invitationCount > 0 && (
                      <span className="absolute -top-1 left-3 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                        {invitationCount}
                      </span>
                    )}
                    <Link
                      href="/invitations"
                      className={`${
                        pathname === '/invitations'
                          ? 'bg-blue-50 dark:bg-blue-900 text-blue-700 dark:text-blue-200'
                          : 'text-gray-600 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'
                      } group flex items-center px-4 py-3 text-base font-medium rounded-md`}
                    >
                      <span className="mr-3">
                        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                        </svg>
                      </span>
                      Invitations
                    </Link>
                  </div>
                </div>
              </nav>
            </div>
            <div className="border-t border-gray-200 dark:border-gray-700 p-4 mt-auto">
              <div className="flex items-center">
                <div className="h-10 w-10 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
                  {user?.user_metadata?.avatar_url ? (
                    <Image
                      src={user.user_metadata.avatar_url}
                      alt={user.user_metadata.name || 'User'}
                      width={40}
                      height={40}
                    />
                  ) : (
                    <svg className="h-full w-full text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M24 20.993V24H0v-2.996A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z" />
                    </svg>
                  )}
                </div>
                <div className="ml-3">
                  <p className="text-sm font-medium text-gray-900 dark:text-white">
                    {user?.user_metadata?.name || user?.email}
                  </p>
                  <p className="text-xs text-gray-500 dark:text-gray-400">{user?.email}</p>
                </div>
              </div>
              <div className="mt-4 space-y-2">
                {userNavigation.map((item) => (
                  <Link
                    key={item.name}
                    href={item.href}
                    className="text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white text-sm font-medium block py-2"
                  >
                    {item.name}
                  </Link>
                ))}
                <button
                  onClick={handleSignOut}
                  className="text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 text-sm font-medium block py-2"
                >
                  Sign out
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Desktop sidebar */}
      <div className="hidden lg:flex lg:w-64 lg:flex-col lg:fixed lg:inset-y-0">
        <div className="flex-1 flex flex-col min-h-0 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700">
          <div className="flex-1 flex flex-col pt-5 pb-4 overflow-y-auto">
            <div className="flex items-center justify-center flex-shrink-0 px-4">
              <span className="text-2xl font-bold text-gray-900 dark:text-white">Roomies</span>
            </div>
            <nav className="mt-8 flex-1 px-4 space-y-1">
              {navigation.map((item) => (
                <Link
                  key={item.name}
                  href={item.href}
                  className={`${
                    pathname === item.href
                      ? 'bg-blue-50 dark:bg-blue-900 text-blue-700 dark:text-blue-200'
                      : 'text-gray-600 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'
                  } group flex items-center px-3 py-3 text-sm font-medium rounded-md`}
                >
                  <span className="mr-3 flex-shrink-0">{renderIcon(item.icon)}</span>
                  {item.name}
                </Link>
              ))}
              
              {/* Invitation Item for Desktop Sidebar */}
              <div className="relative">
                {invitationCount > 0 && (
                  <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                    {invitationCount}
                  </span>
                )}
                <Link
                  href="/invitations"
                  className={`${
                    pathname === '/invitations'
                      ? 'bg-blue-50 dark:bg-blue-900 text-blue-700 dark:text-blue-200'
                      : 'text-gray-600 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'
                  } group flex items-center px-3 py-3 text-sm font-medium rounded-md`}
                >
                  <span className="mr-3 flex-shrink-0">
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                    </svg>
                  </span>
                  Invitations
                </Link>
              </div>
            </nav>
          </div>
          <div className="flex-shrink-0 border-t border-gray-200 dark:border-gray-700 p-4">
            <div className="flex items-center">
              <div className="h-10 w-10 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
                {user?.user_metadata?.avatar_url ? (
                  <Image
                    src={user.user_metadata.avatar_url}
                    alt={user.user_metadata.name || 'User'}
                    width={40}
                    height={40}
                  />
                ) : (
                  <svg className="h-full w-full text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M24 20.993V24H0v-2.996A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z" />
                  </svg>
                )}
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium text-gray-900 dark:text-white">
                  {user?.user_metadata?.name || user?.email}
                </p>
                <div className="flex mt-1 space-x-2">
                  {userNavigation.map((item) => (
                    <Link
                      key={item.name}
                      href={item.href}
                      className="text-xs text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"
                    >
                      {item.name}
                    </Link>
                  ))}
                  <button
                    onClick={handleSignOut}
                    className="text-xs text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300"
                  >
                    Sign out
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="lg:pl-64 flex flex-col flex-1">
        <main className="flex-1 pt-16 pb-10 lg:pt-8 px-4 sm:px-6 lg:px-8">
          {children}
        </main>
      </div>
    </div>
  );
}
```

// Directory: app\(dashboard)\chat, File: page.tsx
// File Type: tsx
```tsx
// src/app/(dashboard)/chat/page.tsx
'use client';

import { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import { supabaseClient } from '@/lib/supabase';
import { getHouseholdMessages, sendMessage, subscribeToMessages, markMessageAsRead, Message } from '@/lib/chat';
import { areAllChatTablesReady } from '@/lib/databaseReadiness';
import ChatInput from '@/components/chat/ChatInput';
// Define types for mock data
interface MockMessage {
  id: string;
  senderId: string;
  text: string;
  timestamp: Date;
  read: boolean;
}

interface MockConversation {
  messages: MockMessage[];
  lastRead: Date;
}

type MockConversationsType = {
  [key: string]: MockConversation;
};

interface MockMember {
  id: string;
  name: string;
  avatar: string;
  status: 'ONLINE' | 'AWAY' | 'OFFLINE';
}

// Mock data for fallback when database is not ready
const MOCK_MEMBERS: MockMember[] = [
  {
    id: '1',
    name: 'Jane Smith',
    avatar: 'https://i.pravatar.cc/150?img=1',
    status: 'ONLINE',
  },
  {
    id: '2',
    name: 'John Doe',
    avatar: 'https://i.pravatar.cc/150?img=8',
    status: 'AWAY',
  },
  {
    id: '3',
    name: 'Emily Johnson',
    avatar: 'https://i.pravatar.cc/150?img=5',
    status: 'ONLINE',
  },
  {
    id: '4',
    name: 'Michael Brown',
    avatar: 'https://i.pravatar.cc/150?img=12',
    status: 'OFFLINE',
  },
];

const MOCK_CONVERSATIONS: MockConversationsType = {
  'household': {
    messages: [
      {
        id: '1',
        senderId: '3',
        text: 'Hey everyone, just a reminder that rent is due tomorrow!',
        timestamp: new Date('2024-02-25T14:30:00'),
        read: true,
      },
      {
        id: '2',
        senderId: '2',
        text: 'Thanks for the reminder! I will transfer the money tonight.',
        timestamp: new Date('2024-02-25T14:45:00'),
        read: true,
      },
      {
        id: '3',
        senderId: '1',
        text: 'Already paid mine yesterday!',
        timestamp: new Date('2024-02-25T15:10:00'),
        read: true,
      },
      {
        id: '4',
        senderId: '4',
        text: 'I will be paying tomorrow morning, sorry for the delay.',
        timestamp: new Date('2024-02-25T17:23:00'),
        read: false,
      },
    ],
    lastRead: new Date('2024-02-25T15:10:00'),
  },
  '2': {
    messages: [
      {
        id: '1',
        senderId: '2',
        text: 'Hey Jane, do you know where the vacuum is?',
        timestamp: new Date('2024-02-24T10:15:00'),
        read: true,
      },
      {
        id: '2',
        senderId: '1',
        text: 'I think Emily used it last, check the utility closet!',
        timestamp: new Date('2024-02-24T10:25:00'),
        read: true,
      },
    ],
    lastRead: new Date('2024-02-24T10:45:00'),
  },
  '3': {
    messages: [
      {
        id: '1',
        senderId: '3',
        text: 'Hi Jane, are you coming to the house meeting tonight?',
        timestamp: new Date('2024-02-23T18:30:00'),
        read: true,
      },
      {
        id: '2',
        senderId: '1',
        text: 'Yes, I\'ll be there at 7!',
        timestamp: new Date('2024-02-23T18:35:00'),
        read: true,
      },
    ],
    lastRead: new Date('2024-02-23T18:35:00'),
  },
  '4': {
    messages: [
      {
        id: '1',
        senderId: '4',
        text: 'Jane, can I borrow your blender for a smoothie?',
        timestamp: new Date('2024-02-22T09:15:00'),
        read: true,
      },
      {
        id: '2',
        senderId: '1',
        text: 'Sure, it\'s in the cabinet above the fridge!',
        timestamp: new Date('2024-02-22T09:20:00'),
        read: true,
      },
      {
        id: '3',
        senderId: '4',
        text: 'Thanks! I\'ll clean it after using.',
        timestamp: new Date('2024-02-22T09:22:00'),
        read: true,
      },
    ],
    lastRead: new Date('2024-02-22T09:25:00'),
  },
};

// Function to generate a UUID
function generateUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

// Main component
export default function ChatPage() {
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [activeConversation, setActiveConversation] = useState<string>('household');
  const [messages, setMessages] = useState<any[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isSending, setIsSending] = useState(false);
  const [isDatabaseReady, setIsDatabaseReady] = useState(false);
  const [householdId, setHouseholdId] = useState<string>('');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const router = useRouter();
  
// Check authentication
useEffect(() => {
  const checkAuth = async () => {
    try {
      console.log('Checking authentication status...');
      const { data: { session } } = await supabaseClient.auth.getSession();
      
      if (!session) {
        console.log('No session found, redirecting to login');
        router.push('/login');
        return;
      }
      
      console.log('User authenticated:', session.user.id);
      setUser(session.user);

      // Step 1: Check if the user exists in the User table by ID
      console.log('Checking if user exists in User table by ID');
      const { data: userDataById, error: userIdError } = await supabaseClient
        .from('User')
        .select('id, email')
        .eq('id', session.user.id)
        .single();
      
      // Step 2: If user doesn't exist by ID, check if exists by email
      if (userIdError) {
        console.log('User not found by ID, checking by email...', userIdError);
        
        // Check if user exists with the same email
        const { data: userDataByEmail, error: emailError } = await supabaseClient
          .from('User')
          .select('id, email')
          .eq('email', session.user.email)
          .maybeSingle();
        
        if (!emailError && userDataByEmail) {
          // User exists with this email but different ID - update the ID
          console.log('Found user with same email but different ID. Updating ID...');
          
          const { error: updateError } = await supabaseClient
            .from('User')
            .update({ id: session.user.id })
            .eq('email', session.user.email);
          
          if (updateError) {
            console.error('Error updating user ID:', updateError);
            // Continue anyway - we'll try to work with what we have
          } else {
            console.log('Successfully updated user ID');
          }
        } else {
          // User doesn't exist at all - create them
          console.log('User not found by email either, creating new user...');
          
          try {
            // Create a user record
            const { data: newUser, error: createUserError } = await supabaseClient
              .from('User')
              .insert([
                {
                  id: session.user.id,
                  email: session.user.email,
                  name: session.user.user_metadata?.name || session.user.email?.split('@')[0] || 'User',
                  password: 'MANAGED_BY_SUPABASE_AUTH',
                  createdAt: new Date().toISOString(),
                  updatedAt: new Date().toISOString()
                }
              ])
              .select('id')
              .single();
            
            if (createUserError) {
              // Handle the case where we couldn't create a user (could be duplicate key, etc)
              console.error('Error creating user record:', createUserError);
              
              // If it's a duplicate key error, try one more time with a modified email
              if (createUserError.code === '23505' && createUserError.details?.includes('User_email_key')) {
                console.log('Attempting to create user with modified email to avoid unique constraint...');
                
                const randomSuffix = Math.floor(Math.random() * 10000);
                const modifiedEmail = `${session.user.email?.split('@')[0]}_${randomSuffix}@${session.user.email?.split('@')[1]}`;
                
                const { data: newUserRetry, error: retryError } = await supabaseClient
                  .from('User')
                  .insert([
                    {
                      id: session.user.id,
                      email: modifiedEmail, // Use modified email to avoid unique constraint
                      name: session.user.user_metadata?.name || session.user.email?.split('@')[0] || 'User',
                      password: 'MANAGED_BY_SUPABASE_AUTH',
                      createdAt: new Date().toISOString(),
                      updatedAt: new Date().toISOString()
                    }
                  ])
                  .select('id')
                  .single();
                
                if (retryError) {
                  console.error('Final error creating user record:', retryError);
                } else {
                  console.log('Created user record with modified email:', newUserRetry.id);
                }
              }
            } else {
              console.log('Created user record:', newUser.id);
            }
          } catch (err) {
            console.error('Unexpected error creating user:', err);
          }
        }
      } else {
        console.log('User found in database:', userDataById.id);
      }

      // Step 3: Check if database tables are ready
      console.log('Checking database readiness...');
      const dbStatus = await areAllChatTablesReady();
      console.log('Database readiness check result:', dbStatus);
      setIsDatabaseReady(dbStatus.ready);
      
      // Step 4: Get user's household
      console.log('Fetching user household data...');
      const { data: householdUser, error: householdError } = await supabaseClient
        .from('HouseholdUser')
        .select('householdId')
        .eq('userId', session.user.id)
        .order('joinedAt', { ascending: false })
        .limit(1)
        .single();
      
      if (!householdError && householdUser) {
        console.log('Found household ID:', householdUser.householdId);
        setHouseholdId(householdUser.householdId);
      } else {
        console.log('User has no households or error fetching household:', householdError?.message);
        console.log('Error details:', householdError);
        
        // Step 5: Create a new household if the user doesn't have one
        try {
          console.log('Creating test household for user:', session.user.id);
          
          // Generate a UUID for the new household
          const householdUUID = generateUUID();
          console.log('Generated UUID for new household:', householdUUID);
          
          // 1. Create a new household with explicit UUID
          const { data: newHousehold, error: createError } = await supabaseClient
            .from('Household')
            .insert([
              {
                id: householdUUID,
                name: 'Test Household',
                address: 'Test Address',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
              }
            ])
            .select('id')
            .single();
          
          if (createError || !newHousehold) {
            console.error('Error creating test household:', createError);
          } else {
            console.log('Created new household:', newHousehold.id);
            
            // 2. Associate the user with the new household
            const householdUserUUID = generateUUID(); // Generate a UUID for the HouseholdUser
            const { data: newMembership, error: memberError } = await supabaseClient
              .from('HouseholdUser')
              .insert([
                {
                  id: householdUserUUID,
                  userId: session.user.id,
                  householdId: newHousehold.id,
                  role: 'ADMIN',
                  joinedAt: new Date().toISOString()
                }
              ])
              .select()
              .single();
            
            if (memberError) {
              console.error('Error creating household membership:', memberError);
            } else {
              console.log('Created household membership:', newMembership.id);
              setHouseholdId(newHousehold.id);
            }
          }
        } catch (err) {
          console.error('Error in household creation process:', err);
        }
      }
      
      console.log('Initialization complete: isDatabaseReady =', dbStatus.ready, 'householdId =', householdId || '(pending)');
      setLoading(false);
    } catch (error) {
      console.error('Authentication error:', error);
      router.push('/login');
    }
  };

  checkAuth();
}, [router]);

// In the useEffect where you load messages
useEffect(() => {
  if (!user) return;
  
  const loadMessages = async () => {
    console.log('Loading messages with:', {
      isDatabaseReady,
      activeConversation,
      householdId,
      useRealDb: isDatabaseReady && activeConversation === 'household' && householdId
    });
    
    if (isDatabaseReady && activeConversation === 'household' && householdId) {
      console.log('Loading messages for household:', householdId);
      // Use real database data
      try {
        const messageData = await getHouseholdMessages(householdId);
        console.log('Messages loaded from database:', messageData.length);
        setMessages(messageData);
        
        // Mark messages as read
        messageData.forEach((msg: { senderId: any; id: any; }) => {
          if (msg.senderId !== user.id) {
            markMessageAsRead(msg.id, user.id);
          }
        });
      } catch (error) {
        console.error('Error loading messages:', error);
        // Fallback to mock data if there's an error
        console.log('Falling back to mock data due to error');
        if (activeConversation in MOCK_CONVERSATIONS) {
          setMessages(MOCK_CONVERSATIONS[activeConversation].messages);
        } else {
          setMessages([]);
        }
      }
    } else {
      console.log('Using mock data. Database ready:', isDatabaseReady, 'Conversation:', activeConversation, 'HouseholdId:', householdId);
      // Use mock data until database is ready
      if (activeConversation in MOCK_CONVERSATIONS) {
        setMessages(MOCK_CONVERSATIONS[activeConversation].messages);
      } else {
        setMessages([]);
      }
    }
  };
  
  loadMessages();
  
  // Subscribe to new messages if database is ready
  if (isDatabaseReady && activeConversation === 'household' && householdId) {
    console.log('Subscribing to messages for household:', householdId);
    const unsubscribe = subscribeToMessages(householdId, (newMessage: Message) => {
      console.log('New message received:', newMessage);
      setMessages(prevMessages => {
        // Check if message already exists (to prevent duplicates)
        const exists = prevMessages.some(msg => msg.id === newMessage.id);
        if (exists) return prevMessages;
        
        // Mark the message as read if it's not from the current user
        if (newMessage.senderId !== user.id) {
          markMessageAsRead(newMessage.id, user.id);
        }
        
        return [...prevMessages, newMessage];
      });
    });
    
    return unsubscribe;
  }
}, [activeConversation, user, isDatabaseReady, householdId]);
  
  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);
  
  const handleSendMessage = async (content: string) => {
    console.log("Attempting to send message:", { 
      content, 
      userId: user?.id, 
      isDatabaseReady, 
      activeConversation, 
      householdId 
    });
    
    if (!content.trim() || !user) return;
    
    setIsSending(true);
    
    try {
      // Always ensure activeConversation is set to 'household' for database messages
      // This fixes the issue where activeConversation might be set to '3' in the logs
      if (isDatabaseReady && householdId) {
        console.log('Sending real message to database for household:', householdId);
        // Use real database
        const result = await sendMessage(householdId, user.id, content);
        console.log('Message send result:', result);
      } else {
        console.log('Using mock data approach for message. Reason:', 
          !isDatabaseReady ? 'Database not ready' : 
          !householdId ? 'No household ID' : 
          `Conversation is ${activeConversation}, not 'household'`
        );
        // Use mock data approach
        const message = {
          id: `new-${Date.now()}`,
          senderId: user.id || '1',
          text: content,
          timestamp: new Date(),
          read: false,
        };
        
        setMessages(prev => [...prev, message]);
      }
    } catch (error) {
      console.error('Error sending message:', error);
    } finally {
      setNewMessage('');
      setIsSending(false);
    }
  };
  
  // Format timestamp for messages
  const formatTimestamp = (timestamp: Date | string) => {
    const now = new Date();
    const messageDate = new Date(timestamp);
    
    // If the message is from today, show the time
    if (messageDate.toDateString() === now.toDateString()) {
      return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }
    
    // If the message is from this week, show the day and time
    const diffDays = Math.floor((now.getTime() - messageDate.getTime()) / (1000 * 60 * 60 * 24));
    if (diffDays < 7) {
      return `${messageDate.toLocaleDateString([], { weekday: 'short' })} ${messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
    }
    
    // Otherwise, show the full date
    return messageDate.toLocaleDateString();
  };
  
  // Helper function to handle conversation selection and always use household for real database
  const handleConversationSelect = (conversationId: string) => {
    setActiveConversation(conversationId);
    setIsMobileMenuOpen(false);
    
    // Log current state for debugging
    console.log('Selected conversation:', conversationId, 
      'isDatabaseReady:', isDatabaseReady, 
      'householdId:', householdId
    );
  };
  
  // If still checking auth status, show loading
  if (loading) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // Display current state in UI for debugging
  const debugInfo = {
    isDatabaseReady,
    householdId,
    activeConversation,
    userId: user?.id,
  };

  return (
    <div className="flex h-[calc(100vh-theme(spacing.16))] md:h-[calc(100vh-theme(spacing.8))] overflow-hidden bg-gray-50 dark:bg-gray-900">
      {/* Debug info (only visible during development) */}
      {process.env.NODE_ENV === 'development' && (
        <div className="fixed top-0 right-0 bg-black bg-opacity-70 text-white p-2 text-xs z-50">
          <pre>{JSON.stringify(debugInfo, null, 2)}</pre>
        </div>
      )}
      
      {/* Mobile sidebar button */}
      <div className="md:hidden fixed top-16 left-4 z-30">
        <button
          onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
          className="mt-4 bg-white dark:bg-gray-800 p-2 rounded-md shadow-md"
        >
          <svg 
            className="h-6 w-6 text-gray-500 dark:text-gray-400" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24" 
            xmlns="http://www.w3.org/2000/svg"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M4 6h16M4 12h16m-7 6h7" 
            />
          </svg>
        </button>
      </div>
      
      {/* Chat list sidebar */}
      <div className={`
        ${isMobileMenuOpen ? 'translate-x-0' : '-translate-x-full'} 
        md:translate-x-0 transform transition-transform duration-300 ease-in-out
        fixed md:static top-0 bottom-0 left-0 z-20 w-64 bg-white dark:bg-gray-800 shadow-md md:h-full
        flex flex-col pt-16 md:pt-0
      `}>
        <div className="p-4 border-b border-gray-200 dark:border-gray-700">
          <h2 className="font-bold text-lg text-gray-800 dark:text-white">Messages</h2>
        </div>
        
        <div className="flex-1 overflow-y-auto">
          <div className="p-2">
            <button
              onClick={() => handleConversationSelect('household')}
              className={`
                w-full flex items-center p-3 rounded-lg mb-1 
                ${activeConversation === 'household' 
                  ? 'bg-blue-50 dark:bg-blue-900/30' 
                  : 'hover:bg-gray-100 dark:hover:bg-gray-700'}
              `}
            >
              <div className="relative flex-shrink-0 mr-3">
                <div className="h-10 w-10 bg-blue-100 dark:bg-blue-800 rounded-full flex items-center justify-center">
                  <svg 
                    className="h-6 w-6 text-blue-600 dark:text-blue-400" 
                    fill="none" 
                    stroke="currentColor" 
                    viewBox="0 0 24 24" 
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path 
                      strokeLinecap="round" 
                      strokeLinejoin="round" 
                      strokeWidth={2} 
                      d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" 
                    />
                  </svg>
                </div>
              </div>
              <div className="flex-1 min-w-0">
                <p className="text-sm font-medium text-gray-900 dark:text-white truncate">
                  Household Chat
                </p>
                <p className="text-xs text-gray-500 dark:text-gray-400 truncate">
                  Everyone
                </p>
              </div>
            </button>
            
            {/* For MVP, we'll just focus on the household chat */}
            {/* Later we can implement private messages between users */}
            {isDatabaseReady ? (
              <div className="mt-4 px-3">
                <p className="text-xs text-gray-500 dark:text-gray-400">
                  Private messages will be available in a future update.
                </p>
              </div>
            ) : (
              <>
                <div className="mt-4 mb-2 px-3">
                  <h3 className="text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                    Private Messages
                  </h3>
                </div>
                
                {MOCK_MEMBERS.filter(m => m.id !== (user?.id || '1')).map(member => (
                  <button
                    key={member.id}
                    onClick={() => handleConversationSelect(member.id)}
                    className={`
                      w-full flex items-center p-3 rounded-lg mb-1 
                      ${activeConversation === member.id 
                        ? 'bg-blue-50 dark:bg-blue-900/30' 
                        : 'hover:bg-gray-100 dark:hover:bg-gray-700'}
                    `}
                  >
                    <div className="relative flex-shrink-0 mr-3">
                      <Image
                        className="h-10 w-10 rounded-full"
                        src={member.avatar}
                        alt={member.name}
                        width={40}
                        height={40}
                      />
                      <div 
                        className={`absolute bottom-0 right-0 h-3 w-3 rounded-full border-2 border-white dark:border-gray-800 ${
                          member.status === 'ONLINE' ? 'bg-green-500' :
                          member.status === 'AWAY' ? 'bg-yellow-500' : 'bg-gray-500'
                        }`}
                      />
                    </div>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900 dark:text-white truncate">
                        {member.name}
                      </p>
                      <p className="text-xs text-gray-500 dark:text-gray-400 truncate">
                        {member.status === 'ONLINE' ? 'Online' : member.status === 'AWAY' ? 'Away' : 'Offline'}
                      </p>
                    </div>
                  </button>
                ))}
              </>
            )}
          </div>
        </div>
      </div>
      
      {/* Main chat area */}
      <div className="flex-1 flex flex-col bg-white dark:bg-gray-800 md:ml-0 ml-0 relative h-full md:border-l border-gray-200 dark:border-gray-700">
        <div className="border-b border-gray-200 dark:border-gray-700 p-4 flex items-center">
          {activeConversation === 'household' ? (
            <>
              <div className="h-10 w-10 bg-blue-100 dark:bg-blue-800 rounded-full flex items-center justify-center mr-3">
                <svg 
                  className="h-6 w-6 text-blue-600 dark:text-blue-400" 
                  fill="none" 
                  stroke="currentColor" 
                  viewBox="0 0 24 24" 
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path 
                    strokeLinecap="round" 
                    strokeLinejoin="round" 
                    strokeWidth={2} 
                    d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" 
                  />
                </svg>
              </div>
              <div>
                <h2 className="text-lg font-medium text-gray-800 dark:text-white">Household Chat</h2>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  {isDatabaseReady ? 'Connected to database' : 'Using mock data'}
                </p>
              </div>
            </>
          ) : (
            <>
              {MOCK_MEMBERS.filter(m => m.id === activeConversation).map(member => (
                <div key={member.id} className="flex items-center">
                  <div className="relative mr-3">
                    <Image
                      className="h-10 w-10 rounded-full"
                      src={member.avatar}
                      alt={member.name}
                      width={40}
                      height={40}
                    />
                    <div 
                      className={`absolute bottom-0 right-0 h-3 w-3 rounded-full border-2 border-white dark:border-gray-800 ${
                        member.status === 'ONLINE' ? 'bg-green-500' :
                        member.status === 'AWAY' ? 'bg-yellow-500' : 'bg-gray-500'
                      }`}
                    />
                  </div>
                  <div>
                    <h2 className="text-lg font-medium text-gray-800 dark:text-white">{member.name}</h2>
                    <p className="text-sm text-gray-500 dark:text-gray-400">
                      {member.status === 'ONLINE' ? 'Online' : member.status === 'AWAY' ? 'Away' : 'Offline'}
                    </p>
                  </div>
                </div>
              ))}
            </>
          )}
        </div>
        
        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.length > 0 ? (
            messages.map((message, index) => {
              const isCurrentUser = message.senderId === user.id;
              let sender;
              
              if (isDatabaseReady) {
                sender = message.sender || { 
                  name: isCurrentUser ? 'You' : 'Unknown', 
                  avatar: null 
                };
              } else {
                sender = MOCK_MEMBERS.find(m => m.id === message.senderId) || 
                  { name: 'Unknown', avatar: 'https://i.pravatar.cc/150' };
              }
              
              const showSender = 
                activeConversation === 'household' && 
                (index === 0 || messages[index - 1].senderId !== message.senderId);
              
              return (
                <div 
                  key={message.id} 
                  className={`flex ${isCurrentUser ? 'justify-end' : 'justify-start'}`}
                >
                  <div className={`max-w-3/4 ${isCurrentUser ? 'order-1' : 'order-2'}`}>
                    {showSender && !isCurrentUser && activeConversation === 'household' && (
                      <div className="flex items-center mb-1">
                        {sender.avatar ? (
                          <Image
                            className="h-6 w-6 rounded-full mr-2"
                            src={sender.avatar}
                            alt={sender.name}
                            width={24}
                            height={24}
                          />
                        ) : (
                          <div className="h-6 w-6 rounded-full bg-gray-300 dark:bg-gray-600 mr-2 flex items-center justify-center text-xs">
                            {sender.name.charAt(0).toUpperCase()}
                          </div>
                        )}
                        <span className="text-xs font-medium text-gray-700 dark:text-gray-300">
                          {sender.name}
                        </span>
                      </div>
                    )}
                    
                    <div
                      className={`rounded-lg px-4 py-2 break-words ${
                        isCurrentUser 
                          ? 'bg-blue-500 text-white rounded-tr-none' 
                          : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-tl-none'
                      }`}
                    >
                      <p>{message.content || message.text}</p>
                    </div>
                    
                    <div 
                      className={`text-xs text-gray-500 dark:text-gray-400 mt-1 ${
                        isCurrentUser ? 'text-right' : 'text-left'
                      }`}
                    >
                      {formatTimestamp(message.createdAt || message.timestamp)}
                    </div>
                  </div>
                  
                  {showSender && isCurrentUser && activeConversation === 'household' && (
                    <div className="order-2 ml-2">
                      {sender.avatar ? (
                        <Image
                          className="h-6 w-6 rounded-full"
                          src={sender.avatar}
                          alt={sender.name}
                          width={24}
                          height={24}
                        />
                      ) : (
                        <div className="h-6 w-6 rounded-full bg-gray-300 dark:bg-gray-600 flex items-center justify-center text-xs">
                          {sender.name.charAt(0).toUpperCase()}
                        </div>
                      )}
                    </div>
                  )}
                </div>
              );
            })
          ) : (
            <div className="flex items-center justify-center h-full">
              <p className="text-gray-500 dark:text-gray-400">No messages yet. Start the conversation!</p>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>
        
        <div className="border-t border-gray-200 dark:border-gray-700 p-4">
          <form onSubmit={(e) => {
            e.preventDefault();
            handleSendMessage(newMessage);
            setNewMessage('');
          }} className="flex items-center">
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder="Type your message..."
              disabled={isSending || (!householdId && isDatabaseReady)}
              className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white disabled:opacity-50 disabled:cursor-not-allowed"
            />
            <button
              type="submit"
              disabled={!newMessage.trim() || isSending || (!householdId && isDatabaseReady)}
              className="bg-blue-500 text-white px-4 py-2 rounded-r-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSending ? (
                <svg 
                  className="animate-spin h-5 w-5 text-white" 
                  xmlns="http://www.w3.org/2000/svg" 
                  fill="none" 
                  viewBox="0 0 24 24"
                >
                  <circle 
                    className="opacity-25" 
                    cx="12" 
                    cy="12" 
                    r="10" 
                    stroke="currentColor"
                    strokeWidth="4"
               ></circle>
               <path 
                 className="opacity-75" 
                 fill="currentColor" 
                 d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
               ></path>
             </svg>
           ) : (
             <svg 
               className="h-5 w-5"
               fill="none" 
               stroke="currentColor" 
               viewBox="0 0 24 24" 
               xmlns="http://www.w3.org/2000/svg"
             >
               <path 
                 strokeLinecap="round" 
                 strokeLinejoin="round" 
                 strokeWidth={2} 
                 d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" 
               />
             </svg>
           )}
         </button>
       </form>
     </div>
   </div>
 </div>
);
}
```

// Directory: app\(dashboard)\dashboard, File: page.tsx
// File Type: tsx
```tsx
// src/app/(dashboard)/dashboard/page.tsx
'use client';

import { useState, useEffect } from 'react';
import { useSearchParams } from 'next/navigation';
import HouseholdInfo from '@/components/dashboard/HouseholdInfo';
import MemberGrid from '@/components/dashboard/MemberGrid';
import PendingInvitationsPanel from '@/components/dashboard/PendingInvitationsPanel';
import Link from 'next/link';
import InviteModal from '@/components/invitations/InviteModal';
import { supabaseClient } from '@/lib/supabase';

// Mock data for demonstration
const MOCK_HOUSEHOLD = {
  name: '123 College Avenue',
  address: '123 College Avenue, Berkeley, CA 94704',
  moveInDate: 'August 15, 2023',
  memberCount: 4,
  pendingExpenses: 3,
  upcomingTasks: 5,
  unreadMessages: 2,
};

const MOCK_MEMBERS = [
  {
    id: '1',
    name: 'Jane Smith',
    avatar: 'https://i.pravatar.cc/150?img=1',
    role: 'ADMIN' as const,
    status: 'ONLINE' as const,
    joinedAt: '2023-08-15T00:00:00.000Z',
    owes: 0,
    isOwed: 120.50,
    tasksCompleted: 8,
    tasksPending: 2,
  },
  {
    id: '2',
    name: 'John Doe',
    avatar: 'https://i.pravatar.cc/150?img=8',
    role: 'MEMBER' as const,
    status: 'AWAY' as const,
    joinedAt: '2023-08-15T00:00:00.000Z',
    owes: 75.25,
    isOwed: 0,
    tasksCompleted: 5,
    tasksPending: 1,
  },
  {
    id: '3',
    name: 'Emily Johnson',
    avatar: 'https://i.pravatar.cc/150?img=5',
    role: 'MEMBER' as const,
    status: 'ONLINE' as const,
    joinedAt: '2023-08-15T00:00:00.000Z',
    owes: 45.00,
    isOwed: 30.75,
    tasksCompleted: 7,
    tasksPending: 0,
  },
  {
    id: '4',
    name: 'Michael Brown',
    avatar: 'https://i.pravatar.cc/150?img=12',
    role: 'MEMBER' as const,
    status: 'OFFLINE' as const,
    joinedAt: '2023-09-01T00:00:00.000Z',
    owes: 0,
    isOwed: 0,
    tasksCompleted: 3,
    tasksPending: 2,
  },
];

export default function DashboardPage() {
  const [showInviteModal, setShowInviteModal] = useState(false);
  const [inviteEmail, setInviteEmail] = useState('');
  const [inviteRole, setInviteRole] = useState('MEMBER');
  const [inviteMessage, setInviteMessage] = useState('');
  const [showWelcomeMessage, setShowWelcomeMessage] = useState(false);
  const [currentHouseholdId, setCurrentHouseholdId] = useState('');

// Add this useEffect immediately after the useState declarations
useEffect(() => {
  const fetchUserHousehold = async () => {
    try {
      const { data: { session } } = await supabaseClient.auth.getSession();
      
      if (session) {
        // Get the user's primary household
        const { data: householdUser, error } = await supabaseClient
          .from('HouseholdUser')
          .select('householdId')
          .eq('userId', session.user.id)
          .order('joinedAt', { ascending: false })
          .limit(1)
          .single();
        
        if (!error && householdUser) {
          setCurrentHouseholdId(householdUser.householdId);
        }
      }
    } catch (error) {
      console.error('Error fetching household:', error);
    }
  };

  fetchUserHousehold();
}, []);
  
  const searchParams = useSearchParams();
  
  // Check if user just verified their account
  useEffect(() => {
    if (searchParams.get('verified') === 'true') {
      setShowWelcomeMessage(true);
      
      // Auto-hide the welcome message after 8 seconds
      const timer = setTimeout(() => {
        setShowWelcomeMessage(false);
      }, 8000);
      
      return () => clearTimeout(timer);
    }
  }, [searchParams]);

  // In a real app, you would fetch this data from your API
  // For now, we'll use mock data

  const handleInviteSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Here you would send the invitation to your API
    console.log('Inviting:', { email: inviteEmail, role: inviteRole, message: inviteMessage });
    // Close the modal and reset form
    setShowInviteModal(false);
    setInviteEmail('');
    setInviteRole('MEMBER');
    setInviteMessage('');
  };

  return (
    <div>
      {/* Verification Welcome Message */}
      {showWelcomeMessage && (
        <div className="mb-6 p-4 bg-green-50 dark:bg-green-900 rounded-lg border border-green-200 dark:border-green-800 shadow-md">
          <div className="flex items-start">
            <div className="flex-shrink-0">
              <svg className="h-6 w-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div className="ml-3">
              <h3 className="text-lg font-medium text-green-800 dark:text-green-200">
                Welcome to Roomies!
              </h3>
              <div className="mt-2 text-sm text-green-700 dark:text-green-300">
                <p>Your account has been successfully verified. You can now enjoy all the features of our app.</p>
              </div>
              <div className="mt-4">
                <div className="-mx-2 -my-1.5 flex">
                  <button
                    type="button"
                    onClick={() => setShowWelcomeMessage(false)}
                    className="ml-auto bg-green-50 dark:bg-green-900 px-2 py-1.5 rounded-md text-sm font-medium text-green-800 dark:text-green-200 hover:bg-green-100 dark:hover:bg-green-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                  >
                    Dismiss
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Pending Invitations Panel */}
      <div className="mb-6">
        <PendingInvitationsPanel />
      </div>

      <div className="flex flex-col lg:flex-row gap-6">
        <div className="w-full lg:w-2/3">
          <HouseholdInfo
            name={MOCK_HOUSEHOLD.name}
            address={MOCK_HOUSEHOLD.address}
            moveInDate={MOCK_HOUSEHOLD.moveInDate}
            memberCount={MOCK_HOUSEHOLD.memberCount}
            pendingExpenses={MOCK_HOUSEHOLD.pendingExpenses}
            upcomingTasks={MOCK_HOUSEHOLD.upcomingTasks}
            unreadMessages={MOCK_HOUSEHOLD.unreadMessages}
          />
          
          {/* Quick Action Buttons */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <Link 
              href="/expenses"
              className="flex items-center justify-center gap-2 p-4 bg-white dark:bg-gray-800 rounded-lg shadow-md hover:bg-blue-50 dark:hover:bg-gray-700 transition"
            >
              <svg 
                className="w-5 h-5 text-blue-600 dark:text-blue-400" 
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24" 
                xmlns="http://www.w3.org/2000/svg"
              >
                <path 
                  strokeLinecap="round" 
                  strokeLinejoin="round" 
                  strokeWidth={2} 
                  d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" 
                />
              </svg>
              <span className="font-medium text-gray-900 dark:text-white">Add Expense</span>
            </Link>
            
            <Link 
              href="/tasks"
              className="flex items-center justify-center gap-2 p-4 bg-white dark:bg-gray-800 rounded-lg shadow-md hover:bg-green-50 dark:hover:bg-gray-700 transition"
            >
              <svg 
                className="w-5 h-5 text-green-600 dark:text-green-400" 
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24" 
                xmlns="http://www.w3.org/2000/svg"
              >
                <path 
                  strokeLinecap="round" 
                  strokeLinejoin="round" 
                  strokeWidth={2} 
                  d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4" 
                />
              </svg>
              <span className="font-medium text-gray-900 dark:text-white">Create Task</span>
            </Link>
            
            <button
              onClick={() => setShowInviteModal(true)}
              className="flex items-center justify-center gap-2 p-4 bg-white dark:bg-gray-800 rounded-lg shadow-md hover:bg-purple-50 dark:hover:bg-gray-700 transition"
            >
              <svg 
                className="w-5 h-5 text-purple-600 dark:text-purple-400" 
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24" 
                xmlns="http://www.w3.org/2000/svg"
              >
                <path 
                  strokeLinecap="round" 
                  strokeLinejoin="round" 
                  strokeWidth={2} 
                  d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" 
                />
              </svg>
              <span className="font-medium text-gray-900 dark:text-white">Invite Roommate</span>
            </button>
          </div>
        </div>
        
        <div className="w-full lg:w-1/3">
          {/* Upcoming Events or Calendar could go here */}
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6">
            <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4">Upcoming Events</h3>
            <div className="space-y-3">
              <div className="flex items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-md">
                <div className="flex-shrink-0 bg-red-100 dark:bg-red-800 rounded-md p-2">
                  <svg 
                    className="w-5 h-5 text-red-600 dark:text-red-300" 
                    fill="none" 
                    stroke="currentColor" 
                    viewBox="0 0 24 24" 
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path 
                      strokeLinecap="round" 
                      strokeLinejoin="round" 
                      strokeWidth={2} 
                      d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" 
                    />
                  </svg>
                </div>
                <div className="ml-3">
                  <p className="text-sm font-medium text-gray-900 dark:text-white">Rent Due</p>
                  <p className="text-xs text-gray-500 dark:text-gray-400">Tomorrow</p>
                </div>
              </div>
              
              <div className="flex items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-md">
                <div className="flex-shrink-0 bg-blue-100 dark:bg-blue-800 rounded-md p-2">
                  <svg 
                    className="w-5 h-5 text-blue-600 dark:text-blue-300" 
                    fill="none" 
                    stroke="currentColor" 
                    viewBox="0 0 24 24" 
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path 
                      strokeLinecap="round" 
                      strokeLinejoin="round" 
                      strokeWidth={2} 
                      d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" 
                    />
                  </svg>
                </div>
                <div className="ml-3">
                  <p className="text-sm font-medium text-gray-900 dark:text-white">House Meeting</p>
                  <p className="text-xs text-gray-500 dark:text-gray-400">Sunday, 7:00 PM</p>
                </div>
              </div>
              
              <div className="flex items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-md">
                <div className="flex-shrink-0 bg-green-100 dark:bg-green-800 rounded-md p-2">
                  <svg 
                    className="w-5 h-5 text-green-600 dark:text-green-300" 
                    fill="none" 
                    stroke="currentColor" 
                    viewBox="0 0 24 24" 
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path 
                      strokeLinecap="round" 
                      strokeLinejoin="round" 
                      strokeWidth={2} 
                      d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" 
                    />
                  </svg>
                </div>
                <div className="ml-3">
                  <p className="text-sm font-medium text-gray-900 dark:text-white">Trash Duty</p>
                  <p className="text-xs text-gray-500 dark:text-gray-400">Monday (Your turn)</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Members Grid */}
      <MemberGrid 
        members={MOCK_MEMBERS} 
        onInvite={() => setShowInviteModal(true)} 
      />

      {/* Invite Modal - Using the new component */}
      {showInviteModal && (
        <InviteModal 
          householdId={currentHouseholdId}
          onClose={() => setShowInviteModal(false)}
        />
      )}
    </div>
  );
}
```

// Directory: app\(dashboard)\expenses, File: page.tsx
// File Type: tsx
```tsx
// src/app/(dashboard)/expenses/page.tsx
'use client';

import { useState, useEffect } from 'react';
import ExpenseForm from '@/components/expenses/ExpenseForm';
import PaymentMatrix from '@/components/expenses/PaymentMatrix';

// Mock data for demonstration
const MOCK_EXPENSES = [
  {
    id: '1',
    title: 'Groceries',
    amount: 85.75,
    date: new Date('2024-02-20T00:00:00.000Z'),
    creatorId: '1',
    creatorName: 'Jane Smith',
    description: 'Weekly groceries from Trader Joe\'s',
    splitType: 'EQUAL',
    householdId: '1',
    splits: [
      { userId: '1', userName: 'Jane Smith', amount: 21.44 },
      { userId: '2', userName: 'John Doe', amount: 21.44 },
      { userId: '3', userName: 'Emily Johnson', amount: 21.44 },
      { userId: '4', userName: 'Michael Brown', amount: 21.43 },
    ],
    payments: [
      { userId: '2', userName: 'John Doe', amount: 21.44, status: 'COMPLETED' },
      { userId: '3', userName: 'Emily Johnson', amount: 21.44, status: 'PENDING' },
      { userId: '4', userName: 'Michael Brown', amount: 21.43, status: 'PENDING' },
    ]
  },
  {
    id: '2',
    title: 'Internet Bill',
    amount: 89.99,
    date: new Date('2024-02-15T00:00:00.000Z'),
    creatorId: '3',
    creatorName: 'Emily Johnson',
    description: 'Monthly internet bill from Comcast',
    splitType: 'EQUAL',
    householdId: '1',
    splits: [
      { userId: '1', userName: 'Jane Smith', amount: 22.50 },
      { userId: '2', userName: 'John Doe', amount: 22.50 },
      { userId: '3', userName: 'Emily Johnson', amount: 22.50 },
      { userId: '4', userName: 'Michael Brown', amount: 22.49 },
    ],
    payments: [
      { userId: '1', userName: 'Jane Smith', amount: 22.50, status: 'COMPLETED' },
      { userId: '2', userName: 'John Doe', amount: 22.50, status: 'COMPLETED' },
      { userId: '4', userName: 'Michael Brown', amount: 22.49, status: 'PENDING' },
    ]
  },
  {
    id: '3',
    title: 'Pizza Night',
    amount: 45.50,
    date: new Date('2024-02-10T00:00:00.000Z'),
    creatorId: '2',
    creatorName: 'John Doe',
    description: 'Pizza and wings for movie night',
    splitType: 'EQUAL',
    householdId: '1',
    splits: [
      { userId: '1', userName: 'Jane Smith', amount: 11.38 },
      { userId: '2', userName: 'John Doe', amount: 11.38 },
      { userId: '3', userName: 'Emily Johnson', amount: 11.38 },
      { userId: '4', userName: 'Michael Brown', amount: 11.36 },
    ],
    payments: [
      { userId: '1', userName: 'Jane Smith', amount: 11.38, status: 'COMPLETED' },
      { userId: '3', userName: 'Emily Johnson', amount: 11.38, status: 'COMPLETED' },
      { userId: '4', userName: 'Michael Brown', amount: 11.36, status: 'COMPLETED' },
    ]
  },
];

const MOCK_MEMBERS = [
  {
    id: '1',
    name: 'Jane Smith',
    avatar: 'https://i.pravatar.cc/150?img=1',
  },
  {
    id: '2',
    name: 'John Doe',
    avatar: 'https://i.pravatar.cc/150?img=8',
  },
  {
    id: '3',
    name: 'Emily Johnson',
    avatar: 'https://i.pravatar.cc/150?img=5',
  },
  {
    id: '4',
    name: 'Michael Brown',
    avatar: 'https://i.pravatar.cc/150?img=12',
  },
];

export default function ExpensesPage() {
  const [expenses, setExpenses] = useState(MOCK_EXPENSES);
  const [showExpenseForm, setShowExpenseForm] = useState(false);
  const [currentExpense, setCurrentExpense] = useState<any>(null);
  const [balances, setBalances] = useState<any[]>([]);
  
  // Calculate balances for payment matrix
  useEffect(() => {
    calculateBalances();
  }, [expenses]);
  
  const calculateBalances = () => {
    const tempBalances: Record<string, {userId: string, userName: string, owes: number, isOwed: number, net: number}> = {};
    
    // Initialize balances for all members
    MOCK_MEMBERS.forEach(member => {
      tempBalances[member.id] = {
        userId: member.id,
        userName: member.name,
        owes: 0,
        isOwed: 0,
        net: 0
      };
    });
    
    // Calculate owes and owed amounts
    expenses.forEach(expense => {
      // Add amount owed to creator
      if (tempBalances[expense.creatorId]) {
        tempBalances[expense.creatorId].isOwed += expense.amount;
      }
      
      // Process payments
      expense.payments.forEach(payment => {
        if (payment.status === 'COMPLETED') {
          // Reduce amount owed by payer
          if (tempBalances[payment.userId]) {
            tempBalances[payment.userId].owes -= payment.amount;
          }
          
          // Reduce amount owed to creator
          if (tempBalances[expense.creatorId]) {
            tempBalances[expense.creatorId].isOwed -= payment.amount;
          }
        }
      });
      
      // Process splits to determine who owes what
      expense.splits.forEach(split => {
        // Skip creator's own split
        if (split.userId !== expense.creatorId) {
          // If payment not completed, add to owes
          const paymentCompleted = expense.payments.some(
            p => p.userId === split.userId && p.status === 'COMPLETED'
          );
          
          if (!paymentCompleted && tempBalances[split.userId]) {
            tempBalances[split.userId].owes += split.amount;
          }
        }
      });
    });
    
    // Calculate net balance
    Object.keys(tempBalances).forEach(userId => {
      tempBalances[userId].net = tempBalances[userId].isOwed - tempBalances[userId].owes;
    });
    
    setBalances(Object.values(tempBalances));
  };
  
  const handleAddExpense = (newExpense: any) => {
    // Generate a simple ID - in a real app this would come from the backend
    const id = (expenses.length + 1).toString();
    
    // In a real app, you would send this data to your API
    const expenseToAdd = {
      ...newExpense,
      id,
      date: new Date(newExpense.date),
    };
    
    setExpenses([...expenses, expenseToAdd]);
    setShowExpenseForm(false);
    setCurrentExpense(null);
  };
  
  const handleEditExpense = (expense: any) => {
    setCurrentExpense(expense);
    setShowExpenseForm(true);
  };
  
  const handleUpdateExpense = (updatedExpense: any) => {
    // In a real app, you would send this data to your API
    const updatedExpenses = expenses.map(expense => 
      expense.id === updatedExpense.id ? updatedExpense : expense
    );
    
    setExpenses(updatedExpenses);
    setShowExpenseForm(false);
    setCurrentExpense(null);
  };
  
  const handleDeleteExpense = (expenseId: string) => {
    // In a real app, you would send this request to your API
    const filteredExpenses = expenses.filter(expense => expense.id !== expenseId);
    setExpenses(filteredExpenses);
  };
  
  const handleMarkAsPaid = (expenseId: string, userId: string) => {
    // In a real app, you would send this request to your API
    const updatedExpenses = expenses.map(expense => {
      if (expense.id === expenseId) {
        const updatedPayments = expense.payments.map(payment => {
          if (payment.userId === userId) {
            return { ...payment, status: 'COMPLETED' };
          }
          return payment;
        });
        
        return { ...expense, payments: updatedPayments };
      }
      return expense;
    });
    
    setExpenses(updatedExpenses);
  };

  return (
    <div className="container mx-auto py-6 px-4">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Household Expenses</h1>
        <button
          onClick={() => {
            setCurrentExpense(null);
            setShowExpenseForm(true);
          }}
          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          Add New Expense
        </button>
      </div>
      
      {/* Payment Matrix showing who owes whom */}
      <div className="mb-8">
        <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">Payment Summary</h2>
        <PaymentMatrix balances={balances} />
      </div>
      
      {/* List of Expenses */}
      <div>
        <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">Recent Expenses</h2>
        
        <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden">
          <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead className="bg-gray-50 dark:bg-gray-700">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Expense
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Date
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Amount
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Paid By
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Your Share
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Status
                </th>
                <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
              {expenses.map((expense) => {
                // For demo purposes, assuming current user is user1
                const currentUserId = '1';
                const isCreator = expense.creatorId === currentUserId;
                const userSplit = expense.splits.find(split => split.userId === currentUserId);
                const userPayment = expense.payments.find(payment => payment.userId === currentUserId);
                const isPaid = isCreator || (userPayment && userPayment.status === 'COMPLETED');
                
                return (
                  <tr key={expense.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900 dark:text-white">{expense.title}</div>
                      <div className="text-sm text-gray-500 dark:text-gray-400">{expense.description}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                      {expense.date.toLocaleDateString()}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                      ${expense.amount.toFixed(2)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                      {expense.creatorName}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                      ${userSplit ? userSplit.amount.toFixed(2) : '0.00'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {isCreator ? (
                        <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                          Paid By You
                        </span>
                      ) : isPaid ? (
                        <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                          Paid
                        </span>
                      ) : (
                        <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200">
                          Pending
                        </span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex justify-end space-x-2">
                        {!isCreator && !isPaid && (
                          <button
                            onClick={() => handleMarkAsPaid(expense.id, currentUserId)}
                            className="text-green-600 hover:text-green-900 dark:text-green-400 dark:hover:text-green-300"
                          >
                            Mark Paid
                          </button>
                        )}
                        <button
                          onClick={() => handleEditExpense(expense)}
                          className="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300"
                        >
                          Edit
                        </button>
                        <button
                          onClick={() => handleDeleteExpense(expense.id)}
                          className="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300"
                        >
                          Delete
                        </button>
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>
      
      {/* Expense Form Modal */}
      {showExpenseForm && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen px-4">
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={() => setShowExpenseForm(false)} />
            
            <div className="relative bg-white dark:bg-gray-800 rounded-lg max-w-lg w-full p-6 shadow-xl">
              <div className="absolute top-0 right-0 pt-4 pr-4">
                <button
                  type="button"
                  className="bg-white dark:bg-gray-800 rounded-md text-gray-400 hover:text-gray-500 dark:hover:text-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  onClick={() => setShowExpenseForm(false)}
                >
                  <span className="sr-only">Close</span>
                  <svg 
                    className="h-6 w-6" 
                    fill="none" 
                    viewBox="0 0 24 24" 
                    stroke="currentColor" 
                    aria-hidden="true"
                  >
                    <path 
                      strokeLinecap="round" 
                      strokeLinejoin="round" 
                      strokeWidth="2" 
                      d="M6 18L18 6M6 6l12 12" 
                    />
                  </svg>
                </button>
              </div>
              
              <div className="mt-3 text-center sm:mt-0 sm:text-left">
                <h3 className="text-lg font-medium leading-6 text-gray-900 dark:text-white">
                  {currentExpense ? 'Edit Expense' : 'Add New Expense'}
                </h3>
              </div>
              
              <ExpenseForm
                expense={currentExpense}
                members={MOCK_MEMBERS}
                onSubmit={currentExpense ? handleUpdateExpense : handleAddExpense}
                onCancel={() => {
                  setShowExpenseForm(false);
                  setCurrentExpense(null);
                }}
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
```

// Directory: app\(dashboard)\invitations, File: page.tsx
// File Type: tsx
```tsx
'use client';

import UserInvitationsList from '@/components/invitations/UserInvitationsList';

export default function InvitationsPage() {
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold mb-6">Your Invitations</h1>
      <UserInvitationsList />
    </div>
  );
}
```

// Directory: app\(dashboard)\profile, File: page.tsx
// File Type: tsx
```tsx
// src/app/(dashboard)/profile/page.tsx
'use client';

import { useState, useEffect, ChangeEvent } from 'react';
import Image from 'next/image';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/context/AuthContext';
import { supabaseClient } from '@/lib/supabase';

export default function ProfilePage() {
  const { user, isLoading } = useAuth();
  const router = useRouter();
  
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    currentPassword: '',
    newPassword: '',
    confirmPassword: '',
  });
  
  const [avatar, setAvatar] = useState<string | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [isChangingPassword, setIsChangingPassword] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  
  // Initialize form data from user
  useEffect(() => {
    if (user) {
      setFormData({
        ...formData,
        name: user.name || '',
        email: user.email || '',
      });
      setAvatar(user.avatar || null);
    }
  }, [user]);
  
  // Handle input changes
  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
    
    // Clear any error/success messages when user starts typing
    if (error) setError('');
    if (success) setSuccess('');
  };
  
  // Handle avatar upload
  const handleAvatarChange = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    
    // Check file size (max 2MB)
    if (file.size > 2 * 1024 * 1024) {
      setError('Image size must be less than 2MB');
      return;
    }
    
    // Check file type
    if (!file.type.startsWith('image/')) {
      setError('Only image files are allowed');
      return;
    }
    
    // Create a preview URL for the image
    const reader = new FileReader();
    reader.onload = (e) => {
      if (e.target?.result) {
        setAvatar(e.target.result as string);
      }
    };
    reader.readAsDataURL(file);
  };
  
  // Handle profile update
  const handleProfileUpdate = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError('');
    setSuccess('');
    
    try {
      if (!user) throw new Error('User not authenticated');
      
      // Update the user metadata in Supabase Auth
      const { error: updateError } = await supabaseClient.auth.updateUser({
        data: {
          name: formData.name,
        }
      });
      
      if (updateError) throw updateError;
      
      // Update the user record in the database
      const { error: dbError } = await supabaseClient
        .from('User')
        .update({
          name: formData.name,
          avatar: avatar,
          updatedAt: new Date().toISOString()
        })
        .eq('id', user.id);
      
      if (dbError) throw dbError;
      
      setSuccess('Profile updated successfully!');
      setIsEditing(false);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred while updating your profile');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // Handle password change
  const handlePasswordChange = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError('');
    setSuccess('');
    
    // Validate passwords
    if (formData.newPassword !== formData.confirmPassword) {
      setError('New passwords do not match');
      setIsSubmitting(false);
      return;
    }
    
    if (formData.newPassword.length < 8) {
      setError('Password must be at least 8 characters long');
      setIsSubmitting(false);
      return;
    }
    
    try {
      // Update password with Supabase Auth
      const { error } = await supabaseClient.auth.updateUser({
        password: formData.newPassword
      });
      
      if (error) throw error;
      
      setSuccess('Password changed successfully!');
      setFormData({
        ...formData,
        currentPassword: '',
        newPassword: '',
        confirmPassword: '',
      });
      setIsChangingPassword(false);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred while changing your password');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // Delete account
  const handleDeleteAccount = async () => {
    if (window.confirm('Are you sure you want to delete your account? This action cannot be undone.')) {
      try {
        if (!user) throw new Error('User not authenticated');
        
        // In a real application, you would call an API to handle account deletion
        // This would need admin/service level access to delete the user
        const response = await fetch('/api/users/me', {
          method: 'DELETE',
        });
        
        if (!response.ok) {
          const data = await response.json();
          throw new Error(data.error || 'Failed to delete account');
        }
        
        // Sign out using Supabase Auth
        await supabaseClient.auth.signOut();
        
        // Redirect to the login page
        router.push('/login');
      } catch (err) {
        setError(err instanceof Error ? err.message : 'An error occurred while deleting your account');
      }
    }
  };
  
  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }
  
  return (
    <div className="container mx-auto py-6 px-4">
      <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">Account Settings</h1>
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left sidebar with avatar and account info */}
        <div className="lg:col-span-1">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
            <div className="flex flex-col items-center">
              <div className="relative mb-4">
                {avatar ? (
                  <Image 
                    src={avatar} 
                    alt={formData.name || 'User'} 
                    width={120} 
                    height={120} 
                    className="rounded-full object-cover"
                  />
                ) : (
                  <div className="bg-gray-200 dark:bg-gray-700 h-32 w-32 rounded-full flex items-center justify-center text-gray-600 dark:text-gray-200 text-2xl font-medium">
                    {formData.name ? formData.name.charAt(0).toUpperCase() : 'U'}
                  </div>
                )}
                
                {isEditing && (
                  <div className="absolute bottom-0 right-0">
                    <label 
                      htmlFor="avatar-upload" 
                      className="bg-blue-600 text-white p-2 rounded-full cursor-pointer hover:bg-blue-700"
                    >
                      <svg 
                        className="h-5 w-5" 
                        fill="none" 
                        viewBox="0 0 24 24" 
                        stroke="currentColor"
                      >
                        <path 
                          strokeLinecap="round" 
                          strokeLinejoin="round" 
                          strokeWidth={2} 
                          d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" 
                        />
                        <path 
                          strokeLinecap="round" 
                          strokeLinejoin="round" 
                          strokeWidth={2} 
                          d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" 
                        />
                      </svg>
                      <input 
                        id="avatar-upload" 
                        type="file" 
                        accept="image/*" 
                        className="hidden" 
                        onChange={handleAvatarChange}
                      />
                    </label>
                  </div>
                )}
              </div>
              
              <h2 className="text-xl font-bold text-gray-900 dark:text-white">{user?.name}</h2>
              <p className="text-gray-500 dark:text-gray-400">{user?.email}</p>
              
              <div className="mt-6 w-full">
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600 dark:text-gray-300">Account created</span>
                    <span className="text-sm font-medium text-gray-900 dark:text-white">
                      {new Date().toLocaleDateString()} {/* This would come from user data */}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600 dark:text-gray-300">Role</span>
                    <span className="text-sm font-medium text-gray-900 dark:text-white">
                      Member {/* This would come from user data */}
                    </span>
                  </div>
                </div>
                
                <div className="mt-6">
                  <button
                    onClick={() => setIsChangingPassword(prev => !prev)}
                    className="text-sm text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300"
                  >
                    Change password
                  </button>
                </div>
                
                <div className="mt-2">
                  <button
                    onClick={handleDeleteAccount}
                    className="text-sm text-red-600 hover:text-red-500 dark:text-red-400 dark:hover:text-red-300"
                  >
                    Delete account
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Main content with profile form */}
        <div className="lg:col-span-2">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
            <div className="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
              <h2 className="text-lg font-medium text-gray-900 dark:text-white">Profile Information</h2>
              
              {!isEditing ? (
                <button
                  onClick={() => setIsEditing(true)}
                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  Edit Profile
                </button>
              ) : (
                <button
                  onClick={() => setIsEditing(false)}
                  className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
                >
                  Cancel
                </button>
              )}
            </div>
            
            {/* Success and error messages */}
            {success && (
              <div className="m-6 p-3 bg-green-50 dark:bg-green-900 text-green-800 dark:text-green-200 rounded-md">
                {success}
              </div>
            )}
            
            {error && (
              <div className="m-6 p-3 bg-red-50 dark:bg-red-900 text-red-800 dark:text-red-200 rounded-md">
                {error}
              </div>
            )}
            
            <div className="p-6">
              {/* Profile Information Form */}
              {!isChangingPassword ? (
                <form onSubmit={handleProfileUpdate}>
                  <div className="space-y-4">
                    <div>
                      <label htmlFor="name" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Full Name
                      </label>
                      <input
                        id="name"
                        name="name"
                        type="text"
                        value={formData.name}
                        onChange={handleInputChange}
                        readOnly={!isEditing}
                        className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white ${
                          isEditing ? 'border-gray-300' : 'border-transparent bg-gray-50 dark:bg-gray-800'
                        }`}
                      />
                    </div>
                    
                    <div>
                      <label htmlFor="email" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Email Address
                      </label>
                      <input
                        id="email"
                        name="email"
                        type="email"
                        value={formData.email}
                        onChange={handleInputChange}
                        readOnly={true} // Email can't be changed through profile for Supabase Auth
                        className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white border-transparent bg-gray-50 dark:bg-gray-800`}
                      />
                      <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
                        Email address cannot be changed directly. Please contact support if you need to change it.
                      </p>
                    </div>
                    
                    {isEditing && (
                      <div className="flex justify-end">
                        <button
                          type="submit"
                          disabled={isSubmitting}
                          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                          {isSubmitting ? 'Saving...' : 'Save Changes'}
                        </button>
                      </div>
                    )}
                  </div>
                </form>
              ) : (
                /* Password Change Form */
                <form onSubmit={handlePasswordChange}>
                  <div className="space-y-4">
                    <div>
                      <label htmlFor="newPassword" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        New Password
                      </label>
                      <input
                        id="newPassword"
                        name="newPassword"
                        type="password"
                        value={formData.newPassword}
                        onChange={handleInputChange}
                        required
                        minLength={8}
                        className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                      />
                      <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
                        Must be at least 8 characters
                      </p>
                    </div>
                    
                    <div>
                      <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Confirm New Password
                      </label>
                      <input
                        id="confirmPassword"
                        name="confirmPassword"
                        type="password"
                        value={formData.confirmPassword}
                        onChange={handleInputChange}
                        required
                        className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                      />
                    </div>
                    
                    <div className="flex justify-end space-x-3">
                      <button
                        type="button"
                        onClick={() => setIsChangingPassword(false)}
                        className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
                      >
                        Cancel
                      </button>
                      <button
                        type="submit"
                        disabled={isSubmitting}
                        className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        {isSubmitting ? 'Changing...' : 'Change Password'}
                      </button>
                    </div>
                  </div>
                </form>
              )}
            </div>
          </div>
          
          {/* Household Information (Optional Section) */}
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden mt-6">
            <div className="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
              <h2 className="text-lg font-medium text-gray-900 dark:text-white">Household Membership</h2>
            </div>
            
            <div className="p-6">
              <div className="space-y-4">
                <div className="flex items-center justify-between bg-gray-50 dark:bg-gray-700 p-4 rounded-md">
                  <div>
                    <h3 className="font-medium text-gray-900 dark:text-white">123 College Avenue</h3>
                    <p className="text-sm text-gray-500 dark:text-gray-400">Joined August 15, 2023</p>
                  </div>
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                    Admin
                  </span>
                </div>
                
                <p className="text-sm text-gray-700 dark:text-gray-300">
                  To join another household, you will need to be invited by an existing member.
                </p>
              </div>
            </div>
          </div>
          
          {/* Notification Preferences (Optional Section) */}
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden mt-6">
            <div className="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
              <h2 className="text-lg font-medium text-gray-900 dark:text-white">Notification Preferences</h2>
            </div>
            
            <div className="p-6">
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="font-medium text-gray-900 dark:text-white">Email Notifications</h3>
                    <p className="text-sm text-gray-500 dark:text-gray-400">Receive updates via email</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input type="checkbox" className="sr-only peer" defaultChecked />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                  </label>
                </div>
                
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="font-medium text-gray-900 dark:text-white">Expense Reminders</h3>
                    <p className="text-sm text-gray-500 dark:text-gray-400">Get notified about pending expenses</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input type="checkbox" className="sr-only peer" defaultChecked />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                  </label>
                </div>
                
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="font-medium text-gray-900 dark:text-white">Task Assignment</h3>
                    <p className="text-sm text-gray-500 dark:text-gray-400">Notifications when you're assigned a task</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input type="checkbox" className="sr-only peer" defaultChecked />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                  </label>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
```

// Directory: app\(dashboard)\settings, File: page.tsx
// File Type: tsx
```tsx
// src/app/(dashboard)/settings/page.tsx
'use client';

import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import Card from '@/components/ui/Card';

export default function SettingsPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  
  // Theme settings
  const [theme, setTheme] = useState<'light' | 'dark' | 'system'>('system');
  
  // Notification settings
  const [notifications, setNotifications] = useState({
    email: true,
    push: true,
    expenses: true,
    tasks: true,
    messages: true,
    reminders: true,
  });
  
  // Privacy settings
  const [privacy, setPrivacy] = useState({
    showEmail: false,
    showStatus: true,
    allowMentions: true,
  });
  
  // Currency and locale settings
  const [preferences, setPreferences] = useState({
    currency: 'USD',
    dateFormat: 'MM/DD/YYYY',
    language: 'en',
  });
  
  // State for form submission
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  
  // Initialize theme based on system preference
  useEffect(() => {
    // Check if localStorage is available (client-side only)
    if (typeof window !== 'undefined') {
      const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | 'system' | null;
      
      if (savedTheme) {
        setTheme(savedTheme);
      } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        setTheme('dark');
      }
    }
  }, []);
  
  // Apply theme changes
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const root = window.document.documentElement;
      
      // Remove previous theme classes
      root.classList.remove('light', 'dark');
      
      if (theme === 'system') {
        // Apply theme based on system preference
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          root.classList.add('dark');
        } else {
          root.classList.add('light');
        }
      } else {
        // Apply user-selected theme
        root.classList.add(theme);
      }
      
      // Save preference to localStorage
      localStorage.setItem('theme', theme);
    }
  }, [theme]);
  
  // Handle theme change
  const handleThemeChange = (newTheme: 'light' | 'dark' | 'system') => {
    setTheme(newTheme);
  };
  
  // Handle notification toggle change
  const handleNotificationChange = (key: keyof typeof notifications) => {
    setNotifications({
      ...notifications,
      [key]: !notifications[key],
    });
  };
  
  // Handle privacy setting change
  const handlePrivacyChange = (key: keyof typeof privacy) => {
    setPrivacy({
      ...privacy,
      [key]: !privacy[key],
    });
  };
  
  // Handle preference change
  const handlePreferenceChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const { name, value } = e.target;
    setPreferences({
      ...preferences,
      [name]: value,
    });
  };
  
  // Handle save settings
  const handleSaveSettings = async () => {
    setIsSubmitting(true);
    setError('');
    setSuccess('');
    
    try {
      // In a real application, this would be an API call to save user settings
      // For example:
      const response = await fetch('/api/users/settings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          theme,
          notifications,
          privacy,
          preferences,
        }),
      });
      
      // For demo purposes, simulate an API response
      // if (!response.ok) throw new Error('Failed to save settings');
      
      // Wait for animation
      await new Promise(resolve => setTimeout(resolve, 600));
      
      setSuccess('Settings saved successfully!');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred while saving settings');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // Export data
  const handleExportData = async () => {
    try {
      // In a real application, this would be an API call to export user data
      // For example:
      const response = await fetch('/api/users/export', {
        method: 'GET',
      });
      
      // For demo purposes, create a dummy JSON
      const userData = {
        profile: {
          name: session?.user?.name,
          email: session?.user?.email,
        },
        settings: {
          theme,
          notifications,
          privacy,
          preferences,
        },
        // Add more data as needed
      };
      
      // Create downloadable file
      const dataStr = JSON.stringify(userData, null, 2);
      const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
      
      const exportFileDefaultName = 'roomies-data.json';
      
      const linkElement = document.createElement('a');
      linkElement.setAttribute('href', dataUri);
      linkElement.setAttribute('download', exportFileDefaultName);
      linkElement.click();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred while exporting data');
    }
  };
  
  if (status === 'loading') {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }
  
  return (
    <div className="container mx-auto py-6 px-4">
      <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">Settings</h1>
      
      {/* Success and error messages */}
      {success && (
        <div className="mb-6 p-3 bg-green-50 dark:bg-green-900 text-green-800 dark:text-green-200 rounded-md">
          {success}
        </div>
      )}
      
      {error && (
        <div className="mb-6 p-3 bg-red-50 dark:bg-red-900 text-red-800 dark:text-red-200 rounded-md">
          {error}
        </div>
      )}
      
      <div className="grid grid-cols-1 gap-6">
        {/* Appearance Settings */}
        <Card title="Appearance" className="overflow-visible">
          <div className="p-6 space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Theme
              </label>
              
              <div className="grid grid-cols-3 gap-3">
                <button
                  onClick={() => handleThemeChange('light')}
                  className={`flex flex-col items-center justify-center p-3 border rounded-md ${
                    theme === 'light'
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/30'
                      : 'border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700'
                  }`}
                >
                  <svg className="h-6 w-6 text-gray-900 dark:text-white mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                  </svg>
                  <span className="text-sm font-medium text-gray-900 dark:text-white">Light</span>
                </button>
                
                <button
                  onClick={() => handleThemeChange('dark')}
                  className={`flex flex-col items-center justify-center p-3 border rounded-md ${
                    theme === 'dark'
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/30'
                      : 'border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700'
                  }`}
                >
                  <svg className="h-6 w-6 text-gray-900 dark:text-white mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                  </svg>
                  <span className="text-sm font-medium text-gray-900 dark:text-white">Dark</span>
                </button>
                
                <button
                  onClick={() => handleThemeChange('system')}
                  className={`flex flex-col items-center justify-center p-3 border rounded-md ${
                    theme === 'system'
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/30'
                      : 'border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700'
                  }`}
                >
                  <svg className="h-6 w-6 text-gray-900 dark:text-white mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                  </svg>
                  <span className="text-sm font-medium text-gray-900 dark:text-white">System</span>
                </button>
              </div>
              
              <p className="mt-2 text-sm text-gray-500 dark:text-gray-400">
                Choose how Roomies appears to you. Select a single theme, or sync with your system.
              </p>
            </div>
          </div>
        </Card>
        
        {/* Notification Settings */}
        <Card title="Notifications" className="overflow-visible">
          <div className="p-6 space-y-4">
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="font-medium text-gray-900 dark:text-white">Email Notifications</h3>
                  <p className="text-sm text-gray-500 dark:text-gray-400">Receive notifications via email</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    className="sr-only peer" 
                    checked={notifications.email}
                    onChange={() => handleNotificationChange('email')} 
                  />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                </label>
              </div>
              
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="font-medium text-gray-900 dark:text-white">Push Notifications</h3>
                  <p className="text-sm text-gray-500 dark:text-gray-400">Receive push notifications in browser</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    className="sr-only peer" 
                    checked={notifications.push}
                    onChange={() => handleNotificationChange('push')} 
                  />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                </label>
              </div>
              
              <div className="pt-4 border-t border-gray-200 dark:border-gray-700">
                <h3 className="font-medium text-gray-900 dark:text-white mb-3">Notify me about:</h3>
                
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-700 dark:text-gray-300">Expense updates</p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input 
                        type="checkbox" 
                        className="sr-only peer" 
                        checked={notifications.expenses}
                        onChange={() => handleNotificationChange('expenses')} 
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                    </label>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-700 dark:text-gray-300">Task assignments</p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input 
                        type="checkbox" 
                        className="sr-only peer" 
                        checked={notifications.tasks}
                        onChange={() => handleNotificationChange('tasks')} 
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                    </label>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-700 dark:text-gray-300">New messages</p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input 
                        type="checkbox" 
                        className="sr-only peer" 
                        checked={notifications.messages}
                        onChange={() => handleNotificationChange('messages')} 
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                    </label>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-700 dark:text-gray-300">Due date reminders</p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input 
                        type="checkbox" 
                        className="sr-only peer" 
                        checked={notifications.reminders}
                        onChange={() => handleNotificationChange('reminders')} 
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                    </label>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </Card>
        
        {/* Privacy Settings */}
        <Card title="Privacy" className="overflow-visible">
          <div className="p-6 space-y-4">
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="font-medium text-gray-900 dark:text-white">Show email to household members</h3>
                  <p className="text-sm text-gray-500 dark:text-gray-400">Make your email visible to other members</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    className="sr-only peer" 
                    checked={privacy.showEmail}
                    onChange={() => handlePrivacyChange('showEmail')} 
                  />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                </label>
              </div>
              
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="font-medium text-gray-900 dark:text-white">Show online status</h3>
                  <p className="text-sm text-gray-500 dark:text-gray-400">Let others see when you're active</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    className="sr-only peer" 
                    checked={privacy.showStatus}
                    onChange={() => handlePrivacyChange('showStatus')} 
                  />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                </label>
              </div>
              
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="font-medium text-gray-900 dark:text-white">Allow @mentions</h3>
                  <p className="text-sm text-gray-500 dark:text-gray-400">Let people mention you in messages</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    className="sr-only peer" 
                    checked={privacy.allowMentions}
                    onChange={() => handlePrivacyChange('allowMentions')} 
                  />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                </label>
              </div>
            </div>
          </div>
        </Card>
        
        {/* Preferences */}
        <Card title="Preferences" className="overflow-visible">
          <div className="p-6 space-y-4">
            <div>
              <label htmlFor="currency" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Currency
              </label>
              <select
                id="currency"
                name="currency"
                value={preferences.currency}
                onChange={handlePreferenceChange}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              >
                <option value="USD">US Dollar ($)</option>
                <option value="EUR">Euro (€)</option>
                <option value="GBP">British Pound (£)</option>
                <option value="CAD">Canadian Dollar (C$)</option>
                <option value="AUD">Australian Dollar (A$)</option>
                <option value="JPY">Japanese Yen (¥)</option>
              </select>
            </div>
            
            <div>
              <label htmlFor="dateFormat" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Date Format
              </label>
              <select
                id="dateFormat"
                name="dateFormat"
                value={preferences.dateFormat}
                onChange={handlePreferenceChange}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              >
                <option value="MM/DD/YYYY">MM/DD/YYYY</option>
                <option value="DD/MM/YYYY">DD/MM/YYYY</option>
                <option value="YYYY-MM-DD">YYYY-MM-DD</option>
              </select>
            </div>
            
            <div>
              <label htmlFor="language" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Language
              </label>
              <select
                id="language"
                name="language"
                value={preferences.language}
                onChange={handlePreferenceChange}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              >
                <option value="en">English</option>
                <option value="es">Español</option>
                <option value="fr">Français</option>
                <option value="de">Deutsch</option>
                <option value="it">Italiano</option>
                <option value="pt">Português</option>
              </select>
            </div>
          </div>
        </Card>
        
        {/* Data Management */}
        <Card title="Data Management" className="overflow-visible">
          <div className="p-6 space-y-4">
            <p className="text-sm text-gray-700 dark:text-gray-300">
              Export your personal data or delete your account permanently.
            </p>
            
            <div className="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3">
              <button
                onClick={handleExportData}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600"
              >
                Export Data
              </button>
              
              <button
                onClick={() => router.push('/profile')}
                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500"
              >
                Delete Account
              </button>
            </div>
            
            <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
              Deleting your account will permanently remove all your data, including your profile, expenses, tasks, and messages. This action cannot be undone.
            </p>
          </div>
        </Card>
        
        {/* Save Button */}
        <div className="flex justify-end">
          <button
            onClick={handleSaveSettings}
            disabled={isSubmitting}
            className="px-6 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isSubmitting ? (
              <div className="flex items-center">
                <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Saving...
              </div>
            ) : (
              'Save Settings'
            )}
          </button>
        </div>
      </div>
    </div>
  );
}
```

// Directory: app\(dashboard)\tasks, File: page.tsx
// File Type: tsx
```tsx
// src/app/(dashboard)/tasks/page.tsx
'use client';

import { useState, useEffect } from 'react';
import TaskForm from '@/components/tasks/TaskForm';
import TaskList from '@/components/tasks/TaskList'; // Fixed casing to match your actual file
import type { Task } from '@/components/tasks/TaskList'; // Import the Task type from your actual file

// Mock data for development
const MOCK_TASKS: Task[] = [
  {
    id: '1',
    title: 'Take out the trash',
    description: 'Empty all trash cans and take to the curb for Tuesday pickup',
    status: 'PENDING' as const,
    priority: 'MEDIUM' as const,
    creatorId: '1',
    creatorName: 'Jane Smith',
    assigneeId: '2',
    assigneeName: 'John Doe',
    dueDate: new Date('2024-02-28T00:00:00.000Z'),
    recurring: true,
    recurrenceRule: 'WEEKLY',
    householdId: '1'
  },
  {
    id: '2',
    title: 'Clean the bathroom',
    description: 'Deep clean the shared bathroom including shower, toilet, and sink',
    status: 'IN_PROGRESS' as const,
    priority: 'HIGH' as const,
    creatorId: '3',
    creatorName: 'Emily Johnson',
    assigneeId: '1',
    assigneeName: 'Jane Smith',
    dueDate: new Date('2024-02-26T00:00:00.000Z'),
    recurring: false,
    householdId: '1'
  },
  {
    id: '3',
    title: 'Buy cleaning supplies',
    description: 'We need more dish soap, sponges, and all-purpose cleaner',
    status: 'COMPLETED' as const,
    priority: 'LOW' as const,
    creatorId: '2',
    creatorName: 'John Doe',
    assigneeId: '4',
    assigneeName: 'Michael Brown',
    dueDate: new Date('2024-02-20T00:00:00.000Z'),
    recurring: false,
    householdId: '1',
    completedAt: new Date('2024-02-19T00:00:00.000Z')
  },
  {
    id: '4',
    title: 'Vacuum living room',
    description: 'Also dust the shelves and clean the coffee table',
    status: 'PENDING' as const,
    priority: 'MEDIUM' as const,
    creatorId: '1',
    creatorName: 'Jane Smith',
    assigneeId: '3',
    assigneeName: 'Emily Johnson',
    dueDate: new Date('2024-02-29T00:00:00.000Z'),
    recurring: true,
    recurrenceRule: 'WEEKLY',
    householdId: '1'
  },
  {
    id: '5',
    title: 'Pay internet bill',
    description: 'Due on the 1st of every month',
    status: 'PENDING' as const,
    priority: 'URGENT' as const,
    creatorId: '4',
    creatorName: 'Michael Brown',
    assigneeId: '1',
    assigneeName: 'Jane Smith',
    dueDate: new Date('2024-03-01T00:00:00.000Z'),
    recurring: true,
    recurrenceRule: 'MONTHLY',
    householdId: '1'
  }
];

const MOCK_MEMBERS = [
  {
    id: '1',
    name: 'Jane Smith',
    avatar: 'https://i.pravatar.cc/150?img=1',
  },
  {
    id: '2',
    name: 'John Doe',
    avatar: 'https://i.pravatar.cc/150?img=8',
  },
  {
    id: '3',
    name: 'Emily Johnson',
    avatar: 'https://i.pravatar.cc/150?img=5',
  },
  {
    id: '4',
    name: 'Michael Brown',
    avatar: 'https://i.pravatar.cc/150?img=12',
  },
];

export default function TasksPage() {
  const [tasks, setTasks] = useState<Task[]>(MOCK_TASKS);
  const [showTaskForm, setShowTaskForm] = useState(false);
  const [currentTask, setCurrentTask] = useState<Task | null>(null);
  const [filter, setFilter] = useState<'ALL' | 'MY_TASKS' | 'MY_CREATED' | 'PENDING' | 'COMPLETED'>('ALL');
  
  // For demo purposes, assuming current user is user1
  const currentUserId = '1';
  
  // Filtered tasks based on selected filter
  const filteredTasks = tasks.filter(task => {
    switch (filter) {
      case 'MY_TASKS':
        return task.assigneeId === currentUserId;
      case 'MY_CREATED':
        return task.creatorId === currentUserId;
      case 'PENDING':
        return task.status === 'PENDING' || task.status === 'IN_PROGRESS';
      case 'COMPLETED':
        return task.status === 'COMPLETED';
      default:
        return true;
    }
  });
  
  // Sort tasks: Urgent first, then by due date
  const sortedTasks = [...filteredTasks].sort((a, b) => {
    // First by priority (URGENT > HIGH > MEDIUM > LOW)
    const priorityOrder: Record<string, number> = { URGENT: 0, HIGH: 1, MEDIUM: 2, LOW: 3 };
    const priorityDiff = priorityOrder[a.priority] - 
                         priorityOrder[b.priority];
    
    if (priorityDiff !== 0) return priorityDiff;
    
    // Then by due date (earlier first)
    if (!a.dueDate) return 1;
    if (!b.dueDate) return -1;
    
    const dateA = a.dueDate instanceof Date ? a.dueDate : new Date(a.dueDate);
    const dateB = b.dueDate instanceof Date ? b.dueDate : new Date(b.dueDate);
    
    return dateA.getTime() - dateB.getTime();
  });
  
  // Type for the new task with optional id to match your components
  type NewTask = Omit<Task, 'id'> & { id?: string };
  
  const handleAddTask = (newTask: NewTask) => {
    // Generate a simple ID - in a real app this would come from the backend
    const id = (tasks.length + 1).toString();
    
    // Find the assignee name from members list
    const assigneeName = MOCK_MEMBERS.find(m => m.id === newTask.assigneeId)?.name || '';
    
    // In a real app, you would send this data to your API
    const taskToAdd: Task = {
      ...newTask,
      id, // Ensure id is provided
      creatorId: currentUserId,
      creatorName: MOCK_MEMBERS.find(m => m.id === currentUserId)?.name || '',
      assigneeName,
    };
    
    setTasks([...tasks, taskToAdd]);
    setShowTaskForm(false);
    setCurrentTask(null);
  };
  
  const handleEditTask = (task: Task) => {
    setCurrentTask(task);
    setShowTaskForm(true);
  };
  
// Update your handleUpdateTask function to accept both Task and NewTask
const handleUpdateTask = (updatedTask: Task | NewTask) => {
    // Make sure updatedTask has an id (it must have one since it's being edited)
    if (!updatedTask.id) {
      console.error("Task ID is missing");
      return;
    }
  
    // Continue with your existing code
    const updatedTasks = tasks.map(task => 
      task.id === updatedTask.id ? {
        ...updatedTask,
        id: updatedTask.id, // Explicitly assign id to satisfy TypeScript
        assigneeName: MOCK_MEMBERS.find(m => m.id === updatedTask.assigneeId)?.name || ''
      } : task
    );
    
    setTasks(updatedTasks);
    setShowTaskForm(false);
    setCurrentTask(null);
  };
  
  const handleDeleteTask = (taskId: string) => {
    // In a real app, you would send this request to your API
    const filteredTasks = tasks.filter(task => task.id !== taskId);
    setTasks(filteredTasks);
  };
  
  const handleStatusChange = (taskId: string, newStatus: string) => {
    // In a real app, you would send this request to your API
    const updatedTasks = tasks.map(task => {
      if (task.id === taskId) {
        // Ensure newStatus is properly typed 
        const status = newStatus as Task['status'];
        const updatedTask = { ...task, status };
        if (status === 'COMPLETED') {
          updatedTask.completedAt = new Date();
        } else {
          updatedTask.completedAt = undefined;
        }
        return updatedTask;
      }
      return task;
    });
    
    setTasks(updatedTasks);
  };

  return (
    <div className="container mx-auto py-6 px-4">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Household Tasks</h1>
        <button
          onClick={() => {
            setCurrentTask(null);
            setShowTaskForm(true);
          }}
          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          Create New Task
        </button>
      </div>
      
      {/* Filter Tabs */}
      <div className="mb-6">
        <div className="border-b border-gray-200 dark:border-gray-700">
          <nav className="-mb-px flex space-x-6">
            <button
              onClick={() => setFilter('ALL')}
              className={`${
                filter === 'ALL'
                  ? 'border-blue-500 text-blue-600 dark:text-blue-500'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
              } whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm`}
            >
              All Tasks
            </button>
            <button
              onClick={() => setFilter('MY_TASKS')}
              className={`${
                filter === 'MY_TASKS'
                  ? 'border-blue-500 text-blue-600 dark:text-blue-500'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
              } whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm`}
            >
              Assigned to Me
            </button>
            <button
              onClick={() => setFilter('MY_CREATED')}
              className={`${
                filter === 'MY_CREATED'
                  ? 'border-blue-500 text-blue-600 dark:text-blue-500'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
              } whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm`}
            >
              Created by Me
            </button>
            <button
              onClick={() => setFilter('PENDING')}
              className={`${
                filter === 'PENDING'
                  ? 'border-blue-500 text-blue-600 dark:text-blue-500'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
              } whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm`}
            >
              Pending
            </button>
            <button
              onClick={() => setFilter('COMPLETED')}
              className={`${
                filter === 'COMPLETED'
                  ? 'border-blue-500 text-blue-600 dark:text-blue-500'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
              } whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm`}
            >
              Completed
            </button>
          </nav>
        </div>
      </div>
      
      {/* Task List */}
      <TaskList 
        tasks={sortedTasks}
        currentUserId={currentUserId}
        onStatusChange={handleStatusChange}
        onEditTask={handleEditTask}
        onDeleteTask={handleDeleteTask}
      />
      
      {/* Task Form Modal */}
      {showTaskForm && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen px-4">
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={() => setShowTaskForm(false)} />
            
            <div className="relative bg-white dark:bg-gray-800 rounded-lg max-w-lg w-full p-6 shadow-xl">
              <div className="absolute top-0 right-0 pt-4 pr-4">
                <button
                  type="button"
                  className="bg-white dark:bg-gray-800 rounded-md text-gray-400 hover:text-gray-500 dark:hover:text-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  onClick={() => setShowTaskForm(false)}
                >
                  <span className="sr-only">Close</span>
                  <svg 
                    className="h-6 w-6" 
                    fill="none" 
                    viewBox="0 0 24 24" 
                    stroke="currentColor" 
                    aria-hidden="true"
                  >
                    <path 
                      strokeLinecap="round" 
                      strokeLinejoin="round" 
                      strokeWidth="2" 
                      d="M6 18L18 6M6 6l12 12" 
                    />
                  </svg>
                </button>
              </div>
              
              <div className="mt-3 text-center sm:mt-0 sm:text-left">
                <h3 className="text-lg font-medium leading-6 text-gray-900 dark:text-white">
                  {currentTask ? 'Edit Task' : 'Create New Task'}
                </h3>
              </div>
              
              <TaskForm
                task={currentTask}
                members={MOCK_MEMBERS}
                onSubmit={currentTask ? handleUpdateTask : handleAddTask}
                onCancel={() => {
                  setShowTaskForm(false);
                  setCurrentTask(null);
                } } householdId={''}              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
```

// Directory: app\(dashboard)\[householdId], File: page.tsx
// File Type: tsx
```tsx
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import HouseholdMembers from '@/components/dashboard/HouseholdMembers';
import { useAuth } from '@/context/AuthContext';

export default function MembersPage({ params }: { params: { householdId: string } }) {
  const { householdId } = params;
  const { user } = useAuth();
  const router = useRouter();
  
  const [members, setMembers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [userRole, setUserRole] = useState('');
  
  useEffect(() => {
    const fetchMembers = async () => {
      try {
        setLoading(true);
        const response = await fetch(`/api/households/${householdId}/members`);
        
        if (!response.ok) {
          throw new Error('Failed to fetch members');
        }
        
        const data = await response.json();
        setMembers(data);
        
        // Find current user's role
        const currentUser = data.find((member: any) => member.userId === user?.id);
        if (currentUser) {
          setUserRole(currentUser.role);
        }
      } catch (err) {
        setError('Error loading household members');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    
    if (householdId && user) {
      fetchMembers();
    }
  }, [householdId, user]);
  
  if (loading) {
    return <div>Loading...</div>;
  }
  
  if (error) {
    return <div>{error}</div>;
  }
  
  const isAdmin = userRole === 'ADMIN';
  
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold mb-6">Household Members</h1>
      
      <HouseholdMembers 
        householdId={householdId}
        members={members}
        isAdmin={isAdmin}
      />
    </div>
  );
}
```

// Directory: app\api\auth\forgot-password, File: route.ts
// File Type: ts
```typescript
// src/app/api/auth/forgot-password/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';

export async function POST(request: NextRequest) {
  try {
    const { email } = await request.json();

    // Validate input
    if (!email) {
      return NextResponse.json(
        { message: 'Email is required' },
        { status: 400 }
      );
    }

    // Use Supabase Auth's built-in password reset
    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: `${process.env.NEXT_PUBLIC_APP_URL}/reset-password`,
    });

    // For security reasons, always return a success message
    // even if the email doesn't exist in the system
    if (error && !error.message.includes('does not exist')) {
      // Log non-user existence errors, but don't expose them to the client
      console.error('Error sending password reset:', error);
    }

    return NextResponse.json(
      { message: 'If your email is registered, you will receive a password reset link shortly' },
      { status: 200 }
    );
  } catch (error) {
    console.error('Password reset error:', error);
    return NextResponse.json(
      { message: 'An error occurred while processing your request' },
      { status: 500 }
    );
  }
}
```

// Directory: app\api\auth\login, File: route.ts
// File Type: ts
```typescript
// src/app/api/auth/login/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import bcrypt from 'bcrypt';
import { cookies } from 'next/headers';

export async function POST(request: NextRequest) {
  try {
    const { email, password } = await request.json();

    // Validate input
    if (!email || !password) {
      return NextResponse.json(
        { message: 'Email and password are required' },
        { status: 400 }
      );
    }

    // Find the user by email
    const { data: user, error: userError } = await supabase
      .from('User')
      .select('id, email, name, password, avatar')
      .eq('email', email)
      .single();

    if (userError || !user) {
      return NextResponse.json(
        { message: 'Invalid email or password' },
        { status: 401 }
      );
    }

    // Verify the password
    const isPasswordValid = await bcrypt.compare(password, user.password);

    if (!isPasswordValid) {
      return NextResponse.json(
        { message: 'Invalid email or password' },
        { status: 401 }
      );
    }

    // Create a session using Supabase Auth
    const { data: session, error: sessionError } = await supabase.auth.signInWithPassword({
      email,
      password,
    });

    if (sessionError) {
      console.error('Error creating session:', sessionError);
      return NextResponse.json(
        { message: 'Authentication failed' },
        { status: 500 }
      );
    }

    // Create a response object to set cookies
    const response = NextResponse.json({
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
        avatar: user.avatar,
      },
      session: {
        expires: session.session.expires_at 
          ? new Date(session.session.expires_at * 1000).toISOString() 
          : null,
      },
    });

    // Set cookies on the response object directly
    response.cookies.set({
      name: 'sb-access-token',
      value: session.session.access_token,
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      maxAge: 60 * 60 * 24 * 7, // 1 week
      path: '/',
    });
    
    response.cookies.set({
      name: 'sb-refresh-token',
      value: session.session.refresh_token,
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      maxAge: 60 * 60 * 24 * 7, // 1 week
      path: '/',
    });

    return response;
  } catch (error) {
    console.error('Login error:', error);
    return NextResponse.json(
      { message: 'An error occurred during login' },
      { status: 500 }
    );
  }
}
```

// Directory: app\api\auth\register, File: route.ts
// File Type: ts
```typescript
// src/app/api/auth/register/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';

export async function POST(request: NextRequest) {
  try {
    const { name, email, password } = await request.json();

    // Validate input
    if (!name || !email || !password) {
      return NextResponse.json(
        { message: 'Missing required fields' },
        { status: 400 }
      );
    }

    if (password.length < 8) {
      return NextResponse.json(
        { message: 'Password must be at least 8 characters long' },
        { status: 400 }
      );
    }

    // Step 1: Create the user in Supabase Auth
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          name: name,
        }
      }
    });

    if (authError) {
      // Check if it's a duplicate email error
      if (authError.message.includes('email already')) {
        return NextResponse.json(
          { message: 'User with this email already exists' },
          { status: 409 }
        );
      }

      console.error('Error creating Supabase Auth user:', authError);
      return NextResponse.json(
        { message: 'Error registering user' },
        { status: 500 }
      );
    }

    // Make sure we have a user
    if (!authData.user) {
      return NextResponse.json(
        { message: 'Failed to create user account' },
        { status: 500 }
      );
    }

    // Step 2: Create a corresponding record in the User table
    // Use the Supabase Auth user's ID for the user record
    const userId = authData.user.id;
    
    // Let Supabase handle the timestamps by using its defaults
    const { data: newUser, error: insertError } = await supabase
      .from('User')
      .insert([
        {
          id: userId,
          name,
          email,
          password: 'SUPABASE_AUTH',
          // Don't specify createdAt and updatedAt - let Supabase handle them
        }
      ])
      .select('id, name, email, avatar, createdAt, updatedAt')
      .single();

    if (insertError) {
      console.error('Error creating user in User table:', insertError);
      console.error('Full error details:', JSON.stringify(insertError, null, 2));
      console.error('Attempted to insert user with ID:', userId);
      
      // If we failed to create the user record, clean up by deleting the auth user
      try {
        await supabase.auth.admin.deleteUser(userId);
      } catch (cleanupError) {
        console.error('Error during cleanup:', cleanupError);
      }

      return NextResponse.json(
        { message: 'Error creating user profile', details: insertError.message },
        { status: 500 }
      );
    }

    return NextResponse.json(
      {
        message: 'User registered successfully',
        user: newUser
      },
      { status: 201 }
    );
  } catch (error) {
    console.error('Registration error:', error);
    return NextResponse.json(
      { message: 'Error registering user' },
      { status: 500 }
    );
  }
}
```

// Directory: app\api\auth\reset-password, File: route.ts
// File Type: ts
```typescript
// src/app/api/auth/reset-password/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';

export async function POST(request: NextRequest) {
  try {
    const { password } = await request.json();

    // Validate input
    if (!password) {
      return NextResponse.json(
        { message: 'New password is required' },
        { status: 400 }
      );
    }

    if (password.length < 8) {
      return NextResponse.json(
        { message: 'Password must be at least 8 characters long' },
        { status: 400 }
      );
    }

    // The auth token comes from the user's session
    // When they click the password reset link in their email, Supabase Auth
    // creates a session with special privileges for password reset

    // Use Supabase Auth to update the password
    const { error } = await supabase.auth.updateUser({
      password: password
    });

    if (error) {
      console.error('Error updating password:', error);
      return NextResponse.json(
        { message: 'Failed to reset password. Your reset link may have expired.' },
        { status: 400 }
      );
    }

    // Successfully updated password
    return NextResponse.json(
      { message: 'Password reset successful' },
      { status: 200 }
    );
  } catch (error) {
    console.error('Password reset error:', error);
    return NextResponse.json(
      { message: 'An error occurred while resetting your password' },
      { status: 500 }
    );
  }
}
```

// Directory: app\api\auth\[...nextauth], File: route.ts
// File Type: ts
```typescript
// src/app/api/auth/[...nextauth]/route.ts
import { NextAuthOptions } from "next-auth";
import NextAuth from "next-auth/next";
import CredentialsProvider from "next-auth/providers/credentials";
import { supabase } from "@/lib/supabase";

// At the top of your [...nextauth]/route.ts file
console.log("NextAuth API route is being executed");
// Add custom types for NextAuth
declare module "next-auth" {
  interface User {
    id: string;
    name: string;
    email: string;
    image?: string | null;
  }
  interface Session {
    user: {
      id: string;
      name: string;
      email: string;
      image?: string | null;
    };
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    id: string;
  }
}

export const authOptions: NextAuthOptions = {
  providers: [
    CredentialsProvider({
      name: "credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" }
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          return null;
        }
        
        try {
          // Use Supabase Auth for authentication
          const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
            email: credentials.email,
            password: credentials.password,
          });

          if (authError || !authData.user) {
            console.error("Authentication error:", authError?.message);
            return null;
          }

          // Get additional user info from your User table if needed
          const { data: userData, error: userError } = await supabase
            .from('User')
            .select('id, name, email, avatar')
            .eq('id', authData.user.id)
            .single();

          if (userError) {
            console.error("User lookup error:", userError.message);
            // Still proceed with auth data if user table lookup fails
          }

          // Return the user data
          return {
            id: authData.user.id,
            email: authData.user.email || '',
            name: userData?.name || authData.user.email?.split('@')[0] || 'User',
            image: userData?.avatar || null,
          };
        } catch (error) {
          console.error("Authentication error:", error);
          return null;
        }
      }
    })
  ],
  session: {
    strategy: "jwt",
    maxAge: 30 * 24 * 60 * 60, // 30 days
  },
  callbacks: {
    async jwt({ token, user }) {
      // Add user ID to the JWT when a user signs in
      if (user) {
        token.id = user.id;
      }
      return token;
    },
    async session({ session, token }) {
      // Add user ID to the session from the token
      if (session.user) {
        session.user.id = token.id;
      }
      return session;
    }
  },
  pages: {
    signIn: "/login",
    newUser: "/register",
    error: "/login", // Custom error page, redirects to login with error param
  },
  debug: process.env.NODE_ENV === "development",
  secret: process.env.NEXTAUTH_SECRET,
};

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };
```

// Directory: app\api\debug-cookies, File: route.ts
// File Type: ts
```typescript
// src/app/api/debug-cookies/route.ts
// FOR DEBUGGING ONLY - REMOVE THIS FILE AFTER DEBUGGING
import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';

export async function GET() {
  try {
    // Properly access cookies without chaining .get()
    const cookieStore = await cookies();
    
    // Get all cookie names
    const cookieNames = cookieStore.getAll().map((cookie: { name: any; }) => cookie.name);
    
    // Look for specific Supabase-related cookies
    const authCookies = cookieStore.getAll()
      .filter((cookie: { name: string; }) => cookie.name.startsWith('sb-') || cookie.name.includes('auth'))
      .map((cookie: { name: any; value: string; }) => ({
        name: cookie.name,
        // Don't show actual value for security
        hasValue: Boolean(cookie.value),
        // Show just the first few characters for debugging
        valuePreview: cookie.value ? `${cookie.value.substring(0, 5)}...` : null
      }));
    
    return NextResponse.json({
      message: 'Cookie debug information',
      allCookieNames: cookieNames,
      authRelatedCookies: authCookies,
    });
  } catch (error) {
    console.error('Error debugging cookies:', error);
    return NextResponse.json({ error: 'Failed to debug cookies' }, { status: 500 });
  }
}
```

// Directory: app\api\expenses, File: route.ts
// File Type: ts
```typescript
// src/app/api/expenses/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

// GET /api/expenses
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // Get household ID from query params
    const { searchParams } = new URL(request.url);
    const householdId = searchParams.get('householdId');
    
    if (!householdId) {
      return NextResponse.json({ error: 'Household ID is required' }, { status: 400 });
    }
    
    // Check if user is a member of the household
    const householdUser = await prisma.householdUser.findUnique({
      where: {
        userId_householdId: {
          userId: session.user.id,
          householdId: householdId,
        },
      },
    });
    
    if (!householdUser) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    // Fetch all expenses for the household
    const expenses = await prisma.expense.findMany({
      where: {
        householdId: householdId,
      },
      include: {
        creator: {
          select: {
            id: true,
            name: true,
            email: true,
            avatar: true,
          },
        },
        splits: {
          include: {
            user: {
              select: {
                id: true,
                name: true,
                email: true,
                avatar: true,
              },
            },
          },
        },
        payments: {
          include: {
            user: {
              select: {
                id: true,
                name: true,
                email: true,
                avatar: true,
              },
            },
          },
        },
      },
      orderBy: {
        date: 'desc',
      },
    });
    
    return NextResponse.json(expenses);
  } catch (error) {
    console.error('Error fetching expenses:', error);
    return NextResponse.json({ error: 'Failed to fetch expenses' }, { status: 500 });
  }
}

// POST /api/expenses
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const data = await request.json();
    const { 
      title, 
      amount, 
      date, 
      description, 
      splitType, 
      householdId, 
      splits 
    } = data;
    
    // Validate required fields
    if (!title || !amount || !date || !splitType || !householdId || !splits || !splits.length) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }
    
    // Check if user is a member of the household
    const householdUser = await prisma.householdUser.findUnique({
      where: {
        userId_householdId: {
          userId: session.user.id,
          householdId: householdId,
        },
      },
    });
    
    if (!householdUser) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    // Create the expense with splits and payments
    const expense = await prisma.expense.create({
      data: {
        title,
        amount,
        date: new Date(date),
        description,
        splitType,
        householdId,
        creatorId: session.user.id,
        splits: {
          create: splits.map((split: any) => ({
            userId: split.userId,
            amount: split.amount,
            percentage: split.percentage || null,
          })),
        },
        payments: {
          create: splits
            .filter((split: any) => split.userId !== session.user.id) // Don't create a payment for the creator
            .map((split: any) => ({
              userId: split.userId,
              amount: split.amount,
              status: 'PENDING',
            })),
        },
      },
      include: {
        creator: {
          select: {
            id: true,
            name: true,
            email: true,
            avatar: true,
          },
        },
        splits: {
          include: {
            user: {
              select: {
                id: true,
                name: true,
                email: true,
                avatar: true,
              },
            },
          },
        },
        payments: {
          include: {
            user: {
              select: {
                id: true,
                name: true,
                email: true,
                avatar: true,
              },
            },
          },
        },
      },
    });
    
    return NextResponse.json(expense);
  } catch (error) {
    console.error('Error creating expense:', error);
    return NextResponse.json({ error: 'Failed to create expense' }, { status: 500 });
  }
}
```

// Directory: app\api\expenses\[id], File: route.ts
// File Type: ts
```typescript
// src/app/api/expenses/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

// GET /api/expenses/[id] - Get a specific expense
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const expenseId = params.id;
    
    // Get the expense
    const { data: expense, error: expenseError } = await supabase
      .from('Expense')
      .select(`
        *,
        creator:creatorId(id, name, email, avatar),
        household:householdId(id, name),
        splits:ExpenseSplit(
          *,
          user:userId(id, name, email, avatar)
        ),
        payments:Payment(
          *,
          user:userId(id, name, email, avatar)
        )
      `)
      .eq('id', expenseId)
      .single();
    
    if (expenseError || !expense) {
      console.error('Error fetching expense:', expenseError);
      return NextResponse.json({ error: 'Expense not found' }, { status: 404 });
    }
    
    // Check if the user is a member of the household that the expense belongs to
    const { data: householdUser, error: membershipError } = await supabase
      .from('HouseholdUser')
      .select('userId, householdId, role')
      .eq('userId', session.user.id)
      .eq('householdId', expense.householdId)
      .single();
    
    if (membershipError || !householdUser) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    return NextResponse.json(expense);
  } catch (error) {
    console.error('Error fetching expense:', error);
    return NextResponse.json({ error: 'Failed to fetch expense' }, { status: 500 });
  }
}

// PATCH /api/expenses/[id] - Update a specific expense
export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const expenseId = params.id;
    const data = await request.json();
    
    // Get the current expense to verify permissions
    const { data: currentExpense, error: expenseError } = await supabase
      .from('Expense')
      .select('id, creatorId, householdId')
      .eq('id', expenseId)
      .single();
    
    if (expenseError || !currentExpense) {
      return NextResponse.json({ error: 'Expense not found' }, { status: 404 });
    }
    
    // Only the creator can update the expense
    if (currentExpense.creatorId !== session.user.id) {
      return NextResponse.json({ error: 'You are not authorized to update this expense' }, { status: 403 });
    }
    
    // Check if the user is a member of the household
    const { data: householdUser, error: membershipError } = await supabase
      .from('HouseholdUser')
      .select('userId, householdId, role')
      .eq('userId', session.user.id)
      .eq('householdId', currentExpense.householdId)
      .single();
    
    if (membershipError || !householdUser) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    // Extract the basic expense fields
    const { 
      title, 
      amount, 
      date, 
      description, 
      splitType,
      splits,
      payments
    } = data;
    
    // Update the expense - Note: Supabase doesn't have built-in transactions like Prisma
    // so we'll have to handle each part separately
    
    // 1. Update the base expense
    const { error: updateError } = await supabase
      .from('Expense')
      .update({
        title,
        amount,
        date: date ? new Date(date).toISOString() : undefined,
        description,
        splitType,
        updatedAt: new Date().toISOString()
      })
      .eq('id', expenseId);
    
    if (updateError) {
      console.error('Error updating expense:', updateError);
      return NextResponse.json({ error: 'Failed to update expense' }, { status: 500 });
    }
    
    // 2. If splits are provided, update them
    if (splits && splits.length > 0) {
      // Delete existing splits
      const { error: deleteError } = await supabase
        .from('ExpenseSplit')
        .delete()
        .eq('expenseId', expenseId);
      
      if (deleteError) {
        console.error('Error deleting existing splits:', deleteError);
        return NextResponse.json({ error: 'Failed to update expense splits' }, { status: 500 });
      }
      
      // Create new splits
      const splitsData = splits.map((split: any) => ({
        expenseId,
        userId: split.userId,
        amount: split.amount,
        percentage: split.percentage || null,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }));
      
      const { error: insertError } = await supabase
        .from('ExpenseSplit')
        .insert(splitsData);
      
      if (insertError) {
        console.error('Error creating new splits:', insertError);
        return NextResponse.json({ error: 'Failed to update expense splits' }, { status: 500 });
      }
    }
    
    // 3. If payments are provided, update them
    if (payments && payments.length > 0) {
      // Handle each payment individually
      for (const payment of payments) {
        if (payment.id && payment.id !== 'new-payment') {
          // Update existing payment
          const { error: paymentUpdateError } = await supabase
            .from('Payment')
            .update({
              amount: payment.amount,
              status: payment.status,
              date: payment.status === 'COMPLETED' ? new Date().toISOString() : null,
              updatedAt: new Date().toISOString()
            })
            .eq('id', payment.id);
          
          if (paymentUpdateError) {
            console.error('Error updating payment:', paymentUpdateError);
            // Continue with other payments rather than failing the whole request
          }
        } else {
          // Create new payment
          const { error: paymentCreateError } = await supabase
            .from('Payment')
            .insert({
              expenseId,
              userId: payment.userId,
              amount: payment.amount,
              status: payment.status,
              date: payment.status === 'COMPLETED' ? new Date().toISOString() : null,
              createdAt: new Date().toISOString(),
              updatedAt: new Date().toISOString()
            });
          
          if (paymentCreateError) {
            console.error('Error creating payment:', paymentCreateError);
            // Continue with other payments rather than failing the whole request
          }
        }
      }
    }
    
    // 4. Get the updated expense with all relations
    const { data: updatedExpense, error: fetchError } = await supabase
      .from('Expense')
      .select(`
        *,
        creator:creatorId(id, name, email, avatar),
        splits:ExpenseSplit(
          *,
          user:userId(id, name, email, avatar)
        ),
        payments:Payment(
          *,
          user:userId(id, name, email, avatar)
        )
      `)
      .eq('id', expenseId)
      .single();
    
    if (fetchError) {
      console.error('Error fetching updated expense:', fetchError);
      return NextResponse.json({ error: 'Expense updated but failed to fetch updated data' }, { status: 500 });
    }
    
    return NextResponse.json(updatedExpense);
  } catch (error) {
    console.error('Error updating expense:', error);
    return NextResponse.json({ error: 'Failed to update expense' }, { status: 500 });
  }
}

// DELETE /api/expenses/[id] - Delete a specific expense
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const expenseId = params.id;
    
    // Get the current expense to verify permissions
    const { data: expense, error: expenseError } = await supabase
      .from('Expense')
      .select('id, creatorId, householdId')
      .eq('id', expenseId)
      .single();
    
    if (expenseError || !expense) {
      return NextResponse.json({ error: 'Expense not found' }, { status: 404 });
    }
    
    // Check if the user is the creator or an admin of the household
    const { data: householdUser, error: membershipError } = await supabase
      .from('HouseholdUser')
      .select('userId, householdId, role')
      .eq('userId', session.user.id)
      .eq('householdId', expense.householdId)
      .single();
    
    const isCreator = expense.creatorId === session.user.id;
    const isAdmin = householdUser?.role === 'ADMIN';
    
    if (!isCreator && !isAdmin) {
      return NextResponse.json({ error: 'You are not authorized to delete this expense' }, { status: 403 });
    }
    
    // In Supabase, we have to delete related records manually 
    // unless we've set up ON DELETE CASCADE foreign key constraints
    
    // 1. Delete related payments
    const { error: paymentsError } = await supabase
      .from('Payment')
      .delete()
      .eq('expenseId', expenseId);
    
    if (paymentsError) {
      console.error('Error deleting related payments:', paymentsError);
      // Continue anyway to try to delete the expense
    }
    
    // 2. Delete related splits
    const { error: splitsError } = await supabase
      .from('ExpenseSplit')
      .delete()
      .eq('expenseId', expenseId);
    
    if (splitsError) {
      console.error('Error deleting related splits:', splitsError);
      // Continue anyway to try to delete the expense
    }
    
    // 3. Delete the expense itself
    const { error: deleteError } = await supabase
      .from('Expense')
      .delete()
      .eq('id', expenseId);
    
    if (deleteError) {
      console.error('Error deleting expense:', deleteError);
      return NextResponse.json({ error: 'Failed to delete expense' }, { status: 500 });
    }
    
    return NextResponse.json({ message: 'Expense deleted successfully' });
  } catch (error) {
    console.error('Error deleting expense:', error);
    return NextResponse.json({ error: 'Failed to delete expense' }, { status: 500 });
  }
}
```

// Directory: app\api\households, File: route.ts
// File Type: ts
```typescript
// src/app/api/households/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

// Define types to match the actual structure returned by Supabase
interface User {
  id: string;
  name: string;
  email?: string;
  avatar?: string | null;
}

interface Household {
  id: string;
  name: string;
  address?: string | null;
  createdAt: string;
  updatedAt: string;
}

interface HouseholdUser {
  id: string;
  userId: string;
  householdId: string;
  role: 'ADMIN' | 'MEMBER' | 'GUEST';
  joinedAt: string;
  household: Household;
  user?: User;
}

interface HouseholdMember {
  id: string;
  role: 'ADMIN' | 'MEMBER' | 'GUEST';
  user: User;
}

interface CountResult {
  count: number | null;
  error: any;
}

// GET /api/households - Get all households for the current user
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // Get all households the user is a member of
    const { data: householdUsers, error: userError } = await supabase
      .from('HouseholdUser')
      .select(`
        id,
        userId,
        householdId,
        role,
        joinedAt,
        household:householdId(
          id,
          name,
          address,
          createdAt,
          updatedAt
        )
      `)
      .eq('userId', session.user.id)
      .order('joinedAt', { ascending: false });
    
    if (userError || !householdUsers) {
      console.error('Error fetching household memberships:', userError);
      return NextResponse.json({ error: 'Failed to fetch households' }, { status: 500 });
    }
    
    // Get additional data for each household
    const households = await Promise.all(householdUsers.map(async (hu: any) => {
      // Extract the household data from the nested result
      const household = hu.household as Household;
      const householdId = hu.householdId as string;
      
      // Get member count
      const memberCountResult = await supabase
        .from('HouseholdUser')
        .select('*', { count: 'exact', head: true })
        .eq('householdId', householdId);
      
      // Get counts for related entities
      const expenseCountResult = await supabase
        .from('Expense')
        .select('*', { count: 'exact', head: true })
        .eq('householdId', householdId);
      
      const taskCountResult = await supabase
        .from('Task')
        .select('*', { count: 'exact', head: true })
        .eq('householdId', householdId);
      
      const messageCountResult = await supabase
        .from('Message')
        .select('*', { count: 'exact', head: true })
        .eq('householdId', householdId);
      
      const ruleCountResult = await supabase
        .from('HouseRule')
        .select('*', { count: 'exact', head: true })
        .eq('householdId', householdId);
      
      // Get first 5 members with details
      const { data: membersData, error: memberFetchError } = await supabase
        .from('HouseholdUser')
        .select(`
          id,
          role,
          user:userId(
            id,
            name,
            avatar
          )
        `)
        .eq('householdId', householdId)
        .limit(5);
      
      if (memberFetchError) {
        console.error('Error fetching household members:', memberFetchError);
      }
      
      // Format member data carefully handling the structure
      const formattedMembers = (membersData || []).map((m: any) => {
        const user = m.user as User;
        return {
          id: user?.id,
          name: user?.name,
          avatar: user?.avatar,
          role: m.role
        };
      });
      
      // Return formatted household data
      return {
        id: household?.id,
        name: household?.name,
        address: household?.address,
        createdAt: household?.createdAt,
        updatedAt: household?.updatedAt,
        role: hu.role,
        joinedAt: hu.joinedAt,
        memberCount: memberCountResult.count || 0,
        expenseCount: expenseCountResult.count || 0,
        taskCount: taskCountResult.count || 0,
        messageCount: messageCountResult.count || 0,
        ruleCount: ruleCountResult.count || 0,
        members: formattedMembers
      };
    }));
    
    return NextResponse.json(households);
  } catch (error) {
    console.error('Error fetching households:', error);
    return NextResponse.json({ error: 'Failed to fetch households' }, { status: 500 });
  }
}

// POST /api/households - Create a new household
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const { name, address } = await request.json();
    
    // Validate input
    if (!name) {
      return NextResponse.json({ error: 'Household name is required' }, { status: 400 });
    }
    
    // Create the household
    const { data: household, error: householdError } = await supabase
      .from('Household')
      .insert([
        {
          name,
          address,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }
      ])
      .select('*')
      .single();
    
    if (householdError || !household) {
      console.error('Error creating household:', householdError);
      return NextResponse.json({ error: 'Failed to create household' }, { status: 500 });
    }
    
    // Add the current user as an admin of the household
    const { error: memberError } = await supabase
      .from('HouseholdUser')
      .insert([
        {
          userId: session.user.id,
          householdId: household.id,
          role: 'ADMIN',
          joinedAt: new Date().toISOString()
        }
      ]);
    
    if (memberError) {
      console.error('Error adding user to household:', memberError);
      
      // Try to delete the household since adding the user failed
      await supabase.from('Household').delete().eq('id', household.id);
      
      return NextResponse.json({ error: 'Failed to create household membership' }, { status: 500 });
    }
    
    // Get the full household data with the member
    const { data: fullHouseholdData, error: fetchError } = await supabase
      .from('Household')
      .select(`
        id,
        name,
        address,
        createdAt,
        updatedAt,
        members:HouseholdUser(
          id,
          role,
          joinedAt,
          user:userId(
            id,
            name,
            email,
            avatar
          )
        )
      `)
      .eq('id', household.id)
      .single();
    
    if (fetchError || !fullHouseholdData) {
      console.error('Error fetching full household data:', fetchError);
      return NextResponse.json({ 
        message: 'Household created but failed to fetch complete data',
        household: household
      }, { status: 201 });
    }
    
    return NextResponse.json(fullHouseholdData, { status: 201 });
  } catch (error) {
    console.error('Error creating household:', error);
    return NextResponse.json({ error: 'Failed to create household' }, { status: 500 });
  }
}
```

// Directory: app\api\households\[id], File: route.ts
// File Type: ts
```typescript
// src/app/api/households/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

// GET /api/households/[id] - Get a specific household
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const householdId = params.id;
    
    // Check if user is a member of the household
    const householdUser = await prisma.householdUser.findUnique({
      where: {
        userId_householdId: {
          userId: session.user.id,
          householdId: householdId,
        },
      },
    });
    
    if (!householdUser) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    // Get the household with related data
    const household = await prisma.household.findUnique({
      where: {
        id: householdId,
      },
      include: {
        members: {
          include: {
            user: {
              select: {
                id: true,
                name: true,
                email: true,
                avatar: true,
              },
            },
          },
        },
        expenses: {
          orderBy: {
            date: 'desc',
          },
          take: 5, // Only include recent expenses
        },
        tasks: {
          where: {
            status: {
              not: 'COMPLETED',
            },
          },
          orderBy: [
            {
              priority: 'desc',
            },
            {
              dueDate: 'asc',
            },
          ],
          take: 5, // Only include important pending tasks
        },
        messages: {
          orderBy: {
            createdAt: 'desc',
          },
          take: 10, // Only include recent messages
          include: {
            sender: {
              select: {
                id: true,
                name: true,
                avatar: true,
              },
            },
          },
        },
        rules: true,
      },
    });
    
    if (!household) {
      return NextResponse.json({ error: 'Household not found' }, { status: 404 });
    }
    
    return NextResponse.json(household);
  } catch (error) {
    console.error('Error fetching household:', error);
    return NextResponse.json({ error: 'Failed to fetch household' }, { status: 500 });
  }
}

// PATCH /api/households/[id] - Update a specific household
export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const householdId = params.id;
    const data = await request.json();
    
    // Check if user is an admin of the household
    const householdUser = await prisma.householdUser.findUnique({
      where: {
        userId_householdId: {
          userId: session.user.id,
          householdId: householdId,
        },
      },
    });
    
    if (!householdUser) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    if (householdUser.role !== 'ADMIN') {
      return NextResponse.json({ error: 'Only household admins can update household information' }, { status: 403 });
    }
    
    // Extract the fields we want to update
    const { name, address } = data;
    
    // Validate required fields
    if (name !== undefined && name.trim() === '') {
      return NextResponse.json({ error: 'Household name cannot be empty' }, { status: 400 });
    }
    
    // Prepare update data
    const updateData: any = {};
    if (name !== undefined) updateData.name = name;
    if (address !== undefined) updateData.address = address;
    
    // Update the household
    const updatedHousehold = await prisma.household.update({
      where: {
        id: householdId,
      },
      data: updateData,
    });
    
    return NextResponse.json(updatedHousehold);
  } catch (error) {
    console.error('Error updating household:', error);
    return NextResponse.json({ error: 'Failed to update household' }, { status: 500 });
  }
}

// DELETE /api/households/[id] - Delete a specific household
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const householdId = params.id;
    
    // Check if user is an admin of the household
    const householdUser = await prisma.householdUser.findUnique({
      where: {
        userId_householdId: {
          userId: session.user.id,
          householdId: householdId,
        },
      },
    });
    
    if (!householdUser) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    if (householdUser.role !== 'ADMIN') {
      return NextResponse.json({ error: 'Only household admins can delete a household' }, { status: 403 });
    }
    
    // Count the number of members in the household
    const membersCount = await prisma.householdUser.count({
      where: {
        householdId: householdId,
      },
    });
    
    // If there are other members, prevent deletion
    if (membersCount > 1) {
      return NextResponse.json({ 
        error: 'Cannot delete a household with active members. Remove all members first or transfer admin rights.' 
      }, { status: 400 });
    }
    
    // Delete the household - this should cascade delete all related records
    await prisma.household.delete({
      where: {
        id: householdId,
      },
    });
    
    return NextResponse.json({ message: 'Household deleted successfully' });
  } catch (error) {
    console.error('Error deleting household:', error);
    return NextResponse.json({ error: 'Failed to delete household' }, { status: 500 });
  }
}

// POST /api/households/[id]/members - Add a member to the household
export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const householdId = params.id;
    const { email, role = 'MEMBER' } = await request.json();
    
    // Check if the current user is a member and admin of the household
    const householdUser = await prisma.householdUser.findUnique({
      where: {
        userId_householdId: {
          userId: session.user.id,
          householdId: householdId,
        },
      },
    });
    
    if (!householdUser) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    if (householdUser.role !== 'ADMIN') {
      return NextResponse.json({ error: 'Only household admins can add members' }, { status: 403 });
    }
    
    // Find the user by email
    const user = await prisma.user.findUnique({
      where: {
        email,
      },
    });
    
    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }
    
    // Check if the user is already a member of the household
    const existingMember = await prisma.householdUser.findUnique({
      where: {
        userId_householdId: {
          userId: user.id,
          householdId: householdId,
        },
      },
    });
    
    if (existingMember) {
      return NextResponse.json({ error: 'User is already a member of this household' }, { status: 400 });
    }
    
    // Add the user to the household
    const newMember = await prisma.householdUser.create({
      data: {
        userId: user.id,
        householdId: householdId,
        role: role as 'ADMIN' | 'MEMBER' | 'GUEST',
      },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            email: true,
            avatar: true,
          },
        },
      },
    });
    
    // TODO: In a real app, send an invitation email or notification to the user
    
    return NextResponse.json(newMember);
  } catch (error) {
    console.error('Error adding household member:', error);
    return NextResponse.json({ error: 'Failed to add household member' }, { status: 500 });
  }
}

// Additional household member management APIs

// PATCH /api/households/[id]/members/[userId] - Update a member's role
export async function PATCH_MEMBER(
  request: NextRequest,
  { params }: { params: { id: string, userId: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const { id: householdId, userId } = params;
    const { role } = await request.json();
    
    // Check if the current user is a member and admin of the household
    const currentUserMembership = await prisma.householdUser.findUnique({
      where: {
        userId_householdId: {
          userId: session.user.id,
          householdId: householdId,
        },
      },
    });
    
    if (!currentUserMembership) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    if (currentUserMembership.role !== 'ADMIN') {
      return NextResponse.json({ error: 'Only household admins can update member roles' }, { status: 403 });
    }
    
    // Prevent changing your own role (to avoid removing the last admin)
    if (userId === session.user.id) {
      return NextResponse.json({ error: 'You cannot change your own role' }, { status: 400 });
    }
    
    // Update the member's role
    const updatedMember = await prisma.householdUser.update({
      where: {
        userId_householdId: {
          userId: userId,
          householdId: householdId,
        },
      },
      data: {
        role: role as 'ADMIN' | 'MEMBER' | 'GUEST',
      },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            email: true,
            avatar: true,
          },
        },
      },
    });
    
    return NextResponse.json(updatedMember);
  } catch (error) {
    console.error('Error updating member role:', error);
    return NextResponse.json({ error: 'Failed to update member role' }, { status: 500 });
  }
}

// DELETE /api/households/[id]/members/[userId] - Remove a member from the household
export async function DELETE_MEMBER(
  request: NextRequest,
  { params }: { params: { id: string, userId: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const { id: householdId, userId } = params;
    
    // User can remove themselves, or admins can remove others
    const isCurrentUser = userId === session.user.id;
    
    if (!isCurrentUser) {
      // Check if the current user is a member and admin of the household
      const currentUserMembership = await prisma.householdUser.findUnique({
        where: {
          userId_householdId: {
            userId: session.user.id,
            householdId: householdId,
          },
        },
      });
      
      if (!currentUserMembership) {
        return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
      }
      
      if (currentUserMembership.role !== 'ADMIN') {
        return NextResponse.json({ error: 'Only household admins can remove members' }, { status: 403 });
      }
    }
    
    // Check if the user to be removed is an admin
    const memberToRemove = await prisma.householdUser.findUnique({
      where: {
        userId_householdId: {
          userId: userId,
          householdId: householdId,
        },
      },
    });
    
    if (!memberToRemove) {
      return NextResponse.json({ error: 'Member not found in the household' }, { status: 404 });
    }
    
    // If removing an admin, check if they're the last admin
    if (memberToRemove.role === 'ADMIN') {
      const adminCount = await prisma.householdUser.count({
        where: {
          householdId: householdId,
          role: 'ADMIN',
        },
      });
      
      if (adminCount <= 1) {
        return NextResponse.json({ 
          error: 'Cannot remove the last admin. Assign another admin first.' 
        }, { status: 400 });
      }
    }
    
    // Remove the household member
    await prisma.householdUser.delete({
      where: {
        userId_householdId: {
          userId: userId,
          householdId: householdId,
        },
      },
    });
    
    return NextResponse.json({ message: 'Member removed successfully' });
  } catch (error) {
    console.error('Error removing household member:', error);
    return NextResponse.json({ error: 'Failed to remove household member' }, { status: 500 });
  }
}
```

// Directory: app\api\households\[id]\members, File: route.ts
// File Type: ts
```typescript
// src/app/api/households/[id]/members/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';

// Define interfaces for our data structures
interface UserData {
    id: string;
    name: string;
    email: string;
    avatar: string | null;
    createdAt: string;
  }
  
  interface HouseholdMember {
    id: string;
    userId: string;
    role: string;
    joinedAt: string;
    user: UserData;
  }
  
  interface FormattedMember {
    id: string;
    userId: string;
    role: string;
    joinedAt: string;
    name: string;
    email: string;
    avatar: string | null;
    createdAt: string;
  }

// GET /api/households/[id]/members - Get all members of a household
export async function GET(
    request: NextRequest,
    { params }: { params: { id: string } }
  ) {
    try {
      // Create a Supabase client with the user's session
      const supabaseAuth = createServerComponentClient({ cookies });
      
      // Get the current user's session
      const { data: { session } } = await supabaseAuth.auth.getSession();
      
      if (!session) {
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
      }
      
      const householdId = params.id;
      
      // Check if the user is a member of this household
      const { data: membership, error: membershipError } = await supabase
        .from('HouseholdUser')
        .select('userId, role')
        .eq('userId', session.user.id)
        .eq('householdId', householdId)
        .single();
      
      if (membershipError || !membership) {
        return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
      }
      
      // Get all members of the household with their user details
      const { data, error: membersError } = await supabase
        .from('HouseholdUser')
        .select(`
          id,
          userId,
          role,
          joinedAt,
          user:userId(
            id,
            name,
            email,
            avatar,
            createdAt
          )
        `)
        .eq('householdId', householdId)
        .order('joinedAt', { ascending: false });
      
      if (membersError) {
        console.error('Error fetching household members:', membersError);
        return NextResponse.json({ error: 'Failed to fetch household members' }, { status: 500 });
      }
      
      // Format the member data for response
      const formattedMembers: FormattedMember[] = [];
      
      // Process each member individually to avoid TypeScript errors
      if (data && Array.isArray(data)) {
        for (const member of data) {
          // Check if member and member.user exist
          if (member && member.user) {
            const userData = member.user as unknown as UserData;
            
            formattedMembers.push({
              id: member.id,
              userId: member.userId,
              role: member.role,
              joinedAt: member.joinedAt,
              name: userData.name,
              email: userData.email,
              avatar: userData.avatar,
              createdAt: userData.createdAt
            });
          }
        }
      }
      
      return NextResponse.json(formattedMembers);
    } catch (error) {
      console.error('Error fetching household members:', error);
      return NextResponse.json({ error: 'Failed to fetch household members' }, { status: 500 });
    }
  }

// POST /api/households/[id]/members - Add a member to the household
export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    // Create a Supabase client with the user's session
    const supabaseAuth = createServerComponentClient({ cookies });
    
    // Get the current user's session
    const { data: { session } } = await supabaseAuth.auth.getSession();
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const householdId = params.id;
    const { email, role = 'MEMBER' } = await request.json();
    
    // Check if the current user is a member and admin of the household
    const { data: currentMembership, error: membershipError } = await supabase
      .from('HouseholdUser')
      .select('userId, role')
      .eq('userId', session.user.id)
      .eq('householdId', householdId)
      .single();
    
    if (membershipError || !currentMembership) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    if (currentMembership.role !== 'ADMIN') {
      return NextResponse.json({ error: 'Only household admins can add members' }, { status: 403 });
    }
    
    // Find the user by email
    const { data: user, error: userError } = await supabase
      .from('User')
      .select('id, name, email')
      .eq('email', email)
      .single();
    
    if (userError || !user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }
    
    // Check if the user is already a member of the household
    const { data: existingMember, error: existingError } = await supabase
      .from('HouseholdUser')
      .select('id')
      .eq('userId', user.id)
      .eq('householdId', householdId)
      .single();
    
    if (existingMember) {
      return NextResponse.json({ error: 'User is already a member of this household' }, { status: 400 });
    }
    
    // Add the user to the household
    const { data: newMember, error: addError } = await supabase
      .from('HouseholdUser')
      .insert([
        {
          userId: user.id,
          householdId: householdId,
          role: role as 'ADMIN' | 'MEMBER' | 'GUEST',
          joinedAt: new Date().toISOString()
        }
      ])
      .select(`
        id,
        userId,
        householdId,
        role,
        joinedAt,
        user:userId(
          id,
          name,
          email,
          avatar
        )
      `)
      .single();
    
    if (addError) {
      console.error('Error adding member to household:', addError);
      return NextResponse.json({ error: 'Failed to add member to household' }, { status: 500 });
    }
    
    // Format the response
    const formattedMember = {
      id: newMember.id,
      userId: newMember.userId,
      householdId: newMember.householdId,
      role: newMember.role,
      joinedAt: newMember.joinedAt,
      user: newMember.user
    };
    
    return NextResponse.json(formattedMember, { status: 201 });
  } catch (error) {
    console.error('Error adding household member:', error);
    return NextResponse.json({ error: 'Failed to add household member' }, { status: 500 });
  }
}

// Instead of importing from separate files, define the handlers here
// PATCH /api/households/[id]/members/[userId] - Update a member's role
export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string; userId: string } }
) {
  try {
    // Create a Supabase client with the user's session
    const supabaseAuth = createServerComponentClient({ cookies });
    
    // Get the current user's session
    const { data: { session } } = await supabaseAuth.auth.getSession();
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const { id: householdId, userId } = params;
    const { role } = await request.json();
    
    // Check if the current user is a member and admin of the household
    const { data: currentMembership, error: membershipError } = await supabase
      .from('HouseholdUser')
      .select('userId, role')
      .eq('userId', session.user.id)
      .eq('householdId', householdId)
      .single();
    
    if (membershipError || !currentMembership) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    if (currentMembership.role !== 'ADMIN') {
      return NextResponse.json({ error: 'Only household admins can update member roles' }, { status: 403 });
    }
    
    // Prevent changing your own role (to avoid removing the last admin)
    if (userId === session.user.id) {
      return NextResponse.json({ error: 'You cannot change your own role' }, { status: 400 });
    }
    
    // Update the member's role
    const { data: updatedMember, error: updateError } = await supabase
      .from('HouseholdUser')
      .update({ role: role as 'ADMIN' | 'MEMBER' | 'GUEST' })
      .eq('userId', userId)
      .eq('householdId', householdId)
      .select(`
        id,
        userId,
        householdId,
        role,
        joinedAt,
        user:userId(
          id,
          name,
          email,
          avatar
        )
      `)
      .single();
    
    if (updateError) {
      console.error('Error updating member role:', updateError);
      return NextResponse.json({ error: 'Failed to update member role' }, { status: 500 });
    }
    
    return NextResponse.json(updatedMember);
  } catch (error) {
    console.error('Error updating member role:', error);
    return NextResponse.json({ error: 'Failed to update member role' }, { status: 500 });
  }
}

// DELETE /api/households/[id]/members/[userId] - Remove a member from the household
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string; userId: string } }
) {
  try {
    // Create a Supabase client with the user's session
    const supabaseAuth = createServerComponentClient({ cookies });
    
    // Get the current user's session
    const { data: { session } } = await supabaseAuth.auth.getSession();
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const { id: householdId, userId } = params;
    
    // User can remove themselves, or admins can remove others
    const isCurrentUser = userId === session.user.id;
    
    if (!isCurrentUser) {
      // Check if the current user is a member and admin of the household
      const { data: currentMembership, error: membershipError } = await supabase
        .from('HouseholdUser')
        .select('userId, role')
        .eq('userId', session.user.id)
        .eq('householdId', householdId)
        .single();
      
      if (membershipError || !currentMembership) {
        return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
      }
      
      if (currentMembership.role !== 'ADMIN') {
        return NextResponse.json({ error: 'Only household admins can remove members' }, { status: 403 });
      }
    }
    
    // Check if the user to be removed is an admin
    const { data: memberToRemove, error: memberError } = await supabase
      .from('HouseholdUser')
      .select('userId, role')
      .eq('userId', userId)
      .eq('householdId', householdId)
      .single();
    
    if (memberError || !memberToRemove) {
      return NextResponse.json({ error: 'Member not found in the household' }, { status: 404 });
    }
    
    // If removing an admin, check if they're the last admin
    if (memberToRemove.role === 'ADMIN') {
      const { count: adminCount } = await supabase
        .from('HouseholdUser')
        .select('id', { count: 'exact', head: true })
        .eq('householdId', householdId)
        .eq('role', 'ADMIN');
      
      if (adminCount !== null && adminCount <= 1) {
        return NextResponse.json({ 
          error: 'Cannot remove the last admin. Assign another admin first.' 
        }, { status: 400 });
      }
    }
    
    // Remove the household member
    const { error: deleteError } = await supabase
      .from('HouseholdUser')
      .delete()
      .eq('userId', userId)
      .eq('householdId', householdId);
    
    if (deleteError) {
      console.error('Error removing household member:', deleteError);
      return NextResponse.json({ error: 'Failed to remove household member' }, { status: 500 });
    }
    
    return NextResponse.json({ 
      message: 'Member removed successfully',
      removed: {
        userId,
        householdId
      }
    });
  } catch (error) {
    console.error('Error removing household member:', error);
    return NextResponse.json({ error: 'Failed to remove household member' }, { status: 500 });
  }
}
```

// Directory: app\api\invitations, File: index.ts
// File Type: ts
```typescript
// This file is meant to replace a possible existing file in the Pages Router
// src/pages/api/invitations/index.ts or src/pages/api/invitations.ts

import { NextApiRequest, NextApiResponse } from 'next';
import { createServerSupabaseClient } from '@supabase/auth-helpers-nextjs';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // Create authenticated Supabase client
  const supabase = createServerSupabaseClient({ req, res });
  
  // Get user from session
  const { data: { session }, error: sessionError } = await supabase.auth.getSession();
  
  // Check if user is authenticated
  if (sessionError || !session) {
    return res.status(401).json({ error: 'Unauthorized' });
  }
  
  // Handle different HTTP methods
  if (req.method === 'GET') {
    try {
      // Get invitations for the current user
      const { data: invitations, error } = await supabase
        .from('Invitation')
        .select(`
          id,
          email,
          householdId,
          role,
          status,
          createdAt,
          household:householdId(
            id,
            name,
            address
          ),
          inviter:inviterId(
            id,
            name,
            email
          )
        `)
        .eq('email', session.user.email)
        .order('createdAt', { ascending: false });
      
      if (error) {
        return res.status(500).json({ error: 'Failed to fetch invitations' });
      }
      
      return res.status(200).json(invitations || []);
    } catch (error) {
      return res.status(500).json({ error: 'An unexpected error occurred' });
    }
  } else if (req.method === 'POST') {
    try {
      const { email, householdId, role = 'MEMBER', message } = req.body;
      
      // Validate input
      if (!email || !householdId) {
        return res.status(400).json({ error: 'Email and household ID are required' });
      }
      
      // Check if the user is a member and admin of the household
      const { data: membership, error: membershipError } = await supabase
        .from('HouseholdUser')
        .select('userId, role')
        .eq('userId', session.user.id)
        .eq('householdId', householdId)
        .single();
      
      if (membershipError || !membership) {
        return res.status(403).json({ error: 'You are not a member of this household' });
      }
      
      if (membership.role !== 'ADMIN') {
        return res.status(403).json({ error: 'Only household admins can send invitations' });
      }
      
      // Check if an invitation already exists
      const { data: existingInvitation, error: invitationError } = await supabase
        .from('Invitation')
        .select('id, status')
        .eq('email', email)
        .eq('householdId', householdId)
        .maybeSingle();
      
      if (existingInvitation && existingInvitation.status === 'PENDING') {
        return res.status(400).json({ 
          error: 'An invitation has already been sent to this email' 
        });
      }
      
      // Create the invitation
      const { data: invitation, error: createError } = await supabase
        .from('Invitation')
        .insert([
          {
            email,
            householdId,
            inviterId: session.user.id,
            role,
            status: 'PENDING',
            message,
            createdAt: new Date().toISOString()
          }
        ])
        .select()
        .single();
      
      if (createError) {
        return res.status(500).json({ error: 'Failed to create invitation' });
      }
      
      return res.status(201).json(invitation);
    } catch (error) {
      return res.status(500).json({ error: 'An unexpected error occurred' });
    }
  } else {
    // Method not allowed
    res.setHeader('Allow', ['GET', 'POST']);
    return res.status(405).json({ error: `Method ${req.method} Not Allowed` });
  }
}
```

// Directory: app\api\invitations, File: InvitationForm.tsx
// File Type: tsx
```tsx
// src/components/invitations/InvitationForm.tsx
'use client';

import { useState } from 'react';
import Button from '@/components/ui/Button';

interface InvitationFormProps {
  householdId: string;
  onInviteSent?: () => void;
  onCancel?: () => void;
}

export default function InvitationForm({ 
  householdId, 
  onInviteSent, 
  onCancel 
}: InvitationFormProps) {
  const [email, setEmail] = useState('');
  const [role, setRole] = useState<'ADMIN' | 'MEMBER' | 'GUEST'>('MEMBER');
  const [message, setMessage] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [invitationLink, setInvitationLink] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError('');
    setSuccess('');
    setInvitationLink('');

    try {
      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        setError('Please enter a valid email address');
        setIsSubmitting(false);
        return;
      }

      // Call API to send invitation
      const response = await fetch('/api/invitations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email,
          householdId,
          role,
          message: message.trim() || undefined,
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to send invitation');
      }

      // Show success message
      setSuccess(`Invitation sent to ${email}`);
      
      // Store the invitation link to display to the user
      if (data.invitation?.invitationLink) {
        setInvitationLink(data.invitation.invitationLink);
      }
      
      // Reset form
      setEmail('');
      setRole('MEMBER');
      setMessage('');
      
      // Notify parent component
      if (onInviteSent) {
        onInviteSent();
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {error && (
        <div className="p-3 bg-red-50 dark:bg-red-900 text-red-700 dark:text-red-300 rounded-md">
          {error}
        </div>
      )}
      
      {success && (
        <div className="p-3 bg-green-50 dark:bg-green-900 text-green-700 dark:text-green-300 rounded-md">
          {success}
          
          {invitationLink && (
            <div className="mt-2">
              <p className="text-sm font-medium">Invitation Link:</p>
              <div className="mt-1 flex">
                <input
                  type="text"
                  readOnly
                  value={invitationLink}
                  className="flex-1 p-2 text-sm bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-l-md"
                />
                <button
                  type="button"
                  onClick={() => {
                    navigator.clipboard.writeText(invitationLink);
                    alert('Link copied to clipboard!');
                  }}
                  className="px-3 py-2 text-sm bg-blue-600 text-white rounded-r-md hover:bg-blue-700"
                >
                  Copy
                </button>
              </div>
              <p className="mt-1 text-xs">
                Share this link with your roommate to join your household.
              </p>
            </div>
          )}
        </div>
      )}
      
      <div>
        <label 
          htmlFor="email" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Email Address
        </label>
        <input
          id="email"
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="Enter your roommate's email"
          required
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
      </div>
      
      <div>
        <label 
          htmlFor="role" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Role
        </label>
        <select
          id="role"
          value={role}
          onChange={(e) => setRole(e.target.value as 'ADMIN' | 'MEMBER' | 'GUEST')}
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        >
          <option value="ADMIN">Admin (Full access)</option>
          <option value="MEMBER">Member (Standard access)</option>
          <option value="GUEST">Guest (Limited access)</option>
        </select>
        <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
          {role === 'ADMIN' && 'Admins can manage household settings, members, and all features.'}
          {role === 'MEMBER' && 'Members can create expenses, tasks, and participate in all activities.'}
          {role === 'GUEST' && 'Guests can view and participate in activities but cannot modify household settings.'}
        </p>
      </div>
      
      <div>
        <label 
          htmlFor="message" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Personal Message (Optional)
        </label>
        <textarea
          id="message"
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          placeholder="Add a personal message to your invitation..."
          rows={3}
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
      </div>
      
      <div className="flex justify-end space-x-3 pt-3">
        {onCancel && (
          <Button 
            type="button"
            variant="outline"
            onClick={onCancel}
          >
            Cancel
          </Button>
        )}
        
        <Button
          type="submit"
          variant="primary"
          isLoading={isSubmitting}
          disabled={isSubmitting}
        >
          {isSubmitting ? 'Sending...' : 'Send Invitation'}
        </Button>
      </div>
    </form>
  );
}
```

// Directory: app\api\invitations, File: route.ts
// File Type: ts
```typescript
// src/app/api/invitations/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { randomBytes } from 'crypto';
import { generateUUID } from '@/lib/utils';
import { sendInvitationEmail } from '@/lib/email';

// Generate a secure random token
function generateToken(length: number = 32): string {
  return randomBytes(length).toString('hex');
}

// GET /api/invitations - Get all invitations for the current user or for a household
export async function GET(request: NextRequest) {
  console.log('[Invitations API] GET request received');
  
  try {
    // Log request details
    console.log('[Invitations API] Request path:', request.nextUrl.pathname);
    console.log('[Invitations API] Request method:', request.method);
    
    // Get Next-Auth session for authentication
    const session = await getServerSession(authOptions);
    
    if (!session || !session.user) {
      console.log('[Invitations API] No active session found');
      return NextResponse.json({ error: 'Unauthorized - please log in' }, { status: 401 });
    }
    
    // Create a Supabase client for database operations only
    let supabase;
    try {
      console.log('[Invitations API] Initializing Supabase client');
      const cookieStore = cookies();
      supabase = createRouteHandlerClient({ cookies: () => cookieStore });
      console.log('[Invitations API] Supabase client created successfully');
    } catch (clientError) {
      console.error('[Invitations API] Failed to create Supabase client:', clientError);
      return NextResponse.json({ 
        error: 'Failed to initialize client',
        details: clientError instanceof Error ? clientError.message : 'Unknown client error'
      }, { status: 500 });
    }
    
    // Log successful authentication from Next-Auth
    console.log('[Invitations API] User authenticated successfully with Next-Auth');
    console.log('[Invitations API] User email:', session.user.email);
    
    // Get query parameters
    const { searchParams } = new URL(request.url);
    const householdId = searchParams.get('householdId');
    const status = searchParams.get('status') || 'PENDING'; // Default to pending invitations
    const tokenParam = searchParams.get('token');
    
    // If token is provided, get invitation by token
    if (tokenParam) {
      console.log('[Invitations API] Token provided, looking up invitation by token');
      try {
        const { data: invitation, error } = await supabase
          .from('Invitation')
          .select(`
            id, 
            email, 
            householdId, 
            role, 
            status, 
            expiresAt,
            createdAt,
            message,
            household:householdId(id, name, address),
            inviter:inviterId(id, name, email, avatar)
          `)
          .eq('token', tokenParam)
          .single();
        
        if (error) {
          console.error('[Invitations API] Error looking up invitation:', error);
          console.error('[Invitations API] Error details:', error.message);
          return NextResponse.json({ error: 'Invalid or expired invitation token' }, { status: 404 });
        }
        
        if (!invitation) {
          console.log('[Invitations API] No invitation found with token');
          return NextResponse.json({ error: 'Invalid or expired invitation token' }, { status: 404 });
        }
        
        console.log('[Invitations API] Found invitation:', invitation.id);
        console.log('[Invitations API] Invitation status:', invitation.status);
        
        // Check if the invitation has expired
        const now = new Date();
        const expiry = new Date(invitation.expiresAt);
        console.log('[Invitations API] Current time:', now.toISOString());
        console.log('[Invitations API] Invitation expires:', expiry.toISOString());
        console.log('[Invitations API] Is expired:', expiry < now);
        
        if (expiry < now) {
          console.log('[Invitations API] Invitation has expired');
          
          // Auto-update status to EXPIRED
          await supabase
            .from('Invitation')
            .update({ 
              status: 'EXPIRED', 
              updatedAt: now.toISOString()
            })
            .eq('id', invitation.id);
            
          return NextResponse.json({ error: 'Invitation has expired' }, { status: 410 });
        }
        
        // Check if the invitation has already been used or cancelled
        if (invitation.status !== 'PENDING') {
          console.log('[Invitations API] Invitation is not pending - status:', invitation.status);
          return NextResponse.json({ 
            error: `Invitation is no longer valid (status: ${invitation.status})` 
          }, { status: 410 });
        }
        
        // Return the invitation details (without sensitive info like the token)
        console.log('[Invitations API] Returning valid invitation data');
        return NextResponse.json({
          id: invitation.id,
          email: invitation.email,
          householdId: invitation.householdId,
          role: invitation.role,
          status: invitation.status,
          expiresAt: invitation.expiresAt,
          message: invitation.message,
          createdAt: invitation.createdAt,
          household: invitation.household,
          inviter: invitation.inviter
        });
      } catch (error) {
        console.error('[Invitations API] Error validating invitation:', error);
        return NextResponse.json({ error: 'Error validating invitation' }, { status: 500 });
      }
    }
    
    console.log('[Invitations API] Fetching invitations list');
    
    let query = supabase
      .from('Invitation')
      .select(`
        *,
        household:householdId(*),
        inviter:inviterId(id, name, email, avatar)
      `);
    
    if (householdId) {
      // Get invitations for a specific household - requires admin permission
      console.log('[Invitations API] Fetching invitations for household:', householdId);
      
      // First check if user exists in the database by email
      console.log('[Invitations API] Looking up user ID by email:', session.user.email);
      const { data: userData, error: userError } = await supabase
        .from('User')
        .select('id')
        .eq('email', session.user.email)
        .single();
      
      if (userError || !userData) {
        console.error('[Invitations API] Error finding user by email:', userError);
        return NextResponse.json({ error: 'User account not found' }, { status: 403 });
      }
      
      console.log('[Invitations API] Found user ID in database:', userData.id);
      
      // Then check if user is admin of this household using the database user ID
      const { data: householdRole, error: roleError } = await supabase
        .from('HouseholdUser')
        .select('role')
        .eq('userId', userData.id)
        .eq('householdId', householdId)
        .single();
      
      if (roleError || (householdRole?.role !== 'ADMIN')) {
        console.log('[Invitations API] User is not an admin of this household');
        return NextResponse.json({ error: 'You must be a household admin to view these invitations' }, { status: 403 });
      }
      
      console.log('[Invitations API] User confirmed as household admin');
      
      // Get invitations for the household
      query = query
        .eq('householdId', householdId)
        .eq('status', status);
    } else {
      // Get invitations for the current user
      console.log('[Invitations API] Fetching invitations for current user email:', session.user.email);
      query = query
        .eq('email', session.user.email || '')
        .eq('status', status);
    }
    
    const { data, error } = await query;
    
    if (error) {
      console.error('[Invitations API] Error fetching invitations:', error);
      return NextResponse.json({ error: 'Failed to fetch invitations' }, { status: 500 });
    }
    
    console.log('[Invitations API] Successfully fetched invitations, count:', data?.length || 0);
    return NextResponse.json(data || []);
  } catch (error) {
    console.error('[Invitations API] Unexpected error in GET handler:', error);
    return NextResponse.json({ 
      error: 'Internal server error',
      message: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

// POST /api/invitations - Create a new invitation
export async function POST(request: NextRequest) {
  console.log('[Invitations API] POST request received');
  
  try {
    // Get Next-Auth session for authentication
    console.log('[Invitations API] Getting Next-Auth session');
    const session = await getServerSession(authOptions);
    
    if (!session || !session.user) {
      console.log('[Invitations API] No active Next-Auth session found');
      return NextResponse.json({ error: 'Unauthorized - please log in' }, { status: 401 });
    }
    
    // Log successful authentication from Next-Auth
    console.log('[Invitations API] User authenticated successfully with Next-Auth:', session.user.id);
    console.log('[Invitations API] User email:', session.user.email);
    
    // Create Supabase client for database operations
    let supabase;
    try {
      console.log('[Invitations API] Initializing Supabase client');
      const cookieStore = cookies();
      supabase = createRouteHandlerClient({ cookies: () => cookieStore });
      console.log('[Invitations API] Supabase client created successfully');
    } catch (clientError) {
      console.error('[Invitations API] Failed to create Supabase client:', clientError);
      return NextResponse.json({ 
        error: 'Failed to initialize database client',
        details: clientError instanceof Error ? clientError.message : 'Unknown client error'
      }, { status: 500 });
    }
    
    // Get the invitation data from the request
    let invitationData;
    try {
      console.log('[Invitations API] Parsing request body');
      invitationData = await request.json();
      console.log('[Invitations API] Request payload:', JSON.stringify(invitationData));
    } catch (parseError) {
      console.error('[Invitations API] Error parsing request body:', parseError);
      return NextResponse.json({ error: 'Invalid request body' }, { status: 400 });
    }
    
    const { 
      email, 
      householdId, 
      role = 'MEMBER', 
      message = '',
      expirationDays = 7
    } = invitationData;
    
    // Validate required fields with logging
    console.log('[Invitations API] Validating request data');
    console.log('[Invitations API] Email provided:', !!email);
    console.log('[Invitations API] HouseholdId provided:', !!householdId);
    
    if (!email || !householdId) {
      console.log('[Invitations API] Validation failed: Missing required fields');
      return NextResponse.json({ error: 'Missing required fields: email and householdId are required' }, { status: 400 });
    }
    
    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      console.log('[Invitations API] Validation failed: Invalid email format');
      return NextResponse.json({ error: 'Invalid email format' }, { status: 400 });
    }
    
    // Validate role
    const validRoles = ['ADMIN', 'MEMBER', 'GUEST'];
    if (!validRoles.includes(role)) {
      console.log('[Invitations API] Validation failed: Invalid role');
      return NextResponse.json({ error: 'Invalid role. Must be one of: ADMIN, MEMBER, GUEST' }, { status: 400 });
    }
    
    console.log('[Invitations API] Checking if user is household admin');
    
    // First look up the user by email to get the correct database ID
    console.log('[Invitations API] Looking up user ID by email:', session.user.email);
    const { data: userData, error: userError } = await supabase
      .from('User')
      .select('id, name')
      .eq('email', session.user.email)
      .single();
      
    if (userError || !userData) {
      console.error('[Invitations API] Error finding user by email:', userError);
      return NextResponse.json({ error: 'User account not found' }, { status: 403 });
    }
    
    console.log('[Invitations API] Found user ID in database:', userData.id);
    
    // Check if the user is a member and admin of the household
    try {
      const { data: currentMembership, error: membershipError } = await supabase
        .from('HouseholdUser')
        .select('userId, role')
        .eq('userId', userData.id) // Use the database ID instead of session.user.id
        .eq('householdId', householdId)
        .single();
      
      if (membershipError) {
        console.error('[Invitations API] Error checking membership:', membershipError);
        console.error('[Invitations API] Error details:', membershipError.message);
        return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
      }
      
      console.log('[Invitations API] User role in household:', currentMembership.role);
      
      if (currentMembership.role !== 'ADMIN') {
        console.log('[Invitations API] Permission denied: User is not an admin');
        return NextResponse.json({ error: 'Only household admins can invite members' }, { status: 403 });
      }
      
      console.log('[Invitations API] User is confirmed as household admin');
    } catch (membershipCheckError) {
      console.error('[Invitations API] Error in membership check:', membershipCheckError);
      return NextResponse.json({ error: 'Error checking household membership' }, { status: 500 });
    }
    
    // Check if there's already a pending invitation for this email and household
    console.log('[Invitations API] Checking for existing invitation');
    try {
      const { data: existingInvitation, error: checkError } = await supabase
        .from('Invitation')
        .select('id, status')
        .eq('email', email)
        .eq('householdId', householdId)
        .eq('status', 'PENDING')
        .maybeSingle();
      
      if (checkError) {
        console.error('[Invitations API] Error checking existing invitations:', checkError);
      }
      
      if (existingInvitation) {
        console.log('[Invitations API] Found existing invitation:', existingInvitation.id);
        return NextResponse.json({ 
          error: 'An invitation has already been sent to this email for this household',
          invitationId: existingInvitation.id
        }, { status: 409 });
      }
      
      console.log('[Invitations API] No existing invitation found');
    } catch (checkError) {
      console.error('[Invitations API] Error checking existing invitation:', checkError);
      return NextResponse.json({ error: 'Error checking for existing invitations' }, { status: 500 });
    }
    
    // Check if the user is already a member of the household
    console.log('[Invitations API] Checking if email is already a household member');
    try {
      const { data: existingMember, error: memberError } = await supabase
        .from('User')
        .select('id')
        .eq('email', email)
        .single();
      
      if (existingMember && !memberError) {
        console.log('[Invitations API] Found existing user with this email:', existingMember.id);
        
        const { data: householdUser, error: householdUserError } = await supabase
          .from('HouseholdUser')
          .select('id')
          .eq('userId', existingMember.id)
          .eq('householdId', householdId)
          .maybeSingle();
        
        if (householdUser) {
          console.log('[Invitations API] User is already a member of this household');
          return NextResponse.json({ error: 'This user is already a member of the household' }, { status: 409 });
        }
        
        console.log('[Invitations API] User exists but is not a member of this household');
      } else {
        console.log('[Invitations API] No existing user found with this email');
      }
    } catch (memberCheckError) {
      console.error('[Invitations API] Error checking user membership:', memberCheckError);
      // Continue anyway - this is not a critical error
    }
    
    // All validations passed, create the invitation
    console.log('[Invitations API] All validations passed, creating invitation');
    
    // Generate a unique ID for the invitation
    const inviteId = generateUUID();
    console.log('[Invitations API] Generated invitation ID:', inviteId);
    
    // Generate a secure token for the invitation
    const token = generateToken();
    console.log('[Invitations API] Generated token (first 8 chars):', token.substring(0, 8));
    
    // Calculate expiration date
    const now = new Date();
    const expiresAt = new Date(now);
    expiresAt.setDate(now.getDate() + expirationDays);
    console.log('[Invitations API] Setting expiration date:', expiresAt.toISOString());
    
    // Create the invitation record
    console.log('[Invitations API] Inserting invitation record into database');
    try {
      const { data: invitation, error: inviteError } = await supabase
        .from('Invitation')
        .insert([
          {
            id: inviteId,
            email,
            householdId,
            inviterId: userData.id, // Use the database user ID here too
            role,
            status: 'PENDING',
            message: message || null,
            token,
            expiresAt: expiresAt.toISOString(),
            createdAt: now.toISOString(),
            updatedAt: now.toISOString()
          }
        ])
        .select('id, email, householdId, role, status, expiresAt, createdAt')
        .single();
      
      if (inviteError) {
        console.error('[Invitations API] Error creating invitation:', inviteError);
        console.error('[Invitations API] Error details:', inviteError.message, inviteError.code);
        return NextResponse.json({ error: 'Failed to create invitation' }, { status: 500 });
      }
      
      console.log('[Invitations API] Invitation created successfully:', invitation.id);
      
      // Generate invitation link
      const baseUrl = process.env.NEXT_PUBLIC_APP_URL || `${request.nextUrl.protocol}//${request.nextUrl.host}`;
      const invitationLink = `${baseUrl}/invite?token=${token}`;
      console.log('[Invitations API] Generated invitation link:', invitationLink);
      
      // Get household information for the email
      const { data: household, error: householdError } = await supabase
        .from('Household')
        .select('name')
        .eq('id', householdId)
        .single();
      
      if (householdError) {
        console.error('[Invitations API] Error fetching household info:', householdError);
      }
      
      // Send invitation email
      try {
        console.log('[Invitations API] Sending invitation email to:', email);
        
        const emailSent = await sendInvitationEmail({
          to: email,
          inviterName: userData.name || session.user.name || session.user.email || 'A user',
          householdName: household?.name || 'a household',
          invitationLink,
          role,
          message: message || undefined
        });
        
        console.log('[Invitations API] Email sent:', emailSent);
        
        // Return response with the invitation link included
        return NextResponse.json({
          ...invitation,
          invitationLink,
          message: 'Invitation created successfully',
          emailSent
        }, { status: 201 });
      } catch (emailError) {
        console.error('[Invitations API] Error sending email:', emailError);
        
        // Still return success, but note that email failed
        return NextResponse.json({
          ...invitation,
          invitationLink,
          message: 'Invitation created successfully, but failed to send email notification',
          emailSent: false
        }, { status: 201 });
      }
    } catch (dbError) {
      console.error('[Invitations API] Database error creating invitation:', dbError);
      return NextResponse.json({ error: 'Database error' }, { status: 500 });
    }
  } catch (error) {
    console.error('[Invitations API] Unexpected error:', error);
    return NextResponse.json({ 
      error: 'Internal server error',
      message: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

// PATCH /api/invitations/[id] - Update an invitation status (accept or decline)
export async function PATCH(request: NextRequest) {
  console.log('[Invitations API] PATCH request received');
  
  try {
    // Extract invitation ID from URL
    const url = new URL(request.url);
    const pathParts = url.pathname.split('/');
    const invitationId = pathParts[pathParts.length - 1];
    
    if (!invitationId || pathParts[pathParts.length - 2] !== 'invitations') {
      console.log('[Invitations API] Error: Invalid URL format, expected /api/invitations/{id}');
      return NextResponse.json({ error: 'Invalid URL format' }, { status: 400 });
    }
    
    console.log('[Invitations API] Processing invitation ID:', invitationId);
    
    // Get Next-Auth session for authentication
    const session = await getServerSession(authOptions);
    
    if (!session || !session.user) {
      console.log('[Invitations API] No active Next-Auth session found');
      return NextResponse.json({ error: 'Unauthorized - please log in' }, { status: 401 });
    }
    
    // Create Supabase client for database operations
    let supabase;
    try {
      console.log('[Invitations API] Initializing Supabase client');
      const cookieStore = cookies();
      supabase = createRouteHandlerClient({ cookies: () => cookieStore });
      console.log('[Invitations API] Supabase client created successfully');
    } catch (clientError) {
      console.error('[Invitations API] Failed to create Supabase client:', clientError);
      return NextResponse.json({ 
        error: 'Failed to initialize client',
        details: clientError instanceof Error ? clientError.message : 'Unknown client error'
      }, { status: 500 });
    }
    
    // Get the request body
    let requestData;
    try {
      requestData = await request.json();
      console.log('[Invitations API] Request payload:', JSON.stringify(requestData));
    } catch (parseError) {
      console.error('[Invitations API] Error parsing request body:', parseError);
      return NextResponse.json({ error: 'Invalid request body' }, { status: 400 });
    }
    
    const { status } = requestData;
    
    // Validate the status
    if (!status || !['ACCEPTED', 'DECLINED'].includes(status)) {
      console.log('[Invitations API] Invalid status value:', status);
      return NextResponse.json({ error: 'Invalid status value. Must be ACCEPTED or DECLINED' }, { status: 400 });
    }
    
    // Get the invitation
    console.log('[Invitations API] Fetching invitation details');
    try {
      const { data: invitation, error: fetchError } = await supabase
        .from('Invitation')
        .select('*')
        .eq('id', invitationId)
        .single();
      
      if (fetchError || !invitation) {
        console.error('[Invitations API] Error fetching invitation:', fetchError);
        return NextResponse.json({ error: 'Invitation not found' }, { status: 404 });
      }
      
      console.log('[Invitations API] Found invitation:', invitation.id);
      console.log('[Invitations API] Invitation email:', invitation.email);
      
      // Check if the user is the recipient
      if (invitation.email !== session.user.email) {
        console.log('[Invitations API] Email mismatch - access denied');
        console.log('[Invitations API] Invitation email:', invitation.email);
        console.log('[Invitations API] User email:', session.user.email);
        return NextResponse.json({ error: 'You can only respond to invitations sent to you' }, { status: 403 });
      }
      
      // Check if the invitation is still pending
      if (invitation.status !== 'PENDING') {
        console.log('[Invitations API] Invitation is not pending - status:', invitation.status);
        return NextResponse.json({ error: 'This invitation has already been processed' }, { status: 400 });
      }
      
      // Check if the invitation has expired
      const now = new Date();
      const expiry = new Date(invitation.expiresAt);
      if (expiry < now) {
        console.log('[Invitations API] Invitation has expired');
        return NextResponse.json({ error: 'This invitation has expired' }, { status: 400 });
      }
      
      // Update the invitation status
      console.log('[Invitations API] Updating invitation status to:', status);
      const { data: updatedInvitation, error: updateError } = await supabase
        .from('Invitation')
        .update({ 
          status, 
          updatedAt: new Date().toISOString(),
          respondedAt: new Date().toISOString()
        })
        .eq('id', invitationId)
        .select()
        .single();
      
      if (updateError) {
        console.error('[Invitations API] Error updating invitation:', updateError);
        return NextResponse.json({ error: 'Failed to update invitation' }, { status: 500 });
      }
      
      // If accepted, add the user to the household
      if (status === 'ACCEPTED') {
        console.log('[Invitations API] Invitation accepted, adding user to household');
        
        // First get or create the user record in the database
        let userDbId;
        
        // Check if the user already exists in the database
        const { data: existingUser, error: userError } = await supabase
          .from('User')
          .select('id')
          .eq('email', session.user.email)
          .single();
          
        if (userError || !existingUser) {
          // Create a new user if not found
          console.log('[Invitations API] User not found in database, creating new record');
          const { data: newUser, error: createError } = await supabase
            .from('User')
            .insert([
              {
                id: session.user.id,
                email: session.user.email,
                name: session.user.name || session.user.email?.split('@')[0] || 'User',
                password: 'MANAGED_BY_SUPABASE_AUTH',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
              }
            ])
            .select('id')
            .single();
            
          if (createError || !newUser) {
            console.error('[Invitations API] Error creating user record:', createError);
            return NextResponse.json({ error: 'Failed to create user record' }, { status: 500 });
          }
          
          userDbId = newUser.id;
        } else {
          userDbId = existingUser.id;
        }
        
        console.log('[Invitations API] Using user ID for household membership:', userDbId);
        
        // Add the user to the household
        const membershipId = generateUUID();
        console.log('[Invitations API] Generated membership ID:', membershipId);
        
        const { error: memberError } = await supabase
          .from('HouseholdUser')
          .insert([
            {
              id: membershipId,
              userId: userDbId,
              householdId: invitation.householdId,
              role: invitation.role,
              joinedAt: new Date().toISOString()
            }
          ]);
        
        if (memberError) {
          console.error('[Invitations API] Error adding user to household:', memberError);
          
          // Check if it's a duplicate error (user is already a member)
          if (memberError.code === '23505') { // Unique constraint violation
            console.log('[Invitations API] User is already a member of this household');
            return NextResponse.json({ 
              warning: 'You are already a member of this household',
              invitation: updatedInvitation
            });
          }
          
          return NextResponse.json({ error: 'Failed to add user to household' }, { status: 500 });
        }
        
        // Get household details to include in response
        const { data: household } = await supabase
          .from('Household')
          .select('name')
          .eq('id', invitation.householdId)
          .single();
        
        console.log('[Invitations API] User successfully added to household');
        
        return NextResponse.json({
          message: `Invitation accepted successfully`,
          invitation: updatedInvitation,
          household: household || { name: 'Household' },
          redirectTo: `/dashboard/${invitation.householdId}`
        });
      }
      
      return NextResponse.json({
        message: `Invitation ${status.toLowerCase()} successfully`,
        invitation: updatedInvitation
      });
    } catch (error) {
      console.error('[Invitations API] Error processing invitation update:', error);
      return NextResponse.json({ error: 'Error processing invitation' }, { status: 500 });
    }
  } catch (error) {
    console.error('[Invitations API] Unexpected error in PATCH handler:', error);
    return NextResponse.json({ 
      error: 'Internal server error',
      message: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

// GET /api/invitations/count - Get pending invitations count
export async function GET_COUNT(request: NextRequest) {
  try {
    // Get Next-Auth session for authentication
    const session = await getServerSession(authOptions);
    
    if (!session || !session.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // Create Supabase client
    const cookieStore = cookies();
    const supabase = createRouteHandlerClient({ cookies: () => cookieStore });
    
    // Get the count of pending invitations for the user
    const { count, error } = await supabase
      .from('Invitation')
      .select('*', { count: 'exact', head: true })
      .eq('email', session.user.email)
      .eq('status', 'PENDING');
    
    if (error) {
      console.error('Error fetching invitation count:', error);
      return NextResponse.json({ error: 'Failed to fetch invitation count' }, { status: 500 });
    }
    
    return NextResponse.json({ count: count || 0 });
  } catch (error) {
    console.error('Error in invitation count API:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// PUT endpoint to accept an invitation with token
export async function PUT(request: NextRequest) {
  console.log('[Invitations API] PUT request received');
  
  try {
    // Log request details
    console.log('[Invitations API] Request path:', request.nextUrl.pathname);
    console.log('[Invitations API] Request method:', request.method);
    
    // Extract token from URL query
    const { searchParams } = new URL(request.url);
    const tokenParam = searchParams.get('token');
    console.log('[Invitations API] Token provided:', !!tokenParam);
    
    if (!tokenParam) {
      console.log('[Invitations API] Error: Missing invitation token');
      return NextResponse.json({ error: 'Missing invitation token' }, { status: 400 });
    }
    
    // Get Next-Auth session for authentication
    const session = await getServerSession(authOptions);
    
    if (!session || !session.user) {
      console.log('[Invitations API] No active Next-Auth session found');
      return NextResponse.json({ error: 'Unauthorized - please log in' }, { status: 401 });
    }
    
    // Create Supabase client for database operations
    let supabase;
    try {
      console.log('[Invitations API] Initializing Supabase client');
      const cookieStore = cookies();
      supabase = createRouteHandlerClient({ cookies: () => cookieStore });
      console.log('[Invitations API] Supabase client created successfully');
    } catch (clientError) {
      console.error('[Invitations API] Failed to create Supabase client:', clientError);
      return NextResponse.json({ 
        error: 'Failed to initialize client',
        details: clientError instanceof Error ? clientError.message : 'Unknown client error'
      }, { status: 500 });
    }
    
    // Log successful authentication
    console.log('[Invitations API] User authenticated successfully with Next-Auth:', session.user.id);
    console.log('[Invitations API] User email:', session.user.email);
    
    // Find the invitation by token
    console.log('[Invitations API] Looking up invitation by token');
    try {
      const { data: invitation, error: fetchError } = await supabase
        .from('Invitation')
        .select('*')
        .eq('token', tokenParam)
        .single();
      
      if (fetchError || !invitation) {
        console.error('[Invitations API] Error fetching invitation:', fetchError);
        return NextResponse.json({ error: 'Invalid or expired invitation token' }, { status: 404 });
      }
      
      console.log('[Invitations API] Found invitation:', invitation.id);
      console.log('[Invitations API] Invitation status:', invitation.status);
      console.log('[Invitations API] Invitation email:', invitation.email);
      console.log('[Invitations API] Invitation household:', invitation.householdId);
      
      // Check if the invitation has expired
      const now = new Date();
      const expiry = new Date(invitation.expiresAt);
      console.log('[Invitations API] Current time:', now.toISOString());
      console.log('[Invitations API] Invitation expires:', expiry.toISOString());
      console.log('[Invitations API] Is expired:', expiry < now);
      
      if (expiry < now) {
        console.log('[Invitations API] Invitation has expired');
        
        // Update status to EXPIRED
        await supabase
          .from('Invitation')
          .update({ 
            status: 'EXPIRED', 
            updatedAt: now.toISOString()
          })
          .eq('id', invitation.id);
          
        return NextResponse.json({ error: 'Invitation has expired' }, { status: 410 });
      }
      
      // Check if the invitation has already been used or cancelled
      if (invitation.status !== 'PENDING') {
        console.log('[Invitations API] Invitation is not pending - status:', invitation.status);
        return NextResponse.json({ 
          error: `Invitation is no longer valid (status: ${invitation.status})` 
        }, { status: 410 });
      }
      
      // Check if the user's email matches the invitation email
      // Get the request body to see if we're trying to accept with a different email
      let claimWithCurrentEmail = false;
      try {
        const requestBody = await request.json();
        claimWithCurrentEmail = !!requestBody.claimWithCurrentEmail;
      } catch (e) {
        // No body or invalid JSON, so no claim requested
      }
      
      const userEmail = session.user.email || '';
      if (invitation.email.toLowerCase() !== userEmail.toLowerCase() && !claimWithCurrentEmail) {
        console.log('[Invitations API] Email mismatch - access denied');
        console.log('[Invitations API] Invitation email:', invitation.email);
        console.log('[Invitations API] User email:', userEmail);
        return NextResponse.json({ 
          error: 'This invitation was sent to a different email address',
          emailMismatch: true,
          invitationEmail: invitation.email,
          currentEmail: userEmail
        }, { status: 403 });
      }
      
      // Find or create user record
      let userDbId;
      
      // Check if the user already exists in the database
      const { data: existingUser, error: userError } = await supabase
        .from('User')
        .select('id')
        .eq('email', session.user.email)
        .single();
        
      if (userError || !existingUser) {
        // Create a new user if not found
        console.log('[Invitations API] User not found in database, creating new record');
        const { data: newUser, error: createError } = await supabase
          .from('User')
          .insert([
            {
              id: session.user.id,
              email: session.user.email,
              name: session.user.name || session.user.email?.split('@')[0] || 'User',
              password: 'MANAGED_BY_SUPABASE_AUTH',
              createdAt: new Date().toISOString(),
              updatedAt: new Date().toISOString()
            }
          ])
          .select('id')
          .single();
          
        if (createError || !newUser) {
          console.error('[Invitations API] Error creating user record:', createError);
          return NextResponse.json({ error: 'Failed to create user record' }, { status: 500 });
        }
        
        userDbId = newUser.id;
      } else {
        userDbId = existingUser.id;
      }
      
      console.log('[Invitations API] User database ID:', userDbId);
      
      // Try to get any existing household membership
      const { data: existingMembership, error: membershipError } = await supabase
        .from('HouseholdUser')
        .select('id, role')
        .eq('userId', userDbId)
        .eq('householdId', invitation.householdId)
        .maybeSingle();
      
      if (existingMembership) {
        console.log('[Invitations API] User is already a member of this household');
        
        // Update the invitation status to ACCEPTED since we're effectively accepting it
        const { error: updateError } = await supabase
          .from('Invitation')
          .update({ 
            status: 'ACCEPTED', 
            updatedAt: now.toISOString(),
            respondedAt: now.toISOString(),
            notes: claimWithCurrentEmail ? `Claimed by ${session.user.email} (original recipient: ${invitation.email})` : undefined
          })
          .eq('id', invitation.id);
        
        if (updateError) {
          console.error('[Invitations API] Error updating invitation status:', updateError);
        }
        
        return NextResponse.json({ 
          message: 'You are already a member of this household',
          role: existingMembership.role,
          householdId: invitation.householdId,
          redirectTo: `/dashboard/${invitation.householdId}`
        });
      }
      
      // Accept the invitation by updating status
      console.log('[Invitations API] Accepting invitation');
      const { error: updateError } = await supabase
        .from('Invitation')
        .update({ 
          status: 'ACCEPTED', 
          updatedAt: now.toISOString(),
          respondedAt: now.toISOString(),
          notes: claimWithCurrentEmail ? `Claimed by ${session.user.email} (original recipient: ${invitation.email})` : undefined
        })
        .eq('id', invitation.id);
      
      if (updateError) {
        console.error('[Invitations API] Error updating invitation status:', updateError);
        return NextResponse.json({ error: 'Failed to accept invitation' }, { status: 500 });
      }
      
      // Add the user to the household
      console.log('[Invitations API] Adding user to household');
      const membershipId = generateUUID();
      console.log('[Invitations API] Generated membership ID:', membershipId);
      
      const { error: addError } = await supabase
        .from('HouseholdUser')
        .insert([
          {
            id: membershipId,
            userId: userDbId,
            householdId: invitation.householdId,
            role: invitation.role,
            joinedAt: now.toISOString()
          }
        ]);
      
      if (addError) {
        console.error('[Invitations API] Error adding user to household:', addError);
        return NextResponse.json({ error: 'Failed to add you to the household' }, { status: 500 });
      }
      
      // Get household details to include in response
      const { data: household, error: householdError } = await supabase
        .from('Household')
        .select('name')
        .eq('id', invitation.householdId)
        .single();
      
      console.log('[Invitations API] Successfully joined household');
      
      // Return success response
      return NextResponse.json({
        message: 'You have successfully joined the household',
        householdId: invitation.householdId,
        householdName: household?.name || 'Household',
        role: invitation.role,
        joinedAt: now.toISOString(),
        redirectTo: `/dashboard/${invitation.householdId}`
      });
    } catch (error) {
      console.error('[Invitations API] Error processing invitation acceptance:', error);
      return NextResponse.json({ 
        error: 'Error processing invitation',
        details: error instanceof Error ? error.message : 'Unknown error'
      }, { status: 500 });
    }
  } catch (error) {
    console.error('[Invitations API] Unexpected error in PUT handler:', error);
    return NextResponse.json({ 
      error: 'Internal server error',
      message: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}
```

// Directory: app\api\invitations\count, File: route.ts
// File Type: ts
```typescript
import { NextRequest, NextResponse } from 'next/server';
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';

export async function GET(request: NextRequest) {
  try {
    // Create a Supabase client with the user's session
    const supabase = createServerComponentClient({ cookies });
    
    // Get the current user's session
    const { data: { session } } = await supabase.auth.getSession();
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // Get the count of pending invitations for the user
    const { count, error } = await supabase
      .from('Invitation')
      .select('*', { count: 'exact', head: true })
      .eq('email', session.user.email)
      .eq('status', 'PENDING');
    
    if (error) {
      console.error('Error fetching invitation count:', error);
      return NextResponse.json({ error: 'Failed to fetch invitation count' }, { status: 500 });
    }
    
    return NextResponse.json({ count: count || 0 });
  } catch (error) {
    console.error('Error in invitation count API:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}
```

// Directory: app\api\invitations\[token], File: route.ts
// File Type: ts
```typescript
// src/app/api/invitations/[token]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { supabaseClient } from '@/lib/supabase';
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { generateUUID } from '@/lib/utils';

// GET /api/invitations/[token] - Get invitation details by token
export async function GET(
  request: NextRequest,
  { params }: { params: { token: string } }
) {
  try {
    // Access token parameter - params is now awaited by Next.js internally
    const token = params.token;
    
    if (!token) {
      return NextResponse.json({ error: 'Invalid token' }, { status: 400 });
    }
    
    // Get the invitation by token
    const { data: invitation, error: invitationError } = await supabaseClient
      .from('Invitation')
      .select(`
        id,
        email,
        householdId,
        inviterId,
        role,
        status,
        message,
        expiresAt,
        createdAt,
        household:householdId(id, name, address),
        inviter:inviterId(id, name, email, avatar)
      `)
      .eq('token', token)
      .single();
    
    if (invitationError || !invitation) {
      return NextResponse.json({ error: 'Invitation not found' }, { status: 404 });
    }
    
    // Check if the invitation has expired
    if (new Date(invitation.expiresAt) < new Date()) {
      // Update the invitation status to EXPIRED
      await supabaseClient
        .from('Invitation')
        .update({ status: 'EXPIRED', updatedAt: new Date().toISOString() })
        .eq('id', invitation.id);
      
      return NextResponse.json({ error: 'This invitation has expired' }, { status: 400 });
    }
    
    // Check if the invitation has already been used
    if (invitation.status !== 'PENDING') {
      return NextResponse.json({ 
        error: `This invitation has already been ${invitation.status.toLowerCase()}` 
      }, { status: 400 });
    }
    
    // Return the invitation details (without the token for security)
    return NextResponse.json({
      id: invitation.id,
      email: invitation.email,
      role: invitation.role,
      message: invitation.message,
      expiresAt: invitation.expiresAt,
      createdAt: invitation.createdAt,
      household: invitation.household,
      inviter: invitation.inviter
    });
  } catch (error) {
    console.error('Error fetching invitation:', error);
    return NextResponse.json({ error: 'Failed to fetch invitation' }, { status: 500 });
  }
}

// POST /api/invitations/[token] - Accept or decline an invitation
export async function POST(
  request: NextRequest,
  { params }: { params: { token: string } }
) {
  try {
    // Get auth session if the user is logged in
    // Fix: Properly pass cookies to createServerComponentClient
    const cookieStore = cookies();
    const supabaseAuth = createServerComponentClient({ 
      cookies: () => cookieStore 
    });
    
    const { data: { session } } = await supabaseAuth.auth.getSession();
    
    // Access token parameter - already awaited by Next.js internally
    const token = params.token;
    
    if (!token) {
      return NextResponse.json({ error: 'Invalid token' }, { status: 400 });
    }
    
    const { action, claimWithCurrentEmail = false } = await request.json();
    
    if (!action || !['accept', 'decline'].includes(action)) {
      return NextResponse.json({ error: 'Invalid action' }, { status: 400 });
    }
    
    // Get the invitation by token
    const { data: invitation, error: invitationError } = await supabaseClient
      .from('Invitation')
      .select(`
        id,
        email,
        householdId,
        role,
        status,
        expiresAt
      `)
      .eq('token', token)
      .single();
    
    if (invitationError || !invitation) {
      return NextResponse.json({ error: 'Invitation not found' }, { status: 404 });
    }
    
    // Check if the invitation has expired
    if (new Date(invitation.expiresAt) < new Date()) {
      // Update the invitation status to EXPIRED
      await supabaseClient
        .from('Invitation')
        .update({ status: 'EXPIRED', updatedAt: new Date().toISOString() })
        .eq('id', invitation.id);
      
      return NextResponse.json({ error: 'This invitation has expired' }, { status: 400 });
    }
    
    // Check if the invitation has already been used
    if (invitation.status !== 'PENDING') {
      return NextResponse.json({ 
        error: `This invitation has already been ${invitation.status.toLowerCase()}` 
      }, { status: 400 });
    }
    
    // Handle the invitation action
    if (action === 'decline') {
      // Update the invitation status to DECLINED
      await supabaseClient
        .from('Invitation')
        .update({ status: 'DECLINED', updatedAt: new Date().toISOString() })
        .eq('id', invitation.id);
      
      return NextResponse.json({ message: 'Invitation declined successfully' });
    }
    
    // If accepting the invitation
    
    // Check if the user is authenticated
    if (!session) {
      // Return a special response indicating the user needs to authenticate
      return NextResponse.json({ 
        requiresAuth: true,
        email: invitation.email 
      }, { status: 401 });
    }
    
    // Check if the authenticated user's email matches the invitation email
    // or if they explicitly want to claim it with their current email
    if (session.user.email !== invitation.email && !claimWithCurrentEmail) {
      return NextResponse.json({ 
        error: 'This invitation was sent to a different email address' 
      }, { status: 403 });
    }
    
    // Check if the user is already a member of the household
    const { data: existingMember, error: memberError } = await supabaseClient
      .from('HouseholdUser')
      .select('id')
      .eq('userId', session.user.id)
      .eq('householdId', invitation.householdId)
      .single();
    
    if (!memberError && existingMember) {
      // Update the invitation status to ACCEPTED
      await supabaseClient
        .from('Invitation')
        .update({ status: 'ACCEPTED', updatedAt: new Date().toISOString() })
        .eq('id', invitation.id);
      
      return NextResponse.json({ 
        message: 'You are already a member of this household',
        redirectTo: '/dashboard'
      });
    }
    
    // If accepting with a different email, add a note to the invitation record
    if (claimWithCurrentEmail && session.user.email !== invitation.email) {
      await supabaseClient
        .from('Invitation')
        .update({ 
          status: 'ACCEPTED', 
          updatedAt: new Date().toISOString(),
          respondedAt: new Date().toISOString(),
          notes: `Claimed by ${session.user.email} (original recipient: ${invitation.email})`
        })
        .eq('id', invitation.id);
    } else {
      await supabaseClient
        .from('Invitation')
        .update({ 
          status: 'ACCEPTED', 
          updatedAt: new Date().toISOString(),
          respondedAt: new Date().toISOString()
        })
        .eq('id', invitation.id);
    }
    
    // Add the user to the household
    const membershipId = generateUUID();
    const { error: joinError } = await supabaseClient
      .from('HouseholdUser')
      .insert([
        {
          id: membershipId,
          userId: session.user.id,
          householdId: invitation.householdId,
          role: invitation.role,
          joinedAt: new Date().toISOString()
        }
      ]);
    
    if (joinError) {
      console.error('Error adding user to household:', joinError);
      return NextResponse.json({ error: 'Failed to join household' }, { status: 500 });
    }
    
    return NextResponse.json({ 
      message: 'Successfully joined the household',
      redirectTo: '/dashboard'
    });
  } catch (error) {
    console.error('Error processing invitation:', error);
    return NextResponse.json({ error: 'Failed to process invitation' }, { status: 500 });
  }
}
```

// Directory: app\api\payments, File: route.ts
// File Type: ts
```typescript
// src/app/api/payments/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

// GET /api/payments - Get all payments for a user
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // Get query parameters
    const { searchParams } = new URL(request.url);
    const status = searchParams.get('status');
    const householdId = searchParams.get('householdId');
    const expenseId = searchParams.get('expenseId');
    
    // Build query filters
    const filters: any = {
      userId: session.user.id,
    };
    
    // Add optional filters
    if (status) {
      filters.status = status;
    }
    
    if (expenseId) {
      filters.expenseId = expenseId;
    }
    
    if (householdId) {
      filters.expense = {
        householdId: householdId,
      };
    }
    
    // Get payments for the current user
    const payments = await prisma.payment.findMany({
      where: filters,
      include: {
        expense: {
          include: {
            creator: {
              select: {
                id: true,
                name: true,
                email: true,
                avatar: true,
              },
            },
            household: {
              select: {
                id: true,
                name: true,
              },
            },
          },
        },
        user: {
          select: {
            id: true,
            name: true,
            email: true,
            avatar: true,
          },
        },
      },
      orderBy: [
        {
          status: 'asc', // PENDING first, then COMPLETED, then DECLINED
        },
        {
          createdAt: 'desc',
        },
      ],
    });
    
    return NextResponse.json(payments);
  } catch (error) {
    console.error('Error fetching payments:', error);
    return NextResponse.json({ error: 'Failed to fetch payments' }, { status: 500 });
  }
}

// POST /api/payments - Create a new payment
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const { expenseId, userId, amount, status = 'PENDING' } = await request.json();
    
    // Validate required fields
    if (!expenseId || !userId || amount === undefined) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }
    
    // Check if the expense exists and get the household info
    const expense = await prisma.expense.findUnique({
      where: {
        id: expenseId,
      },
      include: {
        household: {
          include: {
            members: {
              where: {
                userId: session.user.id,
              },
            },
          },
        },
      },
    });
    
    if (!expense) {
      return NextResponse.json({ error: 'Expense not found' }, { status: 404 });
    }
    
    // Check if the user is a member of the household that the expense belongs to
    if (expense.household.members.length === 0) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    // Only the expense creator or an admin can create payments for others
    const isCreator = expense.creatorId === session.user.id;
    const isAdmin = expense.household.members[0].role === 'ADMIN';
    
    if (!isCreator && !isAdmin && userId !== session.user.id) {
      return NextResponse.json({ 
        error: 'You can only create payments for yourself unless you are the expense creator or an admin' 
      }, { status: 403 });
    }
    
    // Check if a payment already exists for this user and expense
    const existingPayment = await prisma.payment.findFirst({
      where: {
        expenseId,
        userId,
      },
    });
    
    if (existingPayment) {
      return NextResponse.json({ 
        error: 'A payment for this expense and user already exists' 
      }, { status: 400 });
    }
    
    // Create the payment
    const payment = await prisma.payment.create({
      data: {
        expenseId,
        userId,
        amount,
        status,
        date: status === 'COMPLETED' ? new Date() : null,
      },
      include: {
        expense: {
          include: {
            creator: {
              select: {
                id: true,
                name: true,
                avatar: true,
              },
            },
          },
        },
        user: {
          select: {
            id: true,
            name: true,
            avatar: true,
          },
        },
      },
    });
    
    return NextResponse.json(payment, { status: 201 });
  } catch (error) {
    console.error('Error creating payment:', error);
    return NextResponse.json({ error: 'Failed to create payment' }, { status: 500 });
  }
}
```

// Directory: app\api\payments\[id], File: route.ts
// File Type: ts
```typescript
// src/app/api/payments/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

// GET /api/payments/[id] - Get a specific payment
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const paymentId = params.id;
    
    // Get the payment with related data
    const payment = await prisma.payment.findUnique({
      where: {
        id: paymentId,
      },
      include: {
        expense: {
          include: {
            creator: {
              select: {
                id: true,
                name: true,
                email: true,
                avatar: true,
              },
            },
            household: {
              select: {
                id: true,
                name: true,
                members: {
                  where: {
                    userId: session.user.id,
                  },
                },
              },
            },
          },
        },
        user: {
          select: {
            id: true,
            name: true,
            email: true,
            avatar: true,
          },
        },
      },
    });
    
    if (!payment) {
      return NextResponse.json({ error: 'Payment not found' }, { status: 404 });
    }
    
    // Check if the user is a member of the household that the payment belongs to
    if (payment.expense.household.members.length === 0) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    return NextResponse.json(payment);
  } catch (error) {
    console.error('Error fetching payment:', error);
    return NextResponse.json({ error: 'Failed to fetch payment' }, { status: 500 });
  }
}

// PATCH /api/payments/[id] - Update payment status
export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const paymentId = params.id;
    const { status } = await request.json();
    
    // Validate status
    if (!status || !['PENDING', 'COMPLETED', 'DECLINED'].includes(status)) {
      return NextResponse.json({ error: 'Invalid status value' }, { status: 400 });
    }
    
    // Get the payment to check permissions
    const payment = await prisma.payment.findUnique({
      where: {
        id: paymentId,
      },
      include: {
        expense: {
          include: {
            creator: {
              select: {
                id: true,
              },
            },
            household: {
              include: {
                members: {
                  where: {
                    userId: session.user.id,
                  },
                },
              },
            },
          },
        },
      },
    });
    
    if (!payment) {
      return NextResponse.json({ error: 'Payment not found' }, { status: 404 });
    }
    
    // Check if the user is a member of the household
    if (payment.expense.household.members.length === 0) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    // Determine who is allowed to update this payment
    const isPaymentUser = payment.userId === session.user.id;
    const isExpenseCreator = payment.expense.creatorId === session.user.id;
    const isAdmin = payment.expense.household.members[0]?.role === 'ADMIN';
    
    // Payment user can update their own payment
    // Expense creator can update payments for their expense
    // Admins can update any payment in their household
    if (!isPaymentUser && !isExpenseCreator && !isAdmin) {
      return NextResponse.json({ 
        error: 'You are not authorized to update this payment' 
      }, { status: 403 });
    }
    
    // If user is marking their own payment as COMPLETED, additional validation
    if (isPaymentUser && status === 'COMPLETED' && !isExpenseCreator && !isAdmin) {
      // In a real app, you might want to add payment verification logic here
      // For example, check if they've uploaded proof of payment or connected to a payment processor
    }
    
    // Update the payment
    const updatedPayment = await prisma.payment.update({
      where: {
        id: paymentId,
      },
      data: {
        status,
        date: status === 'COMPLETED' ? new Date() : null,
      },
      include: {
        expense: {
          include: {
            creator: {
              select: {
                id: true,
                name: true,
                email: true,
                avatar: true,
              },
            },
          },
        },
        user: {
          select: {
            id: true,
            name: true,
            email: true,
            avatar: true,
          },
        },
      },
    });
    
    return NextResponse.json(updatedPayment);
  } catch (error) {
    console.error('Error updating payment:', error);
    return NextResponse.json({ error: 'Failed to update payment' }, { status: 500 });
  }
}

// DELETE /api/payments/[id] - Delete a payment
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const paymentId = params.id;
    
    // Get the payment to check permissions
    const payment = await prisma.payment.findUnique({
      where: {
        id: paymentId,
      },
      include: {
        expense: {
          include: {
            creator: {
              select: {
                id: true,
              },
            },
            household: {
              include: {
                members: {
                  where: {
                    userId: session.user.id,
                  },
                },
              },
            },
          },
        },
      },
    });
    
    if (!payment) {
      return NextResponse.json({ error: 'Payment not found' }, { status: 404 });
    }
    
    // Check if the user is a member of the household
    if (payment.expense.household.members.length === 0) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    // Only expense creator or admin can delete a payment
    const isExpenseCreator = payment.expense.creatorId === session.user.id;
    const isAdmin = payment.expense.household.members[0]?.role === 'ADMIN';
    
    if (!isExpenseCreator && !isAdmin) {
      return NextResponse.json({ 
        error: 'Only the expense creator or a household admin can delete a payment' 
      }, { status: 403 });
    }
    
    // Prevent deleting COMPLETED payments in a real system
    // For demo purposes, we'll allow it with a warning
    if (payment.status === 'COMPLETED') {
      // In a real app, you might want to prevent this or add an audit log
      console.warn('Deleting a COMPLETED payment! This should be carefully audited.');
    }
    
    // Delete the payment
    await prisma.payment.delete({
      where: {
        id: paymentId,
      },
    });
    
    return NextResponse.json({ message: 'Payment deleted successfully' });
  } catch (error) {
    console.error('Error deleting payment:', error);
    return NextResponse.json({ error: 'Failed to delete payment' }, { status: 500 });
  }
}

// POST /api/payments/[id]/remind - Send a reminder for a pending payment
export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // Check if the route is for a reminder
    const pathname = request.nextUrl.pathname;
    if (!pathname.endsWith('/remind')) {
      return NextResponse.json({ error: 'Method not allowed' }, { status: 405 });
    }
    
    const paymentId = params.id;
    
    // Get the payment to check permissions
    const payment = await prisma.payment.findUnique({
      where: {
        id: paymentId,
      },
      include: {
        expense: {
          include: {
            creator: {
              select: {
                id: true,
                name: true,
                email: true,
              },
            },
            household: {
              include: {
                members: {
                  where: {
                    userId: session.user.id,
                  },
                },
              },
            },
          },
        },
        user: {
          select: {
            id: true,
            name: true,
            email: true,
          },
        },
      },
    });
    
    if (!payment) {
      return NextResponse.json({ error: 'Payment not found' }, { status: 404 });
    }
    
    // Check if the user is a member of the household
    if (payment.expense.household.members.length === 0) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    // Only expense creator or admin can send reminders
    const isExpenseCreator = payment.expense.creatorId === session.user.id;
    const isAdmin = payment.expense.household.members[0]?.role === 'ADMIN';
    
    if (!isExpenseCreator && !isAdmin) {
      return NextResponse.json({ 
        error: 'Only the expense creator or a household admin can send payment reminders' 
      }, { status: 403 });
    }
    
    // Check if the payment is still pending
    if (payment.status !== 'PENDING') {
      return NextResponse.json({ 
        error: 'Cannot send a reminder for a non-pending payment' 
      }, { status: 400 });
    }
    
    // In a real app, you would send an email or notification here
    
    // Instead of tracking lastReminderSent (which isn't in our schema),
    // we'll simply touch the payment record to update its updatedAt timestamp
    const updatedPayment = await prisma.payment.update({
      where: {
        id: paymentId,
      },
      data: {
        // Just update the existing record to modify the updatedAt timestamp
        // We could add a proper lastReminderSent field to the schema in a real app
        status: payment.status, // Set to its current value (no change)
      },
    });
    
    // Here you would integrate with your email service or notification system
    // For example:
    // await sendPaymentReminder({
    //   to: payment.user.email,
    //   name: payment.user.name,
    //   amount: payment.amount,
    //   expenseTitle: payment.expense.title,
    //   expenseCreator: payment.expense.creator.name,
    // });
    
    // Create a reminder activity or event record (in a real app)
    // await prisma.activityLog.create({
    //   data: {
    //     type: 'PAYMENT_REMINDER',
    //     userId: session.user.id,
    //     targetUserId: payment.userId,
    //     householdId: payment.expense.householdId,
    //     paymentId: payment.id,
    //     expenseId: payment.expenseId,
    //   }
    // });
    
    return NextResponse.json({ 
      message: 'Payment reminder sent successfully',
      reminderSent: updatedPayment.updatedAt,
    });
  } catch (error) {
    console.error('Error sending payment reminder:', error);
    return NextResponse.json({ error: 'Failed to send payment reminder' }, { status: 500 });
  }
}
```

// Directory: app\api\tasks, File: route.ts
// File Type: ts
```typescript
// src/app/api/tasks/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

// GET /api/tasks
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // Get household ID from query params
    const { searchParams } = new URL(request.url);
    const householdId = searchParams.get('householdId');
    
    if (!householdId) {
      return NextResponse.json({ error: 'Household ID is required' }, { status: 400 });
    }
    
    // Check if user is a member of the household
    const householdUser = await prisma.householdUser.findUnique({
      where: {
        userId_householdId: {
          userId: session.user.id,
          householdId: householdId,
        },
      },
    });
    
    if (!householdUser) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    // Fetch all tasks for the household
    const tasks = await prisma.task.findMany({
      where: {
        householdId: householdId,
      },
      include: {
        creator: {
          select: {
            id: true,
            name: true,
            email: true,
            avatar: true,
          },
        },
        assignee: {
          select: {
            id: true,
            name: true,
            email: true,
            avatar: true,
          },
        },
      },
      orderBy: [
        {
          priority: 'desc', // URGENT, HIGH, MEDIUM, LOW
        },
        {
          dueDate: 'asc', // Earlier dates first
        },
      ],
    });
    
    return NextResponse.json(tasks);
  } catch (error) {
    console.error('Error fetching tasks:', error);
    return NextResponse.json({ error: 'Failed to fetch tasks' }, { status: 500 });
  }
}

// POST /api/tasks
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const data = await request.json();
    const { 
      title, 
      description, 
      status, 
      priority, 
      assigneeId, 
      dueDate, 
      recurring, 
      recurrenceRule, 
      householdId 
    } = data;
    
    // Validate required fields
    if (!title || !householdId) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }
    
    // Check if user is a member of the household
    const householdUser = await prisma.householdUser.findUnique({
      where: {
        userId_householdId: {
          userId: session.user.id,
          householdId: householdId,
        },
      },
    });
    
    if (!householdUser) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    // Create the task
    const task = await prisma.task.create({
      data: {
        title,
        description,
        status: status || 'PENDING',
        priority: priority || 'MEDIUM',
        creatorId: session.user.id,
        assigneeId,
        dueDate: dueDate ? new Date(dueDate) : undefined,
        recurring: recurring || false,
        recurrenceRule,
        householdId,
      },
      include: {
        creator: {
          select: {
            id: true,
            name: true,
            email: true,
            avatar: true,
          },
        },
        assignee: {
          select: {
            id: true,
            name: true,
            email: true,
            avatar: true,
          },
        },
      },
    });
    
    return NextResponse.json(task);
  } catch (error) {
    console.error('Error creating task:', error);
    return NextResponse.json({ error: 'Failed to create task' }, { status: 500 });
  }
}
```

// Directory: app\api\tasks\[id], File: route.ts
// File Type: ts
```typescript
// src/app/api/tasks/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

// GET /api/tasks/[id] - Get a specific task
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const taskId = params.id;
    
    // Get the task
    const task = await prisma.task.findUnique({
      where: {
        id: taskId,
      },
      include: {
        creator: {
          select: {
            id: true,
            name: true,
            email: true,
            avatar: true,
          },
        },
        assignee: {
          select: {
            id: true,
            name: true,
            email: true,
            avatar: true,
          },
        },
        household: {
          select: {
            id: true,
            name: true,
          },
        },
      },
    });
    
    if (!task) {
      return NextResponse.json({ error: 'Task not found' }, { status: 404 });
    }
    
    // Check if the user is a member of the household that the task belongs to
    const householdUser = await prisma.householdUser.findUnique({
      where: {
        userId_householdId: {
          userId: session.user.id,
          householdId: task.householdId,
        },
      },
    });
    
    if (!householdUser) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    return NextResponse.json(task);
  } catch (error) {
    console.error('Error fetching task:', error);
    return NextResponse.json({ error: 'Failed to fetch task' }, { status: 500 });
  }
}

// PATCH /api/tasks/[id] - Update a specific task
export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const taskId = params.id;
    const data = await request.json();
    
    // Get the current task to verify permissions
    const currentTask = await prisma.task.findUnique({
      where: {
        id: taskId,
      },
      include: {
        household: {
          include: {
            members: {
              where: {
                userId: session.user.id,
              },
            },
          },
        },
      },
    });
    
    if (!currentTask) {
      return NextResponse.json({ error: 'Task not found' }, { status: 404 });
    }
    
    // Check if user is a member of the household
    if (currentTask.household.members.length === 0) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    // Check if the user is the creator, assignee, or an admin of the household
    const isCreator = currentTask.creatorId === session.user.id;
    const isAssignee = currentTask.assigneeId === session.user.id;
    const isAdmin = currentTask.household.members[0].role === 'ADMIN';
    
    if (!isCreator && !isAssignee && !isAdmin) {
      return NextResponse.json({ 
        error: 'You are not authorized to update this task' 
      }, { status: 403 });
    }
    
    // Extract the data we want to update
    const { 
      title, 
      description, 
      status, 
      priority, 
      assigneeId, 
      dueDate, 
      recurring, 
      recurrenceRule 
    } = data;
    
    // Prepare the update data
    const updateData: any = {};
    
    if (title !== undefined) updateData.title = title;
    if (description !== undefined) updateData.description = description;
    if (status !== undefined) {
      updateData.status = status;
      
      // If the task is being marked as completed, set the completedAt date
      if (status === 'COMPLETED' && currentTask.status !== 'COMPLETED') {
        updateData.completedAt = new Date();
      } 
      // If the task is being un-completed, remove the completedAt date
      else if (status !== 'COMPLETED' && currentTask.status === 'COMPLETED') {
        updateData.completedAt = null;
      }
    }
    if (priority !== undefined) updateData.priority = priority;
    if (assigneeId !== undefined) updateData.assigneeId = assigneeId;
    if (dueDate !== undefined) updateData.dueDate = dueDate ? new Date(dueDate) : null;
    if (recurring !== undefined) updateData.recurring = recurring;
    if (recurrenceRule !== undefined) updateData.recurrenceRule = recurrenceRule;
    
    // Update the task
    const updatedTask = await prisma.task.update({
      where: {
        id: taskId,
      },
      data: updateData,
      include: {
        creator: {
          select: {
            id: true,
            name: true,
            email: true,
            avatar: true,
          },
        },
        assignee: {
          select: {
            id: true,
            name: true,
            email: true,
            avatar: true,
          },
        },
      },
    });
    
    return NextResponse.json(updatedTask);
  } catch (error) {
    console.error('Error updating task:', error);
    return NextResponse.json({ error: 'Failed to update task' }, { status: 500 });
  }
}

// DELETE /api/tasks/[id] - Delete a specific task
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const taskId = params.id;
    
    // Get the task to verify permissions
    const task = await prisma.task.findUnique({
      where: {
        id: taskId,
      },
      include: {
        household: {
          include: {
            members: {
              where: {
                userId: session.user.id,
              },
            },
          },
        },
      },
    });
    
    if (!task) {
      return NextResponse.json({ error: 'Task not found' }, { status: 404 });
    }
    
    // Check if user is a member of the household
    if (task.household.members.length === 0) {
      return NextResponse.json({ error: 'You are not a member of this household' }, { status: 403 });
    }
    
    // Check if the user is the creator or an admin of the household
    const isCreator = task.creatorId === session.user.id;
    const isAdmin = task.household.members[0].role === 'ADMIN';
    
    if (!isCreator && !isAdmin) {
      return NextResponse.json({ error: 'You are not authorized to delete this task' }, { status: 403 });
    }
    
    // Delete the task
    await prisma.task.delete({
      where: {
        id: taskId,
      },
    });
    
    return NextResponse.json({ message: 'Task deleted successfully' });
  } catch (error) {
    console.error('Error deleting task:', error);
    return NextResponse.json({ error: 'Failed to delete task' }, { status: 500 });
  }
}
```

// Directory: app\api\test-invitations, File: route.ts
// File Type: ts
```typescript
import { NextResponse } from 'next/server';
import { supabaseClient } from '@/lib/supabase';

export async function GET() {
  try {
    // Get current user session
    const { data: { session } } = await supabaseClient.auth.getSession();
    const userEmail = session?.user?.email;
    
    // Try direct query first (no RLS)
    const { data: directData, error: directError } = await supabaseClient
      .from('Invitation')
      .select('*')
      .limit(5);
    
    // Try query by email
    const { data: emailData, error: emailError } = await supabaseClient
      .from('Invitation')
      .select('*')
      .eq('email', userEmail || '')
      .eq('status', 'PENDING');
    
    return NextResponse.json({
      userEmail,
      directQuery: {
        success: !directError,
        count: directData?.length || 0,
        error: directError ? directError.message : null,
        data: directData?.slice(0, 2) || [] // Show just first 2 for brevity
      },
      emailQuery: {
        success: !emailError,
        count: emailData?.length || 0,
        error: emailError ? emailError.message : null,
        data: emailData || []
      }
    });
  } catch (err) {
    return NextResponse.json({
      error: 'Server error',
      details: err instanceof Error ? err.message : 'Unknown error'
    }, { status: 500 });
  }
}
```

// Directory: app\api\test-supabase, File: route.ts
// File Type: ts
```typescript
import { NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';

export async function GET() {
  try {
    // Simple query to check connection
    const { data, error } = await supabase
      .from('User')
      .select('id')
      .limit(1);
    
    if (error) {
      console.error('Supabase query error:', error);
      return NextResponse.json({ 
        status: 'error', 
        message: 'Supabase query failed', 
        error: error.message,
        note: 'Connection succeeded but query failed - check if the User table exists'
      }, { status: 500 });
    }
    
    return NextResponse.json({ 
      status: 'success', 
      message: 'Supabase connection and query successful!',
      data: data || []
    });
  } catch (err) {
    console.error('Unexpected error:', err);
    const message = err instanceof Error ? err.message : 'Unknown error';
    return NextResponse.json({ 
      status: 'error', 
      message: 'Unexpected error',
      error: message
    }, { status: 500 });
  }
}
```

// Directory: app\api\users, File: route.ts
// File Type: ts
```typescript
// src/app/api/users/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import bcrypt from 'bcrypt';

export async function POST(request: NextRequest) {
  try {
    const { id, name, email } = await request.json();

    // Validate input
    if (!id || !name || !email) {
      return NextResponse.json(
        { message: 'Missing required fields' },
        { status: 400 }
      );
    }

    // Create the user record in your database
    // Note: Password is already stored in Supabase Auth
    const { data: newUser, error: insertError } = await supabase
      .from('User')
      .insert([
        {
          id, // Use the ID provided by Supabase Auth
          name,
          email,
          password: 'MANAGED_BY_SUPABASE_AUTH', // Placeholder - password is managed by Auth service
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }
      ])
      .select('id, name, email, avatar, createdAt, updatedAt')
      .single();

    if (insertError) {
      console.error('Error creating user:', insertError);
      return NextResponse.json(
        { message: 'Error creating user' },
        { status: 500 }
      );
    }

    return NextResponse.json(
      {
        message: 'User registered successfully',
        user: newUser
      },
      { status: 201 }
    );
  } catch (error) {
    console.error('Registration error:', error);
    return NextResponse.json(
      { message: 'Error registering user' },
      { status: 500 }
    );
  }
}
```

// Directory: app\api\users\me, File: route.ts
// File Type: ts
```typescript
// src/app/api/users/me/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

// GET /api/users/me - Get current user's details
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // Get the current user with related data
    const user = await prisma.user.findUnique({
      where: {
        id: session.user.id,
      },
      select: {
        id: true,
        name: true,
        email: true,
        avatar: true,
        createdAt: true,
        // Note: User model doesn't have a metadata field
        // In a real app, you would include a settings field or join with a UserSettings model
        households: {
          include: {
            household: {
              select: {
                id: true,
                name: true,
                address: true,
                createdAt: true,
              },
            },
          },
          orderBy: {
            joinedAt: 'desc',
          },
        },
        // Get counts for related data that exists in the schema
        // These counts may vary based on your actual schema
        _count: {
          select: {
            // Use only relations that actually exist in your Prisma schema
            // For example, if these don't exist, use what's available
            payments: true,
            // We'll omit fields that don't exist in your schema
          },
        }
      },
    });
    
    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }
    
    // Format user data for response without using non-existent fields
    const userData = {
      id: user.id,
      name: user.name,
      email: user.email,
      avatar: user.avatar,
      createdAt: user.createdAt,
      // In a real app, this would come from a settings field or UserSettings model
      settings: {
        theme: 'system', // Default values since we don't have actual storage
        notifications: {
          email: true,
          push: true,
          expenses: true,
          tasks: true
        },
        privacy: {
          showEmail: false,
          showStatus: true,
        },
        preferences: {
          currency: 'USD',
          dateFormat: 'MM/DD/YYYY',
          language: 'en',
        }
      },
      // Provide basic activity stats based on available data
      statistics: {
        // Use only what's available in the _count field
        payments: user._count?.payments || 0,
        // For missing stats, provide zeros or omit them
        // If you need other stats, you would add them here
      },
      households: user.households.map(membership => ({
        id: membership.household.id,
        name: membership.household.name,
        address: membership.household.address,
        createdAt: membership.household.createdAt,
        joinedAt: membership.joinedAt,
        role: membership.role,
      })),
    };
    
    return NextResponse.json(userData);
  } catch (error) {
    console.error('Error fetching current user:', error);
    return NextResponse.json({ error: 'Failed to fetch user data' }, { status: 500 });
  }
}

// DELETE /api/users/me - Delete current user's account
export async function DELETE(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // First, check the user's households and roles
    const userHouseholds = await prisma.householdUser.findMany({
      where: {
        userId: session.user.id,
        role: 'ADMIN',
      },
      include: {
        household: {
          include: {
            _count: {
              select: {
                members: true,
              },
            },
          },
        },
      },
    });
    
    // Check if user is the sole admin of any households
    const soleAdminHouseholds = await Promise.all(userHouseholds.map(async (membership) => {
      if (membership.role === 'ADMIN' && membership.household._count.members > 1) {
        // Count other admins in this household
        const otherAdminsCount = await prisma.householdUser.count({
          where: {
            householdId: membership.householdId,
            role: 'ADMIN',
            userId: {
              not: session.user.id,
            },
          },
        });
        
        if (otherAdminsCount === 0) {
          return membership.household.name;
        }
      }
      return null;
    }));
    
    // Filter out null values and get households where user is the sole admin
    const problematicHouseholds = soleAdminHouseholds.filter(Boolean);
    
    if (problematicHouseholds.length > 0) {
      return NextResponse.json({ 
        error: 'You are the only admin of one or more households. Please transfer admin rights or delete these households first.',
        households: problematicHouseholds,
      }, { status: 400 });
    }
    
    // Begin transaction to delete the user and related data
    await prisma.$transaction(async (prisma) => {
      // First, remove user from all households they're a member of
      await prisma.householdUser.deleteMany({
        where: {
          userId: session.user.id,
        },
      });
      
      // Delete payments created by or for this user
      await prisma.payment.deleteMany({
        where: {
          userId: session.user.id,
        },
      });
      
      // Reassign or delete tasks created by this user
      // For simplicity, we'll delete them, but you could add logic to reassign
      await prisma.task.deleteMany({
        where: {
          creatorId: session.user.id,
        },
      });
      
      // Unassign tasks assigned to this user
      await prisma.task.updateMany({
        where: {
          assigneeId: session.user.id,
        },
        data: {
          assigneeId: null,
        },
      });
      
      // Delete expenses created by this user
      // Note: In a real app, you might want to handle this differently
      await prisma.expense.deleteMany({
        where: {
          creatorId: session.user.id,
        },
      });
      
      // Delete expense splits and related payments for this user
      await prisma.expenseSplit.deleteMany({
        where: {
          userId: session.user.id,
        },
      });
      
      // Finally, delete the user
      await prisma.user.delete({
        where: {
          id: session.user.id,
        },
      });
    });
    
    return NextResponse.json({ message: 'Account deleted successfully' });
  } catch (error) {
    console.error('Error deleting user account:', error);
    return NextResponse.json({ error: 'Failed to delete account' }, { status: 500 });
  }
}
```

// Directory: app\auth\callback, File: page.tsx
// File Type: tsx
```tsx
// src/app/auth/callback/page.tsx
'use client';

import { useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabaseClient } from '@/lib/supabase';

export default function AuthCallbackPage() {
  const router = useRouter();
  const searchParams = useSearchParams();

  useEffect(() => {
    // Handle the auth callback
    const handleCallback = async () => {
      try {
        // Parse the URL to extract code and next parameters
        const code = searchParams.get('code');
        const next = searchParams.get('next') || '/dashboard';

        if (code) {
          // Exchange the code for a session
          await supabaseClient.auth.exchangeCodeForSession(code);
          
          // Check if the user has been fully registered in the User table
          const { data: { session } } = await supabaseClient.auth.getSession();
          
          if (session) {
            // Check if the user exists in our database
            const { data: user, error: userError } = await supabaseClient
              .from('User')
              .select('id')
              .eq('id', session.user.id)
              .single();
            
            if (userError) {
              // User doesn't exist in our database yet - create them
              const { error: insertError } = await supabaseClient
                .from('User')
                .insert([
                  {
                    id: session.user.id,
                    email: session.user.email,
                    name: session.user.user_metadata?.name || session.user.email?.split('@')[0] || 'User',
                    password: 'MANAGED_BY_SUPABASE_AUTH',
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                  }
                ]);
              
              if (insertError) {
                console.error('Error creating user record:', insertError);
              }
            }
            
            // Show welcome message for newly verified users
            const isNewUser = searchParams.get('type') === 'signup';
            if (isNewUser) {
              router.push('/dashboard?verified=true');
            } else {
              router.push(next);
            }
          } else {
            // No session - redirect to login
            router.push('/login?error=verification_failed');
          }
        } else {
          // No code parameter - redirect to login
          router.push('/login');
        }
      } catch (error) {
        console.error('Error handling auth callback:', error);
        router.push('/login?error=callback_error');
      }
    };

    handleCallback();
  }, [router, searchParams]);

  return (
    <div className="flex min-h-screen items-center justify-center py-12 px-4 sm:px-6 lg:px-8 bg-gray-50 dark:bg-gray-900">
      <div className="w-full max-w-md space-y-8 text-center">
        <div className="flex justify-center">
          <h1 className="text-3xl font-bold text-blue-600 dark:text-blue-400">Roomies</h1>
        </div>
        <h2 className="mt-6 text-center text-xl font-bold tracking-tight text-gray-900 dark:text-white">
          Verifying your account
        </h2>
        <div className="mt-4 flex justify-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
        <p className="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
          Please wait while we verify your account...
        </p>
      </div>
    </div>
  );
}
```

// Directory: app\invite, File: page.tsx
// File Type: tsx
```tsx
// src/app/invite/page.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Image from 'next/image';
import Link from 'next/link';
import { supabaseClient } from '@/lib/supabase';
import Button from '@/components/ui/Button';

interface HouseholdInfo {
  id: string;
  name: string;
  address?: string;
}

interface InviterInfo {
  id: string;
  name: string;
  email: string;
  avatar?: string;
}

interface InvitationDetails {
  id: string;
  email: string;
  role: string;
  message?: string;
  expiresAt: string;
  createdAt: string;
  household: HouseholdInfo;
  inviter: InviterInfo;
}

export default function InvitationPage() {
  const [invitation, setInvitation] = useState<InvitationDetails | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [processingAction, setProcessingAction] = useState(false);
  const [userSession, setUserSession] = useState<any>(null);
  const [needsSignIn, setNeedsSignIn] = useState(false);
  const [showClaimConfirmation, setShowClaimConfirmation] = useState(false);
  
  const router = useRouter();
  const searchParams = useSearchParams();
  const token = searchParams.get('token');
  
  // Load the user session on mount
  useEffect(() => {
    const checkSession = async () => {
      const { data: { session } } = await supabaseClient.auth.getSession();
      setUserSession(session);
    };
    
    checkSession();
  }, []);
  
  // Fetch the invitation details when component mounts
  useEffect(() => {
    const fetchInvitation = async () => {
      if (!token) {
        setError('Invalid invitation link');
        setLoading(false);
        return;
      }
      
      try {
        const response = await fetch(`/api/invitations/${token}`);
        const data = await response.json();
        
        if (!response.ok) {
          throw new Error(data.error || 'Failed to load invitation');
        }
        
        setInvitation(data);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load invitation');
      } finally {
        setLoading(false);
      }
    };
    
    fetchInvitation();
  }, [token]);
  
  const handleAcceptInvitation = async () => {
    if (!token) return;
    
    setProcessingAction(true);
    try {
      const response = await fetch(`/api/invitations/${token}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ action: 'accept' }),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        if (response.status === 401 && data.requiresAuth) {
          // User needs to sign in
          setNeedsSignIn(true);
          return;
        }
        
        throw new Error(data.error || 'Failed to accept invitation');
      }
      
      // Redirect to chat page regardless of what redirectTo says
      router.push('/chat');
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setProcessingAction(false);
    }
  };

  const handleClaimInvitation = async () => {
    if (!token) return;
    
    setProcessingAction(true);
    try {
      const response = await fetch(`/api/invitations/${token}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          action: 'accept',
          claimWithCurrentEmail: true 
        }),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to accept invitation');
      }
      
      // Redirect to chat page
      router.push('/chat');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setProcessingAction(false);
      setShowClaimConfirmation(false);
    }
  };
  
  const handleDeclineInvitation = async () => {
    if (!token) return;
    
    if (!confirm('Are you sure you want to decline this invitation?')) {
      return;
    }
    
    setProcessingAction(true);
    try {
      const response = await fetch(`/api/invitations/${token}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ action: 'decline' }),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to decline invitation');
      }
      
      // Show a success message
      alert('Invitation declined successfully');
      
      // Redirect to the home page
      router.push('/');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setProcessingAction(false);
    }
  };
  
  // If we need the user to sign in first
  if (needsSignIn) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 px-4">
        <div className="max-w-md w-full space-y-8 p-8 bg-white dark:bg-gray-800 rounded-xl shadow-md">
          <div className="text-center">
            <h2 className="text-3xl font-bold text-gray-900 dark:text-white">Sign in Required</h2>
            <p className="mt-2 text-gray-600 dark:text-gray-400">
              You need to sign in to accept this invitation.
            </p>
            {invitation?.email && (
              <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                Please sign in with <span className="font-medium">{invitation.email}</span>
              </p>
            )}
          </div>
          
          <div className="mt-6 flex flex-col gap-3">
            <Link
              href={`/login?callbackUrl=${encodeURIComponent(`/invite?token=${token}`)}`}
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
            >
              Sign In
            </Link>
            
            <Link
              href={`/register?email=${invitation?.email || ''}&callbackUrl=${encodeURIComponent(`/invite?token=${token}`)}`}
              className="w-full flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 dark:bg-gray-700 dark:text-gray-200 dark:border-gray-600 dark:hover:bg-gray-600"
            >
              Create Account
            </Link>
            
            <button
              onClick={() => setNeedsSignIn(false)}
              className="mt-2 text-sm text-blue-600 hover:text-blue-500 dark:text-blue-400"
            >
              Go back to invitation
            </button>
          </div>
        </div>
      </div>
    );
  }
  
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 px-4">
        <div className="max-w-md w-full space-y-8 p-8 bg-white dark:bg-gray-800 rounded-xl shadow-md">
          <div className="text-center">
            <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 dark:bg-red-900">
              <svg className="h-6 w-6 text-red-600 dark:text-red-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
              </svg>
            </div>
            <h2 className="mt-3 text-xl font-medium text-gray-900 dark:text-white">Invitation Error</h2>
            <p className="mt-2 text-gray-600 dark:text-gray-400">{error}</p>
          </div>
          <div className="mt-5 text-center">
            <Link
              href="/"
              className="text-sm font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400"
            >
              Return Home
            </Link>
          </div>
        </div>
      </div>
    );
  }
  
  if (!invitation) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 px-4">
        <div className="max-w-md w-full space-y-8 p-8 bg-white dark:bg-gray-800 rounded-xl shadow-md">
          <div className="text-center">
            <h2 className="text-xl font-medium text-gray-900 dark:text-white">Invitation Not Found</h2>
            <p className="mt-2 text-gray-600 dark:text-gray-400">
              This invitation may have expired or been revoked.
            </p>
          </div>
          <div className="mt-5 text-center">
            <Link
              href="/"
              className="text-sm font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400"
            >
              Return Home
            </Link>
          </div>
        </div>
      </div>
    );
  }
  
  // Check if user's email matches the invitation email
  const emailMismatch = userSession && userSession.user.email !== invitation.email;
  
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 px-4">
      <div className="max-w-md w-full space-y-8 p-8 bg-white dark:bg-gray-800 rounded-xl shadow-md">
        <div className="text-center">
          <h1 className="text-3xl font-bold text-blue-600 dark:text-blue-400">Roomies</h1>
          <h2 className="mt-6 text-2xl font-bold text-gray-900 dark:text-white">
            You've been invited to join a household
          </h2>
        </div>
        
        <div className="mt-8">
          <div className="bg-gray-50 dark:bg-gray-700 p-5 rounded-lg">
            <div className="flex flex-col sm:flex-row sm:items-center gap-4">
              <div className="flex-shrink-0">
                {invitation.inviter.avatar ? (
                  <Image
                    src={invitation.inviter.avatar}
                    alt={invitation.inviter.name}
                    width={64}
                    height={64}
                    className="rounded-full"
                  />
                ) : (
                  <div className="h-16 w-16 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center text-xl font-medium text-blue-700 dark:text-blue-300">
                    {invitation.inviter.name.charAt(0)}
                  </div>
                )}
              </div>
              
              <div>
                <h3 className="text-lg font-medium text-gray-900 dark:text-white">
                  {invitation.inviter.name}
                </h3>
                <p className="text-gray-600 dark:text-gray-400">{invitation.inviter.email}</p>
                <p className="mt-1 text-sm text-gray-500 dark:text-gray-300">
                  has invited you to join
                </p>
              </div>
            </div>
            
            <div className="mt-4 p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-600">
              <h3 className="text-lg font-bold text-gray-900 dark:text-white">
                {invitation.household.name}
              </h3>
              
              {invitation.household.address && (
                <p className="text-gray-600 dark:text-gray-400 mt-1">
                  {invitation.household.address}
                </p>
              )}
              
              <p className="mt-2 text-sm text-gray-500 dark:text-gray-300">
                Role: <span className="font-medium">{invitation.role.charAt(0) + invitation.role.slice(1).toLowerCase()}</span>
              </p>
            </div>
            
            {invitation.message && (
              <div className="mt-4">
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300">Message:</h4>
                <div className="mt-1 p-3 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-600 text-gray-600 dark:text-gray-300 italic">
                  "{invitation.message}"
                </div>
              </div>
            )}
          </div>
          
          {emailMismatch && (
            <div className="mt-4 p-4 bg-yellow-50 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 rounded-md">
              <p className="text-sm">
                <strong>Note:</strong> You're currently signed in as {userSession.user.email}, 
                but this invitation was sent to {invitation.email}.
              </p>
              <div className="mt-2 flex justify-end gap-2">
                <button
                  onClick={async () => {
                    await supabaseClient.auth.signOut();
                    window.location.reload();
                  }}
                  className="text-sm text-yellow-800 dark:text-yellow-200 underline"
                >
                  Sign out
                </button>
                <button
                  onClick={() => setShowClaimConfirmation(true)}
                  className="px-2 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700"
                >
                  Use current account
                </button>
              </div>
            </div>
          )}
          
          <div className="mt-6 flex gap-4">
            <Button
              variant="outline"
              fullWidth
              onClick={handleDeclineInvitation}
              disabled={processingAction || (emailMismatch && !showClaimConfirmation)}
            >
              Decline
            </Button>
            
            <Button
              variant="primary"
              fullWidth
              onClick={handleAcceptInvitation}
              isLoading={processingAction}
              disabled={processingAction || (emailMismatch && !showClaimConfirmation)}
            >
              Accept
            </Button>
          </div>
        </div>
      </div>

      {/* Confirmation Modal */}
      {showClaimConfirmation && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg max-w-md w-full">
            <h3 className="text-lg font-bold mb-4 text-gray-900 dark:text-white">Link invitation to your account?</h3>
            <p className="mb-4 text-gray-700 dark:text-gray-300">
              This will accept the invitation sent to <strong>{invitation.email}</strong> and 
              link it to your current account <strong>{userSession.user.email}</strong>.
            </p>
            <div className="flex justify-end gap-2">
              <button
                onClick={() => setShowClaimConfirmation(false)}
                className="px-3 py-2 border border-gray-300 rounded text-gray-700 dark:text-gray-300 dark:border-gray-600"
              >
                Cancel
              </button>
              <button
                onClick={handleClaimInvitation}
                className="px-3 py-2 bg-blue-600 text-white rounded"
              >
                Confirm
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
```

// Directory: app\providers, File: AuthProvider.tsx
// File Type: tsx
```tsx
// src/app/providers/AuthProvider.tsx
'use client';

import { createContext, useContext, useEffect, useState } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { useRouter } from 'next/navigation';

// Define user type
type User = {
  id: string;
  email: string;
  name: string;
  avatar?: string | null;
};

// Define auth context type
type AuthContextType = {
  user: User | null;
  isLoading: boolean;
  signIn: (email: string, password: string) => Promise<{ error: any } | null>;
  signOut: () => Promise<void>;
};

// Create context with default values
const AuthContext = createContext<AuthContextType>({
  user: null,
  isLoading: true,
  signIn: async () => null,
  signOut: async () => {},
});

// Hook to use auth context
export const useAuth = () => useContext(AuthContext);

// Auth Provider component
export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const router = useRouter();
  const supabase = createClientComponentClient();

  // Check for user session on mount
  useEffect(() => {
    const checkSession = async () => {
      try {
        const { data: { session }, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error('Error getting session:', error);
          setUser(null);
        } else if (session) {
          // If we have a session, get the user details
          const { data: userData, error: userError } = await supabase
            .from('User')
            .select('id, name, email, avatar')
            .eq('id', session.user.id)
            .single();
            
          if (userError) {
            console.error('Error fetching user data:', userError);
          } else if (userData) {
            setUser(userData);
          }
        }
      } catch (error) {
        console.error('Session check error:', error);
      } finally {
        setIsLoading(false);
      }
    };

    // Set up auth state change listener
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (session) {
          // If we have a session, get the user details
          const { data: userData, error: userError } = await supabase
            .from('User')
            .select('id, name, email, avatar')
            .eq('id', session.user.id)
            .single();
            
          if (!userError && userData) {
            setUser(userData);
          }
        } else {
          setUser(null);
        }
        setIsLoading(false);
      }
    );

    checkSession();

    // Cleanup on unmount
    return () => {
      subscription.unsubscribe();
    };
  }, [supabase, router]);

  // Custom sign in function
  const signIn = async (email: string, password: string) => {
    try {
      // First, use our custom login endpoint which handles bcrypt validation
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();

      if (!response.ok) {
        return { error: data.message || 'Login failed' };
      }

      // Then use Supabase Auth to create a session
      const { error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        return { error: error.message };
      }

      router.refresh();
      return null;
    } catch (error) {
      console.error('Sign in error:', error);
      return { error: 'An unexpected error occurred' };
    }
  };

  // Sign out function
  const signOut = async () => {
    try {
      await supabase.auth.signOut();
      router.push('/login');
      router.refresh();
    } catch (error) {
      console.error('Sign out error:', error);
    }
  };

  // Context provider
  return (
    <AuthContext.Provider value={{ user, isLoading, signIn, signOut }}>
      {children}
    </AuthContext.Provider>
  );
}
```


// ===== End of app folder =====

// ===== Start of components folder =====

// Consolidated 20 files from the "components" folder
// This file contains all code files within the "components" folder and its subfolders.

// Directory: components\auth, File: LoginForm.tsx
// File Type: tsx
```tsx
// src/components/auth/LoginForm.tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';

export default function LoginForm() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Failed to login');
      }

      // Successfully logged in
      router.push('/dashboard');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred during login');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="w-full max-w-md mx-auto p-6 bg-white rounded-lg shadow-md dark:bg-gray-800">
      <h2 className="text-2xl font-bold text-center text-gray-800 dark:text-white mb-6">
        Login to Roomies
      </h2>

      {error && (
        <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-md">
          {error}
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label 
            htmlFor="email" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Email
          </label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="Enter your email"
            required
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>

        <div>
          <label 
            htmlFor="password" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Password
          </label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            placeholder="Enter your password"
            required
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>

        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <input
              id="remember-me"
              type="checkbox"
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-700 dark:text-gray-300">
              Remember me
            </label>
          </div>

          <div className="text-sm">
            <Link
              href="/forgot-password"
              className="text-blue-600 hover:text-blue-500 dark:text-blue-400"
            >
              Forgot password?
            </Link>
          </div>
        </div>

        <button
          type="submit"
          disabled={loading}
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {loading ? 'Logging in...' : 'Log in'}
        </button>

        <div className="text-center mt-4">
          <p className="text-sm text-gray-600 dark:text-gray-400">
            Don't have an account?{' '}
            <Link
              href="/register"
              className="text-blue-600 hover:text-blue-500 dark:text-blue-400 font-medium"
            >
              Sign up
            </Link>
          </p>
        </div>
      </form>
    </div>
  );
}
```

// Directory: components\auth, File: RegisterForm.tsx
// File Type: tsx
```tsx
// src/components/auth/RegisterForm.tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';

export default function RegisterForm() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    // Validate form inputs
    if (password !== confirmPassword) {
      setError('Passwords do not match');
      setLoading(false);
      return;
    }

    if (password.length < 8) {
      setError('Password must be at least 8 characters long');
      setLoading(false);
      return;
    }

    try {
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name, email, password }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Failed to register');
      }

      // Successfully registered
      router.push('/login?registered=true');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred during registration');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="w-full max-w-md mx-auto p-6 bg-white rounded-lg shadow-md dark:bg-gray-800">
      <h2 className="text-2xl font-bold text-center text-gray-800 dark:text-white mb-6">
        Create a Roomies Account
      </h2>

      {error && (
        <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-md">
          {error}
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label 
            htmlFor="name" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Full Name
          </label>
          <input
            id="name"
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            placeholder="Enter your name"
            required
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>

        <div>
          <label 
            htmlFor="email" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Email
          </label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="Enter your email"
            required
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>

        <div>
          <label 
            htmlFor="password" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Password
          </label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            placeholder="Create a password"
            required
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>

        <div>
          <label 
            htmlFor="confirmPassword" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Confirm Password
          </label>
          <input
            id="confirmPassword"
            type="password"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            placeholder="Confirm your password"
            required
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>

        <div className="flex items-center">
          <input
            id="terms"
            type="checkbox"
            required
            className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
          />
          <label htmlFor="terms" className="ml-2 block text-sm text-gray-700 dark:text-gray-300">
            I agree to the{' '}
            <Link href="/terms" className="text-blue-600 hover:text-blue-500 dark:text-blue-400">
              Terms of Service
            </Link>{' '}
            and{' '}
            <Link href="/privacy" className="text-blue-600 hover:text-blue-500 dark:text-blue-400">
              Privacy Policy
            </Link>
          </label>
        </div>

        <button
          type="submit"
          disabled={loading}
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {loading ? 'Creating account...' : 'Create account'}
        </button>

        <div className="text-center mt-4">
          <p className="text-sm text-gray-600 dark:text-gray-400">
            Already have an account?{' '}
            <Link
              href="/login"
              className="text-blue-600 hover:text-blue-500 dark:text-blue-400 font-medium"
            >
              Log in
            </Link>
          </p>
        </div>
      </form>
    </div>
  );
}
```

// Directory: components\chat, File: ChatInput.tsx
// File Type: tsx
```tsx
// src/components/chat/ChatInput.tsx
'use client';

import { useState, useRef, useEffect } from 'react';

interface ChatInputProps {
  onSendMessage: (message: string) => void;
  isLoading?: boolean;
  placeholder?: string;
  disabled?: boolean;
}

export default function ChatInput({
  onSendMessage,
  isLoading = false,
  placeholder = 'Type your message...',
  disabled = false
}: ChatInputProps) {
  const [message, setMessage] = useState('');
  const inputRef = useRef<HTMLInputElement>(null);

  // Focus input when component mounts
  useEffect(() => {
    if (inputRef.current && !disabled) {
      inputRef.current.focus();
    }
  }, [disabled]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const trimmedMessage = message.trim();
    if (trimmedMessage && !isLoading && !disabled) {
      onSendMessage(trimmedMessage);
      setMessage('');
    }
  };

  // Handle Ctrl+Enter to submit
  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      handleSubmit(e);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="flex items-center">
      <input
        ref={inputRef}
        type="text"
        value={message}
        onChange={(e) => setMessage(e.target.value)}
        onKeyDown={handleKeyDown}
        placeholder={placeholder}
        disabled={disabled || isLoading}
        className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white disabled:opacity-50 disabled:cursor-not-allowed"
        aria-label="Type a message"
      />
      <button
        type="submit"
        disabled={!message.trim() || isLoading || disabled}
        className="bg-blue-500 text-white px-4 py-2 rounded-r-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        {isLoading ? (
          <svg 
            className="animate-spin h-5 w-5 text-white" 
            xmlns="http://www.w3.org/2000/svg" 
            fill="none" 
            viewBox="0 0 24 24"
          >
            <circle 
              className="opacity-25" 
              cx="12" 
              cy="12" 
              r="10" 
              stroke="currentColor" 
              strokeWidth="4"
            ></circle>
            <path 
              className="opacity-75" 
              fill="currentColor" 
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
        ) : (
          <svg 
            className="h-5 w-5" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24" 
            xmlns="http://www.w3.org/2000/svg"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" 
            />
          </svg>
        )}
      </button>
    </form>
  );
}
```

// Directory: components\chat, File: MessageBubble.tsx
// File Type: tsx
```tsx
// src/components/chat/MessageBubble.tsx
'use client';

import { useState } from 'react';
import Image from 'next/image';

interface MessageBubbleProps {
  id: string;
  text: string;
  timestamp: Date;
  isCurrentUser: boolean;
  senderName?: string;
  senderAvatar?: string;
  isGroupChat?: boolean;
  isRead?: boolean;
}

export default function MessageBubble({
  id,
  text,
  timestamp,
  isCurrentUser,
  senderName,
  senderAvatar,
  isGroupChat = false,
  isRead = false
}: MessageBubbleProps) {
  const [showTimestamp, setShowTimestamp] = useState(false);

  const formatTimestamp = (date: Date) => {
    const now = new Date();
    const messageDate = new Date(date);
    
    // If message is from today, show only time
    if (messageDate.toDateString() === now.toDateString()) {
      return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }
    
    // If message is from this week, show day and time
    const diffDays = Math.floor((now.getTime() - messageDate.getTime()) / (1000 * 60 * 60 * 24));
    if (diffDays < 7) {
      return `${messageDate.toLocaleDateString([], { weekday: 'short' })} ${messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
    }
    
    // Otherwise, show full date
    return messageDate.toLocaleDateString();
  };

  return (
    <div 
      className={`flex ${isCurrentUser ? 'justify-end' : 'justify-start'} mb-4`}
      onClick={() => setShowTimestamp(!showTimestamp)}
    >
      <div className={`flex max-w-[75%] ${isCurrentUser ? 'flex-row-reverse' : 'flex-row'}`}>
        {/* Avatar - only show if not current user and in group chat */}
        {!isCurrentUser && isGroupChat && (
          <div className="flex-shrink-0 mr-2">
            {senderAvatar ? (
              <Image
                src={senderAvatar}
                alt={senderName || 'User'}
                width={32}
                height={32}
                className="rounded-full h-8 w-8"
              />
            ) : (
              <div className="bg-gray-300 dark:bg-gray-600 rounded-full h-8 w-8 flex items-center justify-center text-sm font-medium text-gray-600 dark:text-gray-200">
                {senderName ? senderName.charAt(0).toUpperCase() : '?'}
              </div>
            )}
          </div>
        )}
        
        <div className={`flex flex-col ${isCurrentUser ? 'items-end' : 'items-start'}`}>
          {/* Sender name - only show in group chat and not current user */}
          {!isCurrentUser && isGroupChat && senderName && (
            <span className="text-xs font-medium text-gray-500 dark:text-gray-400 mb-1 ml-1">
              {senderName}
            </span>
          )}
          
          {/* Message bubble */}
          <div 
            className={`px-4 py-2 rounded-lg break-words ${
              isCurrentUser 
                ? 'bg-blue-500 text-white rounded-tr-none' 
                : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-tl-none'
            }`}
          >
            <p className="whitespace-pre-wrap">{text}</p>
          </div>
          
          {/* Timestamp and read status */}
          <div 
            className={`flex items-center mt-1 text-xs text-gray-500 dark:text-gray-400 ${
              isCurrentUser ? 'justify-end' : 'justify-start'
            }`}
          >
            {(showTimestamp || isCurrentUser) && (
              <span className="mx-1">{formatTimestamp(timestamp)}</span>
            )}
            
            {isCurrentUser && (
              <span className="ml-1">
                {isRead ? (
                  <svg 
                    className="h-3 w-3 text-blue-500" 
                    fill="currentColor" 
                    viewBox="0 0 24 24"
                  >
                    <path d="M18 7l-8 8-4-4 1.5-1.5L10 12l6.5-6.5L18 7z" />
                  </svg>
                ) : (
                  <svg 
                    className="h-3 w-3 text-gray-400" 
                    fill="currentColor" 
                    viewBox="0 0 24 24"
                  >
                    <path d="M18 7l-8 8-4-4 1.5-1.5L10 12l6.5-6.5L18 7z" />
                  </svg>
                )}
              </span>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
```

// Directory: components\dashboard, File: HouseholdInfo.tsx
// File Type: tsx
```tsx
// src/components/dashboard/HouseholdInfo.tsx
'use client';

import { useState } from 'react';

interface HouseholdInfoProps {
  householdId: string;
  name: string;
  address: string;
  moveInDate: string;
  memberCount: number;
  pendingExpenses?: number;
  upcomingTasks?: number;
  unreadMessages?: number;
  onUpdate?: (updated: { name: string; address: string }) => void;
}

export default function HouseholdInfo({
  householdId,
  name,
  address,
  moveInDate,
  memberCount,
  pendingExpenses = 0,
  upcomingTasks = 0,
  unreadMessages = 0,
  onUpdate,
}: HouseholdInfoProps) {
  const [isEditing, setIsEditing] = useState(false);
  const [householdName, setHouseholdName] = useState(name);
  const [householdAddress, setHouseholdAddress] = useState(address);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSave = async () => {
    setIsSubmitting(true);
    setError(null);
    
    try {
      const response = await fetch(`/api/households/${householdId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: householdName,
          address: householdAddress,
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || 'Failed to update household information');
      }
      
      // Update successful
      setIsEditing(false);
      
      // Notify parent component if needed
      if (onUpdate) {
        onUpdate({
          name: householdName,
          address: householdAddress,
        });
      }
    } catch (err) {
      console.error('Error updating household:', err);
      setError(err instanceof Error ? err.message : 'An error occurred while updating household information');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6">
      {error && (
        <div className="mb-4 p-3 bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-400 rounded-md">
          {error}
        </div>
      )}

      <div className="flex justify-between items-center mb-4">
        {isEditing ? (
          <input
            type="text"
            value={householdName}
            onChange={(e) => setHouseholdName(e.target.value)}
            className="text-2xl font-bold text-gray-900 dark:text-white bg-gray-100 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 w-full"
          />
        ) : (
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white">{householdName}</h2>
        )}
        
        <button
          onClick={() => isEditing ? handleSave() : setIsEditing(true)}
          disabled={isSubmitting}
          className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-blue-400 disabled:cursor-not-allowed"
        >
          {isSubmitting ? 'Saving...' : isEditing ? 'Save' : 'Edit'}
        </button>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <div>
          <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Address</p>
          {isEditing ? (
            <input
              type="text"
              value={householdAddress}
              onChange={(e) => setHouseholdAddress(e.target.value)}
              className="text-gray-900 dark:text-white bg-gray-100 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 w-full"
            />
          ) : (
            <p className="text-gray-700 dark:text-gray-300">{householdAddress}</p>
          )}
        </div>
        <div>
          <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Move-in Date</p>
          <p className="text-gray-700 dark:text-gray-300">{moveInDate}</p>
        </div>
        <div>
          <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Members</p>
          <p className="text-gray-700 dark:text-gray-300">{memberCount} people</p>
        </div>
      </div>
      
      <div className="grid grid-cols-3 gap-4">
        <div className="bg-blue-50 dark:bg-blue-900/30 p-4 rounded-md">
          <p className="text-sm font-medium text-blue-700 dark:text-blue-300">Pending Expenses</p>
          <p className="text-2xl font-bold text-blue-700 dark:text-blue-300">{pendingExpenses}</p>
        </div>
        <div className="bg-green-50 dark:bg-green-900/30 p-4 rounded-md">
          <p className="text-sm font-medium text-green-700 dark:text-green-300">Upcoming Tasks</p>
          <p className="text-2xl font-bold text-green-700 dark:text-green-300">{upcomingTasks}</p>
        </div>
        <div className="bg-purple-50 dark:bg-purple-900/30 p-4 rounded-md">
          <p className="text-sm font-medium text-purple-700 dark:text-purple-300">Unread Messages</p>
          <p className="text-2xl font-bold text-purple-700 dark:text-purple-300">{unreadMessages}</p>
        </div>
      </div>
    </div>
  );
}
```

// Directory: components\dashboard, File: HouseholdMembers.tsx
// File Type: tsx
```tsx
'use client';

import { useState } from 'react';
import InviteModal from '@/components/invitations/InviteModal';
import Button from '@/components/ui/Button';

interface Member {
  id: string;
  name: string;
  email: string;
  role: string;
  avatar?: string;
}

interface HouseholdMembersProps {
  householdId: string;
  members: Member[];
  isAdmin: boolean;
}

export default function HouseholdMembers({ 
  householdId, 
  members, 
  isAdmin 
}: HouseholdMembersProps) {
  const [showInviteModal, setShowInviteModal] = useState(false);
  
  return (
    <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-lg font-medium text-gray-900 dark:text-white">
          Household Members ({members.length})
        </h2>
        
        {isAdmin && (
          <Button 
            variant="primary" 
            size="sm"
            onClick={() => setShowInviteModal(true)}
          >
            Invite Member
          </Button>
        )}
      </div>
      
      <ul className="divide-y divide-gray-200 dark:divide-gray-700">
        {members.map((member) => (
          <li key={member.id} className="py-4 flex items-center justify-between">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                {member.avatar ? (
                  <img 
                    src={member.avatar} 
                    alt={member.name} 
                    className="h-10 w-10 rounded-full"
                  />
                ) : (
                  <div className="h-10 w-10 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center">
                    <span className="text-blue-600 dark:text-blue-300 text-sm font-medium">
                      {member.name.charAt(0).toUpperCase()}
                    </span>
                  </div>
                )}
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium text-gray-900 dark:text-white">
                  {member.name}
                </p>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  {member.email}
                </p>
              </div>
            </div>
            <div className="flex items-center">
              <span className="px-2.5 py-0.5 text-xs rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                {member.role}
              </span>
            </div>
          </li>
        ))}
      </ul>
      
      {showInviteModal && (
        <InviteModal 
          householdId={householdId} 
          onClose={() => setShowInviteModal(false)} 
        />
      )}
    </div>
  );
}
```

// Directory: components\dashboard, File: MemberGrid.tsx
// File Type: tsx
```tsx
// src/components/dashboard/MemberGrid.tsx
'use client';

import { useState, useEffect } from 'react';
import Image from 'next/image';
import { supabaseClient } from '@/lib/supabase';

interface Member {
  id: string;
  name: string;
  avatar: string;
  role: 'ADMIN' | 'MEMBER' | 'GUEST';
  status: 'ONLINE' | 'AWAY' | 'OFFLINE';
  joinedAt: string;
  owes?: number;
  isOwed?: number;
  tasksCompleted?: number;
  tasksPending?: number;
}

interface MemberGridProps {
  householdId: string;
  onInvite?: () => void;
}

export default function MemberGrid({ householdId, onInvite }: MemberGridProps) {
  const [members, setMembers] = useState<Member[]>([]);
  const [activeTab, setActiveTab] = useState<'ALL' | 'ONLINE' | 'AWAY'>('ALL');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  useEffect(() => {
    fetchMembers();
  }, [householdId]);
  
  const fetchMembers = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch(`/api/households/${householdId}/members`);
      
      if (!response.ok) {
        throw new Error('Failed to fetch household members');
      }
      
      const data = await response.json();
      setMembers(data);
    } catch (err) {
      console.error('Error fetching members:', err);
      setError(err instanceof Error ? err.message : 'An error occurred while fetching members');
    } finally {
      setLoading(false);
    }
  };
  
  // Get current user's ID for UI enhancements
  const [currentUserId, setCurrentUserId] = useState<string | null>(null);
  
  useEffect(() => {
    const getCurrentUser = async () => {
      const { data: { session } } = await supabaseClient.auth.getSession();
      if (session?.user) {
        setCurrentUserId(session.user.id);
      }
    };
    
    getCurrentUser();
  }, []);
  
  const filteredMembers = activeTab === 'ALL' 
    ? members 
    : members.filter(member => member.status === activeTab);

  const getRoleColor = (role: Member['role']) => {
    switch (role) {
      case 'ADMIN':
        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';
      case 'MEMBER':
        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';
      case 'GUEST':
        return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
    }
  };

  const getStatusColor = (status: Member['status']) => {
    switch (status) {
      case 'ONLINE':
        return 'bg-green-500';
      case 'AWAY':
        return 'bg-yellow-500';
      case 'OFFLINE':
        return 'bg-gray-500';
    }
  };
  
  const handleMessageMember = async (memberId: string) => {
    try {
      // Implementation would depend on your chat system
      console.log(`Opening chat with member: ${memberId}`);
      // Navigate to chat or open chat modal
    } catch (err) {
      console.error('Error starting chat:', err);
    }
  };
  
  const handleMemberOptions = (memberId: string) => {
    // This would open a dropdown or modal with member options
    console.log(`Show options for member: ${memberId}`);
  };

  if (loading) {
    return (
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <div className="flex items-center justify-center h-40">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-white"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <div className="text-red-600 dark:text-red-400">
          Error: {error}
          <button 
            onClick={fetchMembers}
            className="ml-2 text-blue-600 dark:text-blue-400 underline"
          >
            Try again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md">
      <div className="border-b border-gray-200 dark:border-gray-700">
        <div className="flex items-center justify-between px-6 py-4">
          <div>
            <h3 className="text-lg font-medium text-gray-900 dark:text-white">Household Members</h3>
            <p className="text-sm text-gray-500 dark:text-gray-400">
              {members.length} {members.length === 1 ? 'member' : 'members'}
            </p>
          </div>
          
          <button
            onClick={onInvite}
            className="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            <svg 
              className="h-4 w-4 mr-1" 
              fill="none" 
              stroke="currentColor" 
              viewBox="0 0 24 24" 
              xmlns="http://www.w3.org/2000/svg"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={2} 
                d="M12 6v6m0 0v6m0-6h6m-6 0H6" 
              />
            </svg>
            Invite
          </button>
        </div>
        
        <div className="px-2">
          <nav className="-mb-px flex">
            <button
              onClick={() => setActiveTab('ALL')}
              className={`${
                activeTab === 'ALL'
                  ? 'border-blue-500 text-blue-600 dark:text-blue-500'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
              } flex-1 whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm`}
            >
              All
            </button>
            <button
              onClick={() => setActiveTab('ONLINE')}
              className={`${
                activeTab === 'ONLINE'
                  ? 'border-blue-500 text-blue-600 dark:text-blue-500'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
              } flex-1 whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm`}
            >
              Online
            </button>
            <button
              onClick={() => setActiveTab('AWAY')}
              className={`${
                activeTab === 'AWAY'
                  ? 'border-blue-500 text-blue-600 dark:text-blue-500'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
              } flex-1 whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm`}
            >
              Away
            </button>
          </nav>
        </div>
      </div>
      
      <ul className="divide-y divide-gray-200 dark:divide-gray-700">
        {filteredMembers.length > 0 ? (
          filteredMembers.map((member) => (
            <li key={member.id} className="px-6 py-4">
              <div className="flex items-center">
                <div className="relative flex-shrink-0">
                  <Image
                    className="h-12 w-12 rounded-full object-cover"
                    src={member.avatar}
                    alt={member.name}
                    width={48}
                    height={48}
                  />
                  <div 
                    className={`absolute bottom-0 right-0 h-3 w-3 rounded-full border-2 border-white dark:border-gray-800 ${getStatusColor(member.status)}`}
                  />
                </div>
                
                <div className="ml-4 flex-1">
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="text-sm font-medium text-gray-900 dark:text-white">
                        {member.name} {member.id === currentUserId && ' (You)'}
                      </h4>
                      <div className="flex items-center mt-1">
                        <span 
                          className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getRoleColor(member.role)}`}
                        >
                          {member.role.charAt(0) + member.role.slice(1).toLowerCase()}
                        </span>
                        <span className="text-xs text-gray-500 dark:text-gray-400 ml-2">
                          Joined {new Date(member.joinedAt).toLocaleDateString()}
                        </span>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <button 
                        className="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300"
                        onClick={() => handleMessageMember(member.id)}
                        aria-label={`Message ${member.name}`}
                      >
                        <svg 
                          className="h-5 w-5" 
                          fill="none" 
                          stroke="currentColor" 
                          viewBox="0 0 24 24" 
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path 
                            strokeLinecap="round" 
                            strokeLinejoin="round" 
                            strokeWidth={2} 
                            d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" 
                          />
                        </svg>
                      </button>
                      <button 
                        className="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300"
                        onClick={() => handleMemberOptions(member.id)}
                        aria-label={`More options for ${member.name}`}
                      >
                        <svg 
                          className="h-5 w-5" 
                          fill="none" 
                          stroke="currentColor" 
                          viewBox="0 0 24 24" 
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path 
                            strokeLinecap="round" 
                            strokeLinejoin="round" 
                            strokeWidth={2} 
                            d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" 
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                  
                  <div className="mt-2 grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <p className="text-gray-500 dark:text-gray-400">Financial</p>
                      <div className="flex space-x-4 mt-1">
                        <div className="text-red-600 dark:text-red-400">
                          Owes: ${member.owes?.toFixed(2) || '0.00'}
                        </div>
                        <div className="text-green-600 dark:text-green-400">
                          Owed: ${member.isOwed?.toFixed(2) || '0.00'}
                        </div>
                      </div>
                    </div>
                    <div>
                      <p className="text-gray-500 dark:text-gray-400">Tasks</p>
                      <div className="flex space-x-4 mt-1">
                        <div className="text-green-600 dark:text-green-400">
                          Done: {member.tasksCompleted || 0}
                        </div>
                        <div className="text-yellow-600 dark:text-yellow-400">
                          Pending: {member.tasksPending || 0}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </li>
          ))
        ) : (
          <li className="px-6 py-4 text-center text-gray-500 dark:text-gray-400">
            No members found with the selected filter.
          </li>
        )}
      </ul>
    </div>
  );
}
```

// Directory: components\dashboard, File: PendingInvitationsPanel.tsx
// File Type: tsx
```tsx
// src/components/dashboard/PendingInvitationsPanel.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { supabaseClient } from '@/lib/supabase';
import Button from '@/components/ui/Button';
import Card from '@/components/ui/Card';

// Define the interface for invitation objects
interface Invitation {
  id: string;
  token: string;
  email: string;
  status: string;
  message?: string;
  expiresAt: string;
  createdAt: string;
  householdId: string;
  inviterId: string;
  role: string;
  inviter?: {
    id: string;
    name: string;
    email: string;
  };
  household?: {
    id: string;
    name: string;
    address?: string;
  };
}

export default function PendingInvitationsPanel() {
  const [invitations, setInvitations] = useState<Invitation[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentUserEmail, setCurrentUserEmail] = useState<string | null>(null);
  const [processingToken, setProcessingToken] = useState<string | null>(null);
  const [debugInfo, setDebugInfo] = useState<any>(null);
  const router = useRouter();

  // TEST MODE: Set to true to show all invitations regardless of email
  const TEST_MODE = true;

  useEffect(() => {
    const fetchInvitations = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Get current user info first
        const { data } = await supabaseClient.auth.getSession();
        const session = data.session;
        const userEmail = session?.user?.email || null;
        setCurrentUserEmail(userEmail);
        
        console.log('Current user email:', userEmail);
        
        // Direct query to get all pending invitations
        const { data: allInvitations, error: queryError } = await supabaseClient
          .from('Invitation')
          .select(`
            *,
            inviter:inviterId(id, name, email),
            household:householdId(id, name, address)
          `)
          .eq('status', 'PENDING');
        
        if (queryError) {
          console.error('Supabase query error:', queryError);
          throw queryError;
        }
        
        console.log('All pending invitations:', allInvitations);
        
        // Store debug info
        setDebugInfo({
          userEmail: userEmail || 'Not logged in',
          allInvitations: allInvitations || []
        });
        
        // In test mode, show all invitations
        // In normal mode, filter to only show invitations for current user
        if (TEST_MODE) {
          setInvitations(allInvitations || []);
        } else {
          setInvitations(
            allInvitations?.filter(inv => 
              userEmail && inv.email.toLowerCase() === userEmail.toLowerCase()
            ) || []
          );
        }
      } catch (error) {
        console.error('Error fetching invitations:', error);
        setError(error instanceof Error ? error.message : 'Unknown error occurred');
      } finally {
        setLoading(false);
      }
    };

    fetchInvitations();
  }, []);

  const handleAccept = async (invitation: Invitation) => {
    try {
      setProcessingToken(invitation.token);
      console.log('Accepting invitation with token:', invitation.token);
      
      // First update the invitation status
      const { error: updateError } = await supabaseClient
        .from('Invitation')
        .update({
          status: 'ACCEPTED',
          updatedAt: new Date().toISOString(),
          respondedAt: new Date().toISOString()
        })
        .eq('id', invitation.id);
        
      if (updateError) {
        throw updateError;
      }
      
      // Then add user to the household
      const { data: sessionData } = await supabaseClient.auth.getSession();
      if (!sessionData.session?.user?.id) {
        throw new Error('User not authenticated');
      }
      
      const userId = sessionData.session.user.id;
      const membershipId = crypto.randomUUID();
      
      const { error: membershipError } = await supabaseClient
        .from('HouseholdUser')
        .insert({
          id: membershipId,
          userId: userId,
          householdId: invitation.householdId,
          role: invitation.role,
          joinedAt: new Date().toISOString()
        });
        
      if (membershipError) {
        throw membershipError;
      }
      
      // Success!
      setInvitations(invitations.filter(inv => inv.id !== invitation.id));
      alert(`You've successfully joined ${invitation.household?.name || 'the household'}!`);
      
      // Redirect to chat
      router.push('/chat');
    } catch (error) {
      console.error('Error accepting invitation:', error);
      setError(error instanceof Error ? error.message : 'Failed to accept invitation');
      alert(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setProcessingToken(null);
    }
  };
  
  const handleViewDetails = (token: string) => {
    router.push(`/invite?token=${token}`);
  };

  // Debug panel - remove in production
  const renderDebugPanel = () => {
    if (!debugInfo) return null;
    
    return (
      <div className="mt-4 p-3 bg-yellow-50 dark:bg-yellow-900/30 rounded-md text-xs">
        <h4 className="font-bold mb-1">Debug Info:</h4>
        <p>Your email: {debugInfo.userEmail}</p>
        <p>Invitations found: {debugInfo.allInvitations.length}</p>
        {TEST_MODE && (
          <p className="text-red-500 font-bold">TEST MODE ENABLED - Showing all invitations</p>
        )}
        <details>
          <summary>Show details</summary>
          <pre className="mt-2 overflow-auto max-h-40">
            {JSON.stringify(debugInfo, null, 2)}
          </pre>
        </details>
      </div>
    );
  };

  if (loading) {
    return (
      <Card title="Pending Invitations">
        <div className="flex justify-center items-center p-4">
          <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </Card>
    );
  }

  if (error) {
    return (
      <Card title="Pending Invitations">
        <div className="p-4 text-red-500 dark:text-red-400">
          <p>Error loading invitations: {error}</p>
          <button 
            onClick={() => window.location.reload()}
            className="mt-2 text-blue-500 dark:text-blue-400 underline"
          >
            Refresh
          </button>
        </div>
        {renderDebugPanel()}
      </Card>
    );
  }

  if (invitations.length === 0) {
    return (
      <Card title="Pending Invitations">
        <div className="p-4 text-gray-500">
          No pending invitations found.
          {renderDebugPanel()}
        </div>
      </Card>
    );
  }

  return (
    <Card title="Pending Invitations">
      <div className="space-y-4 p-2">
        {invitations.map((invitation) => (
          <div 
            key={invitation.id}
            className="border border-gray-200 dark:border-gray-700 rounded-lg p-4 bg-gray-50 dark:bg-gray-800"
          >
            <div className="flex justify-between items-start">
              <div>
                <h3 className="font-medium text-gray-900 dark:text-white">
                  {invitation.inviter?.name || 'Someone'} invited you to join {invitation.household?.name || 'a household'}
                </h3>
                <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                  Sent to: {invitation.email}
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  Role: {invitation.role?.charAt(0)?.toUpperCase() + invitation.role?.slice(1)?.toLowerCase() || 'Member'}
                </p>
                {invitation.message && (
                  <p className="text-sm italic mt-2 text-gray-600 dark:text-gray-400">
                    "{invitation.message}"
                  </p>
                )}
              </div>
              <div className="flex space-x-2">
                <Button
                  variant="primary"
                  size="sm"
                  onClick={() => handleAccept(invitation)}
                  isLoading={processingToken === invitation.token}
                  disabled={processingToken !== null}
                >
                  Accept
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleViewDetails(invitation.token)}
                  disabled={processingToken !== null}
                >
                  Details
                </Button>
              </div>
            </div>
          </div>
        ))}
      </div>
      {renderDebugPanel()}
    </Card>
  );
}
```

// Directory: components\expenses, File: ExpenseForm.tsx
// File Type: tsx
```tsx
// src/components/expenses/ExpenseForm.tsx
'use client';

import { useState, useEffect } from 'react';
import { supabaseClient } from '@/lib/supabase';
import { useSession } from 'next-auth/react';
interface Member {
  id: string;
  name: string;
  avatar?: string;
}

interface Split {
  userId: string;
  userName: string;
  amount: number;
  percentage?: number;
}

interface Payment {
  userId: string;
  userName: string;
  amount: number;
  status: 'PENDING' | 'COMPLETED' | 'DECLINED';
}

interface Expense {
  id?: string;
  title: string;
  amount: number;
  date: Date;
  description?: string;
  splitType: 'EQUAL' | 'PERCENTAGE' | 'CUSTOM';
  creatorId: string;
  creatorName: string;
  householdId: string;
  splits: Split[];
  payments: Payment[];
}

interface ExpenseFormProps {
  expense?: Expense | null;
  members: Member[];
  householdId: string; // Add householdId prop
  onSubmit: (expense: Expense) => void;
  onCancel: () => void;
}

export default function ExpenseForm({ 
  expense, 
  members, 
  householdId, 
  onSubmit, 
  onCancel 
}: ExpenseFormProps) {
  const { data: session } = useSession();
  const currentUserId = session?.user?.id || '';
  const currentUser = members.find(m => m.id === currentUserId);
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // Default state for a new expense
  const getDefaultState = () => ({
    title: '',
    amount: 0,
    date: new Date().toISOString().split('T')[0], // Today in YYYY-MM-DD format
    description: '',
    splitType: 'EQUAL' as const,
    creatorId: currentUserId,
    creatorName: currentUser?.name || '',
    householdId, // Use prop instead of hardcoded value
    splits: [],
    payments: []
  });

  const [formData, setFormData] = useState<Omit<Expense, 'date'> & { date: string }>(getDefaultState());
  const [splitPercentages, setSplitPercentages] = useState<Record<string, number>>({});
  const [splitAmounts, setSplitAmounts] = useState<Record<string, number>>({});
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});

  // Initialize form data when expense prop changes or user session loads
  useEffect(() => {
    if (!currentUserId) return; // Wait for user session
    
    if (expense) {
      const tempSplitPercentages: Record<string, number> = {};
      const tempSplitAmounts: Record<string, number> = {};
      
      expense.splits.forEach(split => {
        tempSplitPercentages[split.userId] = split.percentage || 0;
        tempSplitAmounts[split.userId] = split.amount;
      });
      
      setSplitPercentages(tempSplitPercentages);
      setSplitAmounts(tempSplitAmounts);
      
      setFormData({
        ...expense,
        date: expense.date.toISOString().split('T')[0] // Convert Date to YYYY-MM-DD
      });
    } else {
      // Initialize equal splits for new expense
      const membersCount = members.length;
      const tempSplitPercentages: Record<string, number> = {};
      const tempSplitAmounts: Record<string, number> = {};
      
      members.forEach(member => {
        tempSplitPercentages[member.id] = 100 / membersCount;
        tempSplitAmounts[member.id] = 0; // Will be calculated when amount is set
      });
      
      setSplitPercentages(tempSplitPercentages);
      setSplitAmounts(tempSplitAmounts);
      
      setFormData({
        ...getDefaultState(),
        creatorId: currentUserId,
        creatorName: currentUser?.name || '',
      });
    }
  }, [expense, members, currentUserId, currentUser, householdId]);

  // Calculate splits when amount or splitType changes
  useEffect(() => {
    if (formData.amount > 0) {
      calculateSplits();
    }
  }, [formData.amount, formData.splitType]);

  const calculateSplits = () => {
    const amount = formData.amount;
    const tempSplitAmounts: Record<string, number> = {};
    
    if (formData.splitType === 'EQUAL') {
      // Equal split
      const memberCount = members.length;
      const equalAmount = amount / memberCount;
      
      members.forEach((member, index) => {
        // Handle rounding issues by adjusting the last member's amount
        if (index === memberCount - 1) {
          const sum = Object.values(tempSplitAmounts).reduce((a, b) => a + b, 0);
          tempSplitAmounts[member.id] = +(amount - sum).toFixed(2);
        } else {
          tempSplitAmounts[member.id] = +equalAmount.toFixed(2);
        }
      });
    } else if (formData.splitType === 'PERCENTAGE') {
      // Percentage-based split
      members.forEach(member => {
        const percentage = splitPercentages[member.id] || 0;
        tempSplitAmounts[member.id] = +(amount * percentage / 100).toFixed(2);
      });
    }
    // For CUSTOM, we don't calculate automatically - user sets amounts directly
    
    setSplitAmounts(tempSplitAmounts);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    
    if (name === 'amount') {
      const numValue = parseFloat(value);
      setFormData({ ...formData, [name]: numValue || 0 });
    } else {
      setFormData({ ...formData, [name]: value });
    }
    
    // Clear error when field is edited
    if (formErrors[name]) {
      setFormErrors({ ...formErrors, [name]: '' });
    }
  };

  const handlePercentageChange = (userId: string, value: number) => {
    const newPercentages = { ...splitPercentages, [userId]: value };
    setSplitPercentages(newPercentages);
    
    // Recalculate amounts based on new percentages
    if (formData.amount > 0) {
      const newSplitAmounts = { ...splitAmounts };
      newSplitAmounts[userId] = +(formData.amount * value / 100).toFixed(2);
      setSplitAmounts(newSplitAmounts);
    }
  };

  const handleAmountChange = (userId: string, value: number) => {
    const newSplitAmounts = { ...splitAmounts, [userId]: value };
    setSplitAmounts(newSplitAmounts);
    
    // Update percentages if amount is greater than 0
    if (formData.amount > 0) {
      const newPercentages = { ...splitPercentages };
      newPercentages[userId] = +(value / formData.amount * 100).toFixed(2);
      setSplitPercentages(newPercentages);
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    
    if (!formData.title.trim()) {
      newErrors.title = 'Title is required';
    }
    
    if (formData.amount <= 0) {
      newErrors.amount = 'Amount must be greater than 0';
    }
    
    if (formData.splitType === 'PERCENTAGE') {
      const totalPercentage = Object.values(splitPercentages).reduce((a, b) => a + b, 0);
      if (Math.abs(totalPercentage - 100) > 0.1) { // Allow small rounding errors
        newErrors.splitType = 'Percentages must add up to 100%';
      }
    } else if (formData.splitType === 'CUSTOM') {
      const totalAmount = Object.values(splitAmounts).reduce((a, b) => a + b, 0);
      if (Math.abs(totalAmount - formData.amount) > 0.01) { // Allow small rounding errors
        newErrors.splitType = 'Split amounts must add up to the total amount';
      }
    }
    
    setFormErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setIsSubmitting(true);
    setError(null);
    
    try {
      // Create splits array
      const splits = members.map(member => ({
        userId: member.id,
        userName: member.name,
        amount: splitAmounts[member.id] || 0,
        percentage: splitPercentages[member.id] || 0
      }));
      
      // Create payments array - the creator is paid, everyone else pays
      const payments = members
        .filter(member => member.id !== formData.creatorId) // Exclude creator
        .map(member => ({
          userId: member.id,
          userName: member.name,
          amount: splitAmounts[member.id] || 0,
          status: expense?.payments?.find(p => p.userId === member.id)?.status || 'PENDING' as const
        }));
      
      // Prepare the expense data
      const expenseData = {
        ...formData,
        date: new Date(formData.date), // Convert string back to Date
        splits,
        payments
      };
      
      // If editing an existing expense
      if (expense?.id) {
        const response = await fetch(`/api/expenses/${expense.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(expenseData),
        });
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.message || 'Failed to update expense');
        }
      } 
      // If creating a new expense
      else {
        const response = await fetch('/api/expenses', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(expenseData),
        });
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.message || 'Failed to create expense');
        }
      }
      
      // Call the onSubmit callback with the expense data
      onSubmit(expenseData);
    } catch (err) {
      console.error('Error saving expense:', err);
      setError(err instanceof Error ? err.message : 'An error occurred while saving the expense');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="mt-5 space-y-4">
      {error && (
        <div className="p-3 bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-400 rounded-md">
          {error}
        </div>
      )}
      
      <div>
        <label 
          htmlFor="title" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Title
        </label>
        <input
          id="title"
          name="title"
          type="text"
          value={formData.title}
          onChange={handleInputChange}
          placeholder="e.g., Groceries, Rent, Utilities"
          required
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
        {formErrors.title && <p className="mt-1 text-sm text-red-600 dark:text-red-400">{formErrors.title}</p>}
      </div>
      
      <div>
        <label 
          htmlFor="amount" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Amount ($)
        </label>
        <input
          id="amount"
          name="amount"
          type="number"
          step="0.01"
          min="0.01"
          value={formData.amount || ''}
          onChange={handleInputChange}
          placeholder="0.00"
          required
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
        {formErrors.amount && <p className="mt-1 text-sm text-red-600 dark:text-red-400">{formErrors.amount}</p>}
      </div>
      
      <div>
        <label 
          htmlFor="date" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Date
        </label>
        <input
          id="date"
          name="date"
          type="date"
          value={formData.date}
          onChange={handleInputChange}
          required
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
      </div>
      
      <div>
        <label 
          htmlFor="description" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Description (Optional)
        </label>
        <textarea
          id="description"
          name="description"
          value={formData.description}
          onChange={handleInputChange}
          rows={3}
          placeholder="Add additional details about this expense..."
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
      </div>
      
      <div>
        <label 
          htmlFor="splitType" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          How do you want to split this expense?
        </label>
        <select
          id="splitType"
          name="splitType"
          value={formData.splitType}
          onChange={handleInputChange}
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        >
          <option value="EQUAL">Split equally</option>
          <option value="PERCENTAGE">Split by percentage</option>
          <option value="CUSTOM">Custom split</option>
        </select>
        {formErrors.splitType && <p className="mt-1 text-sm text-red-600 dark:text-red-400">{formErrors.splitType}</p>}
      </div>
      
      {/* Split details */}
      <div className="mt-4">
        <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Split Details</h4>
        
        <div className="bg-gray-50 dark:bg-gray-700 p-4 rounded-md">
          <div className="grid grid-cols-3 gap-2 mb-2 font-medium text-sm text-gray-700 dark:text-gray-300">
            <div>Member</div>
            {formData.splitType === 'PERCENTAGE' && <div>Percentage</div>}
            <div>{formData.splitType === 'EQUAL' ? 'Amount (auto-calculated)' : 'Amount'}</div>
          </div>
          
          {members.map(member => (
            <div key={member.id} className="grid grid-cols-3 gap-2 mb-3 items-center">
              <div className="text-sm text-gray-800 dark:text-gray-200">
                {member.name} {member.id === formData.creatorId && '(Paid)'}
              </div>
              
              {formData.splitType === 'PERCENTAGE' && (
                <div>
                  <input
                    type="number"
                    min="0"
                    max="100"
                    step="0.01"
                    value={splitPercentages[member.id] || 0}
                    onChange={(e) => handlePercentageChange(member.id, parseFloat(e.target.value) || 0)}
                    className="w-full px-2 py-1 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-600 dark:border-gray-500 dark:text-white"
                  />
                </div>
              )}
              
              <div>
                <div className="relative">
                  <span className="absolute inset-y-0 left-0 pl-2 flex items-center text-gray-500 dark:text-gray-400">$</span>
                  <input
                    type="number"
                    min="0"
                    step="0.01"
                    value={splitAmounts[member.id] || 0}
                    onChange={(e) => handleAmountChange(member.id, parseFloat(e.target.value) || 0)}
                    disabled={formData.splitType === 'EQUAL'}
                    className={`w-full px-2 py-1 pl-6 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-600 dark:border-gray-500 dark:text-white ${
                      formData.splitType === 'EQUAL' ? 'bg-gray-100 dark:bg-gray-700' : ''
                    }`}
                  />
                </div>
              </div>
            </div>
          ))}
          
          <div className="flex justify-between text-sm font-medium pt-2 border-t border-gray-200 dark:border-gray-600 mt-2">
            <span className="text-gray-700 dark:text-gray-300">Total:</span>
            <span className="text-gray-900 dark:text-white">
              ${Object.values(splitAmounts).reduce((sum, amount) => sum + amount, 0).toFixed(2)}
            </span>
          </div>
        </div>
      </div>
      
      <div className="flex justify-end mt-6 gap-3">
        <button
          type="button"
          onClick={onCancel}
          disabled={isSubmitting}
          className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-70 disabled:cursor-not-allowed"
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={isSubmitting}
          className="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-blue-400 disabled:cursor-not-allowed"
        >
          {isSubmitting ? 'Saving...' : expense ? 'Update Expense' : 'Add Expense'}
        </button>
      </div>
    </form>
  );
}
```

// Directory: components\expenses, File: PaymentMatrix.tsx
// File Type: tsx
```tsx
// src/components/expenses/PaymentMatrix.tsx
'use client';

import { useState, useEffect } from 'react';

interface Balance {
  userId: string;
  userName: string;
  owes: number;
  isOwed: number;
  net: number;
}

interface PaymentMatrixProps {
  householdId: string;  // Added householdId prop
}

export default function PaymentMatrix({ householdId }: PaymentMatrixProps) {
  const [view, setView] = useState<'summary' | 'detail'>('summary');
  const [balances, setBalances] = useState<Balance[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // Fetch household balances when component mounts or householdId changes
  useEffect(() => {
    fetchBalances();
  }, [householdId]);
  
  const fetchBalances = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch(`/api/households/${householdId}/balances`);
      
      if (!response.ok) {
        throw new Error('Failed to fetch household balances');
      }
      
      const data = await response.json();
      setBalances(data);
    } catch (err) {
      console.error('Error fetching balances:', err);
      setError(err instanceof Error ? err.message : 'An error occurred while fetching balances');
    } finally {
      setLoading(false);
    }
  };
  
  // Calculate total amounts
  const totalOwed = balances.reduce((sum, balance) => sum + balance.isOwed, 0);
  const totalOwes = balances.reduce((sum, balance) => sum + balance.owes, 0);
  
  // Sort balances by net amount (descending)
  const sortedBalances = [...balances].sort((a, b) => b.net - a.net);
  
  // Calculate optimal payments
  const calculateOptimalPayments = () => {
    // Deep copy of the balances to work with
    const workingBalances = sortedBalances.map(b => ({ ...b }));
    const payments: { from: string, fromName: string, to: string, toName: string, amount: number }[] = [];
    
    // Continue until all balances are settled (within a small epsilon for floating point errors)
    const epsilon = 0.01; // $0.01 precision
    
    while (true) {
      // Find largest debtor (negative net balance)
      const debtor = workingBalances.filter(b => b.net < -epsilon).sort((a, b) => a.net - b.net)[0];
      
      // Find largest creditor (positive net balance)
      const creditor = workingBalances.filter(b => b.net > epsilon).sort((a, b) => b.net - a.net)[0];
      
      // If we can't find either, we're done
      if (!debtor || !creditor) break;
      
      // Calculate payment amount (minimum of the two absolute values)
      const amount = Math.min(Math.abs(debtor.net), creditor.net);
      
      // Record the payment
      payments.push({
        from: debtor.userId,
        fromName: debtor.userName,
        to: creditor.userId,
        toName: creditor.userName,
        amount: parseFloat(amount.toFixed(2)) // Round to 2 decimal places
      });
      
      // Update balances
      debtor.net += amount;
      creditor.net -= amount;
    }
    
    return payments;
  };
  
  const optimalPayments = calculateOptimalPayments();
  
  // Handle a payment being marked as complete
  const handleMarkPaymentComplete = async (fromUserId: string, toUserId: string, amount: number) => {
    try {
      const response = await fetch('/api/payments/mark-complete', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          householdId,
          fromUserId,
          toUserId,
          amount
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || 'Failed to mark payment as complete');
      }
      
      // Refresh balances after marking payment complete
      await fetchBalances();
      
      // Show success message
      alert('Payment marked as complete!');
    } catch (err) {
      console.error('Error marking payment complete:', err);
      alert(err instanceof Error ? err.message : 'An error occurred');
    }
  };

  if (loading) {
    return (
      <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden p-6">
        <div className="flex justify-center items-center h-40">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-white"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden p-6">
        <div className="text-red-600 dark:text-red-400">
          Error: {error}
          <button 
            onClick={fetchBalances}
            className="ml-2 text-blue-600 dark:text-blue-400 underline"
          >
            Try again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden">
      <div className="border-b border-gray-200 dark:border-gray-700 px-4 py-3 sm:px-6">
        <div className="flex justify-between items-center">
          <h3 className="text-lg font-medium text-gray-900 dark:text-white">
            Payment Summary
          </h3>
          
          <div className="flex">
            <button
              onClick={() => setView('summary')}
              className={`px-3 py-1 text-sm font-medium rounded-l-md ${
                view === 'summary'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300'
              }`}
            >
              Summary
            </button>
            <button
              onClick={() => setView('detail')}
              className={`px-3 py-1 text-sm font-medium rounded-r-md ${
                view === 'detail'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300'
              }`}
            >
              Payment Plan
            </button>
          </div>
        </div>
      </div>
      
      {balances.length === 0 ? (
        <div className="p-6 text-center text-gray-500 dark:text-gray-400">
          No financial data available. Add expenses to see payment summaries.
        </div>
      ) : view === 'summary' ? (
        <div className="px-4 py-5 sm:p-6">
          <div className="grid md:grid-cols-3 gap-6">
            {balances.map((balance) => (
              <div 
                key={balance.userId} 
                className="bg-gray-50 dark:bg-gray-700 p-4 rounded-md shadow-sm"
              >
                <div className="font-medium text-gray-900 dark:text-white mb-2">
                  {balance.userName}
                </div>
                <div className="space-y-1">
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-500 dark:text-gray-400">Total paid:</span>
                    <span className="text-gray-900 dark:text-white">${balance.isOwed.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-500 dark:text-gray-400">Total owed:</span>
                    <span className="text-gray-900 dark:text-white">${balance.owes.toFixed(2)}</span>
                  </div>
                  <div className="border-t border-gray-200 dark:border-gray-600 my-1 pt-1"></div>
                  <div className="flex justify-between text-sm font-medium">
                    <span>Balance:</span>
                    <span 
                      className={
                        balance.net > 0 
                          ? 'text-green-600 dark:text-green-400' 
                          : balance.net < 0 
                            ? 'text-red-600 dark:text-red-400' 
                            : 'text-gray-600 dark:text-gray-400'
                      }
                    >
                      {balance.net > 0 ? '+' : ''}{balance.net.toFixed(2)}
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
          
          <div className="mt-6 text-sm text-gray-500 dark:text-gray-400 text-center">
            <p>Total money exchanged in all expenses: ${totalOwed.toFixed(2)}</p>
          </div>
        </div>
      ) : (
        <div className="px-4 py-5 sm:p-6">
          <p className="text-sm text-gray-500 dark:text-gray-400 mb-4">
            To settle all balances, the following payments should be made:
          </p>
          
          {optimalPayments.length > 0 ? (
            <ul className="space-y-2">
              {optimalPayments.map((payment, index) => (
                <li 
                  key={index}
                  className="p-3 bg-gray-50 dark:bg-gray-700 rounded-md flex items-center justify-between"
                >
                  <div className="flex items-center">
                    <span className="font-medium text-gray-900 dark:text-white">{payment.fromName}</span>
                    <svg 
                      className="h-5 w-5 mx-2 text-gray-400" 
                      fill="none" 
                      stroke="currentColor" 
                      viewBox="0 0 24 24" 
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path 
                        strokeLinecap="round" 
                        strokeLinejoin="round" 
                        strokeWidth={2} 
                        d="M14 5l7 7m0 0l-7 7m7-7H3" 
                      />
                    </svg>
                    <span className="font-medium text-gray-900 dark:text-white">{payment.toName}</span>
                  </div>
                  <div className="flex items-center">
                    <span className="font-medium text-green-600 dark:text-green-400 mr-3">
                      ${payment.amount.toFixed(2)}
                    </span>
                    <button 
                      onClick={() => handleMarkPaymentComplete(payment.from, payment.to, payment.amount)}
                      className="px-2 py-1 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300 text-xs rounded-md hover:bg-green-200 dark:hover:bg-green-800"
                    >
                      Mark Paid
                    </button>
                  </div>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-center text-gray-700 dark:text-gray-300">
              All balances are settled. No payments needed.
            </p>
          )}
          
          <div className="mt-6 text-sm text-gray-500 dark:text-gray-400 text-center">
            <p>This payment plan simplifies the settlement process with the minimum number of transactions.</p>
          </div>
        </div>
      )}
    </div>
  );
}
```

// Directory: components\invitations, File: InvitationForm.tsx
// File Type: tsx
```tsx
// src/components/invitations/InvitationForm.tsx
'use client';

import { useState } from 'react';
import Button from '@/components/ui/Button';

interface InvitationFormProps {
  householdId: string;
  onInviteSent?: () => void;
  onCancel?: () => void;
}

export default function InvitationForm({ 
  householdId, 
  onInviteSent, 
  onCancel 
}: InvitationFormProps) {
  const [email, setEmail] = useState('');
  const [role, setRole] = useState<'ADMIN' | 'MEMBER' | 'GUEST'>('MEMBER');
  const [message, setMessage] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [invitationLink, setInvitationLink] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError('');
    setSuccess('');
    setInvitationLink('');

    try {
      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        setError('Please enter a valid email address');
        setIsSubmitting(false);
        return;
      }

      // Call API to send invitation
      const response = await fetch('/api/invitations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email,
          householdId,
          role,
          message: message.trim() || undefined,
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to send invitation');
      }

      // Show success message
      setSuccess(`Invitation sent to ${email}`);
      
      // Store the invitation link to display to the user
      if (data.invitation?.invitationLink) {
        setInvitationLink(data.invitation.invitationLink);
      }
      
      // Reset form
      setEmail('');
      setRole('MEMBER');
      setMessage('');
      
      // Notify parent component
      if (onInviteSent) {
        onInviteSent();
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {error && (
        <div className="p-3 bg-red-50 dark:bg-red-900 text-red-700 dark:text-red-300 rounded-md">
          {error}
        </div>
      )}
      
      {success && (
        <div className="p-3 bg-green-50 dark:bg-green-900 text-green-700 dark:text-green-300 rounded-md">
          {success}
          
          {invitationLink && (
            <div className="mt-2">
              <p className="text-sm font-medium">Invitation Link:</p>
              <div className="mt-1 flex">
                <input
                  type="text"
                  readOnly
                  value={invitationLink}
                  className="flex-1 p-2 text-sm bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-l-md"
                />
                <button
                  type="button"
                  onClick={() => {
                    navigator.clipboard.writeText(invitationLink);
                    alert('Link copied to clipboard!');
                  }}
                  className="px-3 py-2 text-sm bg-blue-600 text-white rounded-r-md hover:bg-blue-700"
                >
                  Copy
                </button>
              </div>
              <p className="mt-1 text-xs">
                Share this link with your roommate to join your household.
              </p>
            </div>
          )}
        </div>
      )}
      
      <div>
        <label 
          htmlFor="email" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Email Address
        </label>
        <input
          id="email"
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="Enter your roommate's email"
          required
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
      </div>
      
      <div>
        <label 
          htmlFor="role" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Role
        </label>
        <select
          id="role"
          value={role}
          onChange={(e) => setRole(e.target.value as 'ADMIN' | 'MEMBER' | 'GUEST')}
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        >
          <option value="ADMIN">Admin (Full access)</option>
          <option value="MEMBER">Member (Standard access)</option>
          <option value="GUEST">Guest (Limited access)</option>
        </select>
        <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
          {role === 'ADMIN' && 'Admins can manage household settings, members, and all features.'}
          {role === 'MEMBER' && 'Members can create expenses, tasks, and participate in all activities.'}
          {role === 'GUEST' && 'Guests can view and participate in activities but cannot modify household settings.'}
        </p>
      </div>
      
      <div>
        <label 
          htmlFor="message" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Personal Message (Optional)
        </label>
        <textarea
          id="message"
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          placeholder="Add a personal message to your invitation..."
          rows={3}
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
      </div>
      
      <div className="flex justify-end space-x-3 pt-3">
        {onCancel && (
          <Button 
            type="button"
            variant="outline"
            onClick={onCancel}
          >
            Cancel
          </Button>
        )}
        
        <Button
          type="submit"
          variant="primary"
          isLoading={isSubmitting}
          disabled={isSubmitting}
        >
          {isSubmitting ? 'Sending...' : 'Send Invitation'}
        </Button>
      </div>
    </form>
  );
}
```

// Directory: components\invitations, File: InvitationManager.tsx
// File Type: tsx
```tsx

```

// Directory: components\invitations, File: InviteModal.tsx
// File Type: tsx
```tsx
// src/components/invitations/InviteModal.tsx
'use client';

import { useState } from 'react';
import InvitationForm from './InvitationForm';
import PendingInvitations from './PendingInvitations';

interface InviteModalProps {
  householdId: string;
  onClose: () => void;
}

export default function InviteModal({
  householdId,
  onClose
}: InviteModalProps) {
  const [activeTab, setActiveTab] = useState<'invite' | 'pending'>('invite');
  const [refreshTrigger, setRefreshTrigger] = useState(0);

  const handleRefresh = () => {
    setRefreshTrigger(prev => prev + 1);
  };

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen px-4">
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={onClose} />
        
        <div className="relative bg-white dark:bg-gray-800 rounded-lg max-w-md w-full p-6 shadow-xl">
          <div className="absolute top-0 right-0 pt-4 pr-4">
            <button
              type="button"
              className="bg-white dark:bg-gray-800 rounded-md text-gray-400 hover:text-gray-500 dark:hover:text-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              onClick={onClose}
            >
              <span className="sr-only">Close</span>
              <svg 
                className="h-6 w-6" 
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor" 
                aria-hidden="true"
              >
                <path 
                  strokeLinecap="round" 
                  strokeLinejoin="round" 
                  strokeWidth="2" 
                  d="M6 18L18 6M6 6l12 12" 
                />
              </svg>
            </button>
          </div>
          
          <div className="mt-3 text-center sm:mt-0 sm:text-left">
            <h3 className="text-lg font-medium leading-6 text-gray-900 dark:text-white">
              Manage Roommate Invitations
            </h3>
            <div className="mt-2">
              <p className="text-sm text-gray-500 dark:text-gray-400">
                Invite your roommates to join your household and manage pending invitations.
              </p>
            </div>
          </div>
          
          {/* Tabs */}
          <div className="mt-4 border-b border-gray-200 dark:border-gray-700">
            <nav className="-mb-px flex space-x-8">
              <button
                onClick={() => setActiveTab('invite')}
                className={`${
                  activeTab === 'invite'
                    ? 'border-blue-500 text-blue-600 dark:text-blue-400'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
                } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
              >
                Send Invitation
              </button>
              
              <button
                onClick={() => setActiveTab('pending')}
                className={`${
                  activeTab === 'pending'
                    ? 'border-blue-500 text-blue-600 dark:text-blue-400'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
                } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
              >
                Pending Invitations
              </button>
            </nav>
          </div>
          
          {/* Tab content */}
          <div className="mt-4">
            {activeTab === 'invite' ? (
              <InvitationForm 
                householdId={householdId} 
                onInviteSent={() => {
                  handleRefresh();
                  setActiveTab('pending');
                }}
              />
            ) : (
              <PendingInvitations 
                householdId={householdId}
                onRefresh={handleRefresh}
                key={refreshTrigger} // Force refresh when triggered
              />
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
```

// Directory: components\invitations, File: PendingInvitations.tsx
// File Type: tsx
```tsx
// src/components/invitations/PendingInvitations.tsx
'use client';

import { useState, useEffect } from 'react';
import { formatDate } from '@/lib/utils';
import Button from '@/components/ui/Button';

interface Invitation {
  id: string;
  email: string;
  role: string;
  status: string;
  message?: string;
  expiresAt: string;
  createdAt: string;
  inviter?: {
    id: string;
    name: string;
    email: string;
    avatar?: string;
  };
}

interface PendingInvitationsProps {
  householdId: string;
  onRefresh?: () => void;
}

export default function PendingInvitations({ 
  householdId,
  onRefresh
}: PendingInvitationsProps) {
  const [invitations, setInvitations] = useState<Invitation[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [isResending, setIsResending] = useState<Record<string, boolean>>({});
  const [isCanceling, setIsCanceling] = useState<Record<string, boolean>>({});

  useEffect(() => {
    fetchInvitations();
  }, [householdId]);

  const fetchInvitations = async () => {
    try {
      setLoading(true);
      setError('');
      
      const response = await fetch(`/api/invitations?householdId=${householdId}&status=PENDING`);
      
      if (!response.ok) {
        throw new Error('Failed to fetch invitations');
      }
      
      const data = await response.json();
      setInvitations(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  const handleResendInvitation = async (invitationId: string) => {
    try {
      setIsResending(prev => ({ ...prev, [invitationId]: true }));
      
      // Make actual API call to resend invitation
      const response = await fetch(`/api/invitations/${invitationId}/resend`, {
        method: 'POST',
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || 'Failed to resend invitation');
      }
      
      // Show success notification
      alert('Invitation has been resent successfully!');
      
      // Refresh the list
      await fetchInvitations();
      
      if (onRefresh) {
        onRefresh();
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to resend invitation');
    } finally {
      setIsResending(prev => ({ ...prev, [invitationId]: false }));
    }
  };

  const handleCancelInvitation = async (invitationId: string) => {
    if (!confirm('Are you sure you want to cancel this invitation?')) {
      return;
    }
    
    try {
      setIsCanceling(prev => ({ ...prev, [invitationId]: true }));
      
      // Make actual API call to cancel invitation
      const response = await fetch(`/api/invitations/${invitationId}`, {
        method: 'DELETE',
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || 'Failed to cancel invitation');
      }
      
      // Remove the invitation from the list
      setInvitations(prev => prev.filter(inv => inv.id !== invitationId));
      
      if (onRefresh) {
        onRefresh();
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to cancel invitation');
    } finally {
      setIsCanceling(prev => ({ ...prev, [invitationId]: false }));
    }
  };

  if (loading) {
    return (
      <div className="py-4 text-center text-gray-500 dark:text-gray-400">
        Loading invitations...
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-4 bg-red-50 dark:bg-red-900 text-red-700 dark:text-red-300 rounded-md">
        Error: {error}
      </div>
    );
  }

  if (invitations.length === 0) {
    return (
      <div className="py-4 text-center text-gray-500 dark:text-gray-400">
        No pending invitations
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {invitations.map(invitation => (
        <div 
          key={invitation.id} 
          className="p-4 bg-white dark:bg-gray-800 rounded-md shadow border border-gray-200 dark:border-gray-700"
        >
          <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
            <div>
              <div className="flex items-center">
                <h3 className="font-medium text-gray-900 dark:text-white">{invitation.email}</h3>
                <span className="ml-2 px-2 py-0.5 text-xs rounded-full bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200">
                  Pending
                </span>
              </div>
              
              <div className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                <p>Role: {invitation.role.charAt(0) + invitation.role.slice(1).toLowerCase()}</p>
                <p>Sent: {formatDate(invitation.createdAt, true)}</p>
                <p>Expires: {formatDate(invitation.expiresAt)}</p>
              </div>
              
              {invitation.message && (
                <div className="mt-2 p-2 bg-gray-50 dark:bg-gray-700 rounded text-sm italic text-gray-600 dark:text-gray-300">
                  "{invitation.message}"
                </div>
              )}
            </div>
            
            <div className="flex sm:flex-col gap-2">
              <Button
                size="sm"
                variant="outline"
                isLoading={isResending[invitation.id]}
                disabled={isResending[invitation.id] || isCanceling[invitation.id]}
                onClick={() => handleResendInvitation(invitation.id)}
              >
                Resend
              </Button>
              
              <Button
                size="sm"
                variant="danger"
                isLoading={isCanceling[invitation.id]}
                disabled={isResending[invitation.id] || isCanceling[invitation.id]}
                onClick={() => handleCancelInvitation(invitation.id)}
              >
                Cancel
              </Button>
            </div>
          </div>
        </div>
      ))}
    </div>
  );
}
```

// Directory: components\invitations, File: UserInvitationsList.tsx
// File Type: tsx
```tsx
'use client';

import { useState, useEffect } from 'react';
import { formatDate } from '@/lib/utils';
import Button from '@/components/ui/Button';

interface Invitation {
  id: string;
  email: string;
  role: string;
  status: string;
  householdId: string;
  household: {
    id: string;
    name: string;
    address?: string;
  };
  inviter: {
    id: string;
    name: string;
    email: string;
    avatar?: string;
  };
  createdAt: string;
  expiresAt: string;
}

export default function UserInvitationsList() {
  const [invitations, setInvitations] = useState<Invitation[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [processingIds, setProcessingIds] = useState<string[]>([]);
  
  // Fetch user's pending invitations
  useEffect(() => {
    const fetchInvitations = async () => {
      try {
        setLoading(true);
        const response = await fetch('/api/invitations?status=PENDING');
        
        if (!response.ok) {
          throw new Error('Failed to fetch invitations');
        }
        
        const data = await response.json();
        setInvitations(data);
      } catch (err) {
        setError('Error loading invitations');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    
    fetchInvitations();
  }, []);
  
  const handleAction = async (id: string, action: 'accept' | 'decline') => {
    setProcessingIds(prev => [...prev, id]);
    
    try {
      const response = await fetch(`/api/invitations/${id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status: action === 'accept' ? 'ACCEPTED' : 'DECLINED' }),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to ${action} invitation`);
      }
      
      // Remove from list or update status
      setInvitations(prev => prev.filter(inv => inv.id !== id));
      
      // If accepted, we might want to redirect to the household
      if (action === 'accept') {
        // Could redirect or show a success message
      }
    } catch (err) {
      setError(`Error ${action}ing invitation`);
      console.error(err);
    } finally {
      setProcessingIds(prev => prev.filter(pid => pid !== id));
    }
  };
  
  if (loading) {
    return <div>Loading your invitations...</div>;
  }
  
  if (error) {
    return <div className="text-red-500">{error}</div>;
  }
  
  if (invitations.length === 0) {
    return <div>You don't have any pending invitations.</div>;
  }
  
  return (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold">Pending Invitations</h2>
      
      {invitations.map((invitation) => (
        <div 
          key={invitation.id} 
          className="p-4 bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700"
        >
          <div className="flex items-start justify-between">
            <div>
              <h3 className="font-medium text-lg">
                Invitation to join {invitation.household.name}
              </h3>
              <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                From: {invitation.inviter.name} ({invitation.inviter.email})
              </p>
              <p className="text-sm text-gray-500 dark:text-gray-400">
                Role: {invitation.role.charAt(0) + invitation.role.slice(1).toLowerCase()}
              </p>
              <p className="text-sm text-gray-500 dark:text-gray-400">
                Sent: {formatDate(invitation.createdAt)}
              </p>
              <p className="text-sm text-gray-500 dark:text-gray-400">
                Expires: {formatDate(invitation.expiresAt)}
              </p>
            </div>
            
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                isLoading={processingIds.includes(invitation.id)}
                disabled={processingIds.includes(invitation.id)}
                onClick={() => handleAction(invitation.id, 'decline')}
              >
                Decline
              </Button>
              <Button
                variant="primary"
                size="sm"
                isLoading={processingIds.includes(invitation.id)}
                disabled={processingIds.includes(invitation.id)}
                onClick={() => handleAction(invitation.id, 'accept')}
              >
                Accept
              </Button>
            </div>
          </div>
        </div>
      ))}
    </div>
  );
}
```

// Directory: components\notifications, File: InvitationBadge.tsx
// File Type: tsx
```tsx
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';

export default function InvitationBadge() {
  const [count, setCount] = useState(0);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const fetchInvitationCount = async () => {
      try {
        const response = await fetch('/api/invitations/count');
        
        if (response.ok) {
          const data = await response.json();
          setCount(data.count || 0);
        }
      } catch (error) {
        console.error('Error fetching invitation count:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchInvitationCount();
    
    // Optionally set up polling or real-time updates
    const interval = setInterval(fetchInvitationCount, 60000); // Check every minute
    
    return () => clearInterval(interval);
  }, []);
  
  if (loading || count === 0) {
    return null;
  }
  
  return (
    <Link href="/dashboard/invitations">
      <div className="relative inline-flex">
        <span className="sr-only">{count} pending invitations</span>
        <svg className="h-6 w-6 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
        </svg>
        <span className="absolute -top-1 -right-1 h-5 w-5 rounded-full bg-red-600 flex items-center justify-center text-xs text-white">
          {count}
        </span>
      </div>
    </Link>
  );
}
```

// Directory: components\tasks, File: TaskForm.tsx
// File Type: tsx
```tsx
// src/components/tasks/TaskForm.tsx
'use client';

import { useState, useEffect } from 'react';
import { supabaseClient } from '@/lib/supabase';

interface Member {
  id: string;
  name: string;
  avatar?: string;
}

interface Task {
  id: string;
  title: string;
  description?: string;
  status: 'PENDING' | 'IN_PROGRESS' | 'COMPLETED' | 'SKIPPED';
  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';
  creatorId: string;
  creatorName?: string;
  assigneeId?: string;
  assigneeName?: string;
  dueDate?: Date | string;
  recurring: boolean;
  recurrenceRule?: string;
  householdId: string;
  completedAt?: Date;
}

// Define a NewTask type that can be used for creation (without id)
type NewTask = Omit<Task, 'id'> & { id?: string };

interface TaskFormProps {
  task?: Task | null;
  members: Member[];
  householdId: string; // Added householdId prop
  onSubmit: (task: Task | NewTask) => void;
  onCancel: () => void;
}

export default function TaskForm({ 
  task, 
  members, 
  householdId, 
  onSubmit, 
  onCancel 
}: TaskFormProps) {
  const [currentUserId, setCurrentUserId] = useState<string>('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // Get current user from Supabase
  useEffect(() => {
    const getCurrentUser = async () => {
      const { data: { session } } = await supabaseClient.auth.getSession();
      if (session?.user) {
        setCurrentUserId(session.user.id);
      }
    };
    
    getCurrentUser();
  }, []);
  
  const currentUser = members.find(m => m.id === currentUserId);
  
  // Default state for a new task
  const getDefaultState = () => ({
    title: '',
    description: '',
    status: 'PENDING' as const,
    priority: 'MEDIUM' as const,
    creatorId: currentUserId,
    assigneeId: '',
    dueDate: '',
    recurring: false,
    recurrenceRule: 'WEEKLY',
    householdId, // Use prop instead of hardcoded value
  });

  const [formData, setFormData] = useState<Omit<Task, 'id' | 'dueDate'> & { id?: string, dueDate: string }>(getDefaultState());
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});

  // Initialize form data when task prop changes or when currentUserId is set
  useEffect(() => {
    if (!currentUserId) return; // Wait for user to be set
    
    if (task) {
      setFormData({
        ...task,
        dueDate: task.dueDate ? new Date(task.dueDate).toISOString().split('T')[0] : '', // Convert Date to YYYY-MM-DD
        recurrenceRule: task.recurrenceRule || 'WEEKLY',
      });
    } else {
      setFormData({
        ...getDefaultState(),
        creatorId: currentUserId,
      });
    }
  }, [task, currentUserId, householdId]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    
    if (type === 'checkbox') {
      const checkbox = e.target as HTMLInputElement;
      setFormData({ ...formData, [name]: checkbox.checked });
    } else {
      setFormData({ ...formData, [name]: value });
    }
    
    // Clear error when field is edited
    if (formErrors[name]) {
      setFormErrors({ ...formErrors, [name]: '' });
    }
    
    // Clear general error
    if (error) {
      setError(null);
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    
    if (!formData.title.trim()) {
      newErrors.title = 'Title is required';
    }
    
    if (!formData.assigneeId) {
      newErrors.assigneeId = 'Please select an assignee';
    }
    
    if (formData.recurring && !formData.recurrenceRule) {
      newErrors.recurrenceRule = 'Please select a recurrence pattern';
    }
    
    setFormErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setIsSubmitting(true);
    setError(null);
    
    try {
      // Prepare task data
      const taskData: NewTask = {
        ...formData,
        dueDate: formData.dueDate ? new Date(formData.dueDate) : undefined, // Convert string back to Date
      };
      
      // Add assignee name
      if (taskData.assigneeId) {
        const assignee = members.find(m => m.id === taskData.assigneeId);
        if (assignee) {
          taskData.assigneeName = assignee.name;
        }
      }
      
      // Add creator name if not already set
      if (!taskData.creatorName && currentUser) {
        taskData.creatorName = currentUser.name;
      }
      
      // If editing an existing task
      if (task?.id) {
        const response = await fetch(`/api/tasks/${task.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(taskData),
        });
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.message || 'Failed to update task');
        }
      } 
      // If creating a new task
      else {
        const response = await fetch('/api/tasks', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(taskData),
        });
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.message || 'Failed to create task');
        }
      }
      
      // Call onSubmit callback with the task data
      onSubmit(taskData);
    } catch (err) {
      console.error('Error saving task:', err);
      setError(err instanceof Error ? err.message : 'An error occurred while saving the task');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="mt-5 space-y-4">
      {error && (
        <div className="p-3 bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-400 rounded-md">
          {error}
        </div>
      )}
      
      <div>
        <label 
          htmlFor="title" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Title
        </label>
        <input
          id="title"
          name="title"
          type="text"
          value={formData.title}
          onChange={handleInputChange}
          placeholder="e.g., Clean the kitchen, Take out trash"
          required
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
        {formErrors.title && <p className="mt-1 text-sm text-red-600 dark:text-red-400">{formErrors.title}</p>}
      </div>
      
      <div>
        <label 
          htmlFor="description" 
          className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
        >
          Description (Optional)
        </label>
        <textarea
          id="description"
          name="description"
          value={formData.description || ''}
          onChange={handleInputChange}
          rows={3}
          placeholder="Add details about the task..."
          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        />
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label 
            htmlFor="assigneeId" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Assign To
          </label>
          <select
            id="assigneeId"
            name="assigneeId"
            value={formData.assigneeId || ''}
            onChange={handleInputChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          >
            <option value="">Select a person</option>
            {members.map(member => (
              <option key={member.id} value={member.id}>
                {member.name}
              </option>
            ))}
          </select>
          {formErrors.assigneeId && <p className="mt-1 text-sm text-red-600 dark:text-red-400">{formErrors.assigneeId}</p>}
        </div>
        
        <div>
          <label 
            htmlFor="priority" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Priority
          </label>
          <select
            id="priority"
            name="priority"
            value={formData.priority}
            onChange={handleInputChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          >
            <option value="LOW">Low</option>
            <option value="MEDIUM">Medium</option>
            <option value="HIGH">High</option>
            <option value="URGENT">Urgent</option>
          </select>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label 
            htmlFor="dueDate" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Due Date
          </label>
          <input
            id="dueDate"
            name="dueDate"
            type="date"
            value={formData.dueDate}
            onChange={handleInputChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>
        
        <div>
          <label 
            htmlFor="status" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Status
          </label>
          <select
            id="status"
            name="status"
            value={formData.status}
            onChange={handleInputChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          >
            <option value="PENDING">Pending</option>
            <option value="IN_PROGRESS">In Progress</option>
            <option value="COMPLETED">Completed</option>
            <option value="SKIPPED">Skipped</option>
          </select>
        </div>
      </div>
      
      <div className="flex items-center mt-2">
        <input
          id="recurring"
          name="recurring"
          type="checkbox"
          checked={formData.recurring}
          onChange={handleInputChange}
          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
        />
        <label htmlFor="recurring" className="ml-2 block text-sm text-gray-700 dark:text-gray-300">
          Recurring task
        </label>
      </div>
      
      {formData.recurring && (
        <div>
          <label 
            htmlFor="recurrenceRule" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            Recurrence Pattern
          </label>
          <select
            id="recurrenceRule"
            name="recurrenceRule"
            value={formData.recurrenceRule}
            onChange={handleInputChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          >
            <option value="DAILY">Daily</option>
            <option value="WEEKLY">Weekly</option>
            <option value="BIWEEKLY">Every 2 weeks</option>
            <option value="MONTHLY">Monthly</option>
          </select>
          {formErrors.recurrenceRule && <p className="mt-1 text-sm text-red-600 dark:text-red-400">{formErrors.recurrenceRule}</p>}
        </div>
      )}
      
      <div className="flex justify-end mt-6 gap-3">
        <button
          type="button"
          onClick={onCancel}
          disabled={isSubmitting}
          className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-70 disabled:cursor-not-allowed"
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={isSubmitting}
          className="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-blue-400 disabled:cursor-not-allowed"
        >
          {isSubmitting ? 'Saving...' : task ? 'Update Task' : 'Create Task'}
        </button>
      </div>
    </form>
  );
}
```

// Directory: components\tasks, File: TaskList.tsx
// File Type: tsx
```tsx
// src/components/tasks/TaskList.tsx
'use client';

import { useState } from 'react';
import Image from 'next/image';

export interface Task {
  id: string;
  title: string;
  description?: string;
  status: 'PENDING' | 'IN_PROGRESS' | 'COMPLETED' | 'SKIPPED';
  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';
  creatorId: string;
  creatorName?: string;
  assigneeId?: string;
  assigneeName?: string;
  dueDate?: Date | string;
  recurring: boolean;
  recurrenceRule?: string;
  householdId: string;
  completedAt?: Date;
}

export interface TaskListProps {
  tasks: Task[];
  currentUserId: string;
  onStatusChange: (taskId: string, newStatus: string) => void;
  onEditTask: (task: Task) => void;
  onDeleteTask: (taskId: string) => void;
}

export default function TaskList({ 
  tasks, 
  currentUserId, 
  onStatusChange, 
  onEditTask, 
  onDeleteTask 
}: TaskListProps) {
  const [expandedTaskId, setExpandedTaskId] = useState<string | null>(null);

  const toggleTaskExpand = (taskId: string) => {
    if (expandedTaskId === taskId) {
      setExpandedTaskId(null);
    } else {
      setExpandedTaskId(taskId);
    }
  };

  const getPriorityColor = (priority: Task['priority']) => {
    switch (priority) {
      case 'LOW':
        return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
      case 'MEDIUM':
        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';
      case 'HIGH':
        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';
      case 'URGENT':
        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';
    }
  };

  const getStatusColor = (status: Task['status']) => {
    switch (status) {
      case 'PENDING':
        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';
      case 'IN_PROGRESS':
        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';
      case 'COMPLETED':
        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';
      case 'SKIPPED':
        return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
    }
  };

  const formatDueDate = (date?: Date | string) => {
    if (!date) return 'No due date';
    const dueDate = typeof date === 'string' ? new Date(date) : date;
    return dueDate.toLocaleDateString();
  };

  return (
    <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden">
      {tasks.length === 0 ? (
        <div className="p-6 text-center text-gray-500 dark:text-gray-400">
          No tasks found with the current filter.
        </div>
      ) : (
        <ul className="divide-y divide-gray-200 dark:divide-gray-700">
          {tasks.map(task => (
            <li key={task.id} className="px-4 py-4">
              <div 
                className="flex items-center justify-between cursor-pointer"
                onClick={() => toggleTaskExpand(task.id)}
              >
                <div className="flex items-start">
                  {/* Task Status Checkbox */}
                  <div className="mr-4 mt-1">
                    <input
                      type="checkbox"
                      checked={task.status === 'COMPLETED'}
                      onChange={(e) => {
                        e.stopPropagation();
                        onStatusChange(task.id, e.target.checked ? 'COMPLETED' : 'PENDING');
                      }}
                      className="h-5 w-5 text-blue-600 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800"
                    />
                  </div>
                  
                  {/* Task Overview */}
                  <div>
                    <h3 className={`text-lg font-medium ${
                      task.status === 'COMPLETED' ? 'text-gray-500 dark:text-gray-400 line-through' : 'text-gray-900 dark:text-white'
                    }`}>
                      {task.title}
                    </h3>
                    
                    <div className="mt-1 flex flex-wrap gap-2">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(task.status)}`}>
                        {task.status.replace('_', ' ')}
                      </span>
                      
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getPriorityColor(task.priority)}`}>
                        {task.priority}
                      </span>
                      
                      {task.recurring && (
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300">
                          Recurring
                        </span>
                      )}
                      
                      <span className="inline-flex items-center text-xs text-gray-500 dark:text-gray-400">
                        Due: {formatDueDate(task.dueDate)}
                      </span>
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center">
                  <span className="text-sm text-gray-500 dark:text-gray-400 mr-2">
                    {task.assigneeName || 'Unassigned'}
                  </span>
                  <svg 
                    className={`h-5 w-5 text-gray-400 transform transition-transform ${expandedTaskId === task.id ? 'rotate-180' : ''}`} 
                    fill="none" 
                    viewBox="0 0 24 24" 
                    stroke="currentColor"
                  >
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7" />
                  </svg>
                </div>
              </div>
              
              {/* Expanded Task Details */}
              {expandedTaskId === task.id && (
                <div className="mt-4 pl-9 border-t border-gray-100 dark:border-gray-700 pt-4">
                  {task.description && (
                    <div className="mb-4">
                      <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Description</h4>
                      <p className="text-sm text-gray-600 dark:text-gray-400">{task.description}</p>
                    </div>
                  )}
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div>
                      <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Assigned by</h4>
                      <p className="text-sm text-gray-600 dark:text-gray-400">{task.creatorName}</p>
                    </div>
                    
                    {task.recurring && (
                      <div>
                        <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Recurrence</h4>
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                          {task.recurrenceRule === 'DAILY' && 'Daily'}
                          {task.recurrenceRule === 'WEEKLY' && 'Weekly'}
                          {task.recurrenceRule === 'BIWEEKLY' && 'Every 2 weeks'}
                          {task.recurrenceRule === 'MONTHLY' && 'Monthly'}
                        </p>
                      </div>
                    )}
                    
                    {task.completedAt && (
                      <div>
                        <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Completed on</h4>
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                          {new Date(task.completedAt).toLocaleDateString()}
                        </p>
                      </div>
                    )}
                  </div>
                  
                  <div className="flex justify-end space-x-2">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        onEditTask(task);
                      }}
                      className="text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
                    >
                      Edit
                    </button>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        onDeleteTask(task.id);
                      }}
                      className="text-sm text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              )}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}
```

// Directory: components\ui, File: Button.tsx
// File Type: tsx
```tsx
// src/components/ui/Button.tsx
'use client';

import { ReactNode, ButtonHTMLAttributes, forwardRef } from 'react';

interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  children: ReactNode;
  variant?: 'primary' | 'secondary' | 'outline' | 'danger' | 'success';
  size?: 'sm' | 'md' | 'lg';
  fullWidth?: boolean;
  isLoading?: boolean;
  leftIcon?: ReactNode;
  rightIcon?: ReactNode;
}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  (
    {
      children,
      variant = 'primary',
      size = 'md',
      fullWidth = false,
      isLoading = false,
      disabled,
      leftIcon,
      rightIcon,
      className = '',
      ...props
    },
    ref
  ) => {
    // Base styles
    const baseStyles = "inline-flex items-center justify-center font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2";
    
    // Variant styles
    const variantStyles = {
      primary: "bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500 border border-transparent disabled:bg-blue-400",
      secondary: "bg-gray-200 text-gray-800 hover:bg-gray-300 focus:ring-gray-500 border border-transparent disabled:bg-gray-200 dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600",
      outline: "bg-transparent text-gray-700 hover:bg-gray-50 focus:ring-gray-500 border border-gray-300 disabled:text-gray-400 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-800",
      danger: "bg-red-600 text-white hover:bg-red-700 focus:ring-red-500 border border-transparent disabled:bg-red-400",
      success: "bg-green-600 text-white hover:bg-green-700 focus:ring-green-500 border border-transparent disabled:bg-green-400"
    };
    
    // Size styles
    const sizeStyles = {
      sm: "text-xs px-2.5 py-1.5",
      md: "text-sm px-4 py-2",
      lg: "text-base px-6 py-3"
    };
    
    // Width styles
    const widthStyles = fullWidth ? "w-full" : "";
    
    // Disabled and loading styles
    const stateStyles = (disabled || isLoading) ? "cursor-not-allowed opacity-70" : "";

    return (
      <button
        ref={ref}
        disabled={disabled || isLoading}
        className={`
          ${baseStyles}
          ${variantStyles[variant]}
          ${sizeStyles[size]}
          ${widthStyles}
          ${stateStyles}
          ${className}
        `}
        {...props}
      >
        {isLoading && (
          <svg 
            className="animate-spin -ml-1 mr-2 h-4 w-4" 
            xmlns="http://www.w3.org/2000/svg" 
            fill="none" 
            viewBox="0 0 24 24"
          >
            <circle 
              className="opacity-25" 
              cx="12" 
              cy="12" 
              r="10" 
              stroke="currentColor" 
              strokeWidth="4"
            ></circle>
            <path 
              className="opacity-75" 
              fill="currentColor" 
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
        )}
        {!isLoading && leftIcon && <span className="mr-2">{leftIcon}</span>}
        {children}
        {!isLoading && rightIcon && <span className="ml-2">{rightIcon}</span>}
      </button>
    );
  }
);

Button.displayName = 'Button';

export default Button;
```

// Directory: components\ui, File: Card.tsx
// File Type: tsx
```tsx
// src/components/ui/Card.tsx
import { ReactNode } from 'react';

interface CardProps {
  children: ReactNode;
  title?: string | ReactNode;
  footer?: ReactNode;
  className?: string;
  headerClassName?: string;
  bodyClassName?: string;
  footerClassName?: string;
  noPadding?: boolean;
}

export default function Card({
  children,
  title,
  footer,
  className = '',
  headerClassName = '',
  bodyClassName = '',
  footerClassName = '',
  noPadding = false
}: CardProps) {
  return (
    <div className={`bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden ${className}`}>
      {title && (
        <div className={`border-b border-gray-200 dark:border-gray-700 px-4 py-3 ${headerClassName}`}>
          {typeof title === 'string' ? (
            <h3 className="text-lg font-medium text-gray-900 dark:text-white">{title}</h3>
          ) : (
            title
          )}
        </div>
      )}
      
      <div className={`${noPadding ? '' : 'p-4'} ${bodyClassName}`}>
        {children}
      </div>
      
      {footer && (
        <div className={`border-t border-gray-200 dark:border-gray-700 px-4 py-3 ${footerClassName}`}>
          {footer}
        </div>
      )}
    </div>
  );
}

// Additional card-related components for more complex layouts
export function CardHeader({ 
  children, 
  className = '' 
}: { 
  children: ReactNode;
  className?: string;
}) {
  return (
    <div className={`border-b border-gray-200 dark:border-gray-700 px-4 py-3 ${className}`}>
      {children}
    </div>
  );
}

export function CardTitle({ 
  children,
  className = ''
}: { 
  children: ReactNode;
  className?: string;
}) {
  return (
    <h3 className={`text-lg font-medium text-gray-900 dark:text-white ${className}`}>
      {children}
    </h3>
  );
}

export function CardBody({ 
  children,
  className = ''
}: { 
  children: ReactNode;
  className?: string;
}) {
  return (
    <div className={`p-4 ${className}`}>
      {children}
    </div>
  );
}

export function CardFooter({ 
  children,
  className = ''
}: { 
  children: ReactNode;
  className?: string;
}) {
  return (
    <div className={`border-t border-gray-200 dark:border-gray-700 px-4 py-3 ${className}`}>
      {children}
    </div>
  );
}
```


// ===== End of components folder =====

// ===== Start of context folder =====

// Consolidated 1 files from the "context" folder
// This file contains all code files within the "context" folder and its subfolders.

// Directory: context, File: AuthContext.tsx
// File Type: tsx
```tsx
// src/context/AuthContext.tsx
'use client';

import { createContext, useContext, useEffect, useState } from 'react';
import { supabaseClient } from '@/lib/supabase';
import { useRouter } from 'next/navigation';
import { Session, User } from '@supabase/supabase-js';

type AuthContextType = {
  user: User | null;
  session: Session | null;
  isLoading: boolean;
  signIn: (email: string, password: string) => Promise<{ error: any }>;
  signUp: (email: string, password: string, name: string) => Promise<{ error: any, data: any }>;
  signOut: () => Promise<void>;
};

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    // Get initial session
    const getInitialSession = async () => {
      const { data: { session }, error } = await supabaseClient.auth.getSession();
      
      setSession(session);
      setUser(session?.user ?? null);
      setIsLoading(false);
    };

    getInitialSession();

    // Listen for auth changes
    const { data: { subscription } } = supabaseClient.auth.onAuthStateChange(
      (_event, session) => {
        setSession(session);
        setUser(session?.user ?? null);
        setIsLoading(false);
      }
    );

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  const signIn = async (email: string, password: string) => {
    const { error } = await supabaseClient.auth.signInWithPassword({ email, password });
    return { error };
  };

  const signUp = async (email: string, password: string, name: string) => {
    const { data, error } = await supabaseClient.auth.signUp({ 
      email, 
      password,
      options: {
        data: {
          name
        }
      }
    });

    // If successful, create a user record in your database
    if (data.user && !error) {
      try {
        await fetch('/api/users', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ 
            id: data.user.id,
            email, 
            name,
            // Don't include password here - it's already handled by Supabase Auth
          }),
        });
      } catch (err) {
        return { error: err, data: null };
      }
    }

    return { data, error };
  };

  const signOut = async () => {
    await supabaseClient.auth.signOut();
    router.push('/login');
  };

  const value = {
    user,
    session,
    isLoading,
    signIn,
    signUp,
    signOut,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
```


// ===== End of context folder =====

// ===== Start of lib folder =====

// Consolidated 7 files from the "lib" folder
// This file contains all code files within the "lib" folder and its subfolders.

// Directory: lib, File: chat.ts
// File Type: ts
```typescript
// src/lib/chat.ts
import { supabaseClient } from './supabase';
import { generateUUID } from '@/lib/utils';

// Types
export interface Message {
  id: string;
  householdId: string;
  senderId: string;
  content: string;
  contentType?: string;
  createdAt: string;
  updatedAt: string;
  sender?: {
    id: string;
    name: string;
    avatar?: string;
  };
  readReceipts?: ReadReceipt[];
}

export interface ReadReceipt {
  id: string;
  messageId: string;
  userId: string;
  readAt: string;
}

// Get messages for a household
export async function getHouseholdMessages(householdId: string): Promise<Message[]> {
  console.log(`Fetching messages for household: ${householdId}`);
  
  try {
    const { data, error } = await supabaseClient
      .from('Message')
      .select(`
        *,
        sender:senderId(id, name, avatar),
        readReceipts:MessageReadReceipt(id, userId, readAt)
      `)
      .eq('householdId', householdId)
      .order('createdAt', { ascending: true });

    if (error) {
      console.error('Error fetching messages:', error);
      return [];
    }

    console.log(`Retrieved ${data?.length || 0} messages for household ${householdId}`);
    return data || [];
  } catch (err) {
    console.error('Unexpected error fetching messages:', err);
    return [];
  }
}

// Send a message to a household
export async function sendMessage(householdId: string, senderId: string, content: string): Promise<Message | null> {
  // Generate a UUID for the message ID
  const messageId = generateUUID();
  const now = new Date().toISOString();
  
  console.log(`Sending message with ID: ${messageId} to household: ${householdId}`);
  
  try {
    const { data, error } = await supabaseClient
      .from('Message')
      .insert([
        {
          id: messageId,
          householdId,
          senderId,
          content,
          contentType: 'TEXT',
          createdAt: now,
          updatedAt: now
        }
      ])
      .select(`
        *,
        sender:senderId(id, name, avatar)
      `)
      .single();
  
    if (error) {
      console.error(`Error sending message to household ${householdId}:`, error);
      // Provide more detailed error information for debugging
      if (error.code === '42501') {
        console.error('Permission denied - check RLS policies');
      } else if (error.code === '23505') {
        console.error('Duplicate ID - UUID collision');
      } else if (error.code === '42P01') {
        console.error('Table does not exist');
      }
      return null;
    }
  
    console.log('Message sent successfully:', data);
    return data;
  } catch (err) {
    console.error('Unexpected error sending message:', err);
    return null;
  }
}

/**
 * Send a welcome message when a user joins a household
 */
export async function sendWelcomeMessage(householdId: string, userId: string, userName: string): Promise<Message | null> {
  const messageId = generateUUID();
  const now = new Date().toISOString();
  
  try {
    const { data, error } = await supabaseClient
      .from('Message')
      .insert([
        {
          id: messageId,
          householdId,
          senderId: userId, // System or admin user ID
          content: `👋 ${userName} has joined the household! Say hello!`,
          contentType: 'TEXT',
          createdAt: now,
          updatedAt: now
        }
      ])
      .select(`*, sender:senderId(id, name, avatar)`)
      .single();
  
    if (error) {
      console.error(`Error sending welcome message:`, error);
      return null;
    }
  
    return data;
  } catch (err) {
    console.error('Error sending welcome message:', err);
    return null;
  }
}

// Mark message as read
export async function markMessageAsRead(messageId: string, userId: string): Promise<ReadReceipt | null> {
  console.log(`Marking message ${messageId} as read by user ${userId}`);
  
  try {
    // Check if a read receipt already exists
    const { data: existingReceipt, error: receiptError } = await supabaseClient
      .from('MessageReadReceipt')
      .select('id, messageId, userId, readAt')
      .eq('messageId', messageId)
      .eq('userId', userId)
      .single();
    
    if (!receiptError && existingReceipt) {
      // Already marked as read
      console.log(`Message ${messageId} already marked as read`);
      return existingReceipt as ReadReceipt;
    }
    
    // Generate a UUID for the receipt
    const receiptId = generateUUID();
    
    // Create a new read receipt
    const { data, error } = await supabaseClient
      .from('MessageReadReceipt')
      .insert([
        {
          id: receiptId,
          messageId,
          userId,
          readAt: new Date().toISOString()
        }
      ])
      .select()
      .single();
    
    if (error) {
      console.error('Error marking message as read:', error);
      if (error.code === '42501') {
        console.error('Permission denied - check RLS policies');
      }
      return null;
    }
    
    console.log(`Successfully marked message ${messageId} as read`);
    return data as ReadReceipt;
  } catch (err) {
    console.error('Unexpected error marking message as read:', err);
    return null;
  }
}

// Get unread messages count for user in a household
export async function getUnreadMessagesCount(householdId: string, userId: string): Promise<number> {
  console.log(`Calculating unread messages for user ${userId} in household ${householdId}`);
  
  try {
    // Get all messages for the household
    const { data: messages, error: messagesError } = await supabaseClient
      .from('Message')
      .select('id')
      .eq('householdId', householdId)
      .neq('senderId', userId); // Exclude messages sent by the current user
    
    if (messagesError || !messages) {
      console.error('Error fetching messages for unread count:', messagesError);
      return 0;
    }
    
    if (messages.length === 0) {
      return 0;
    }
    
    // Get read receipts for these messages
    const messageIds = messages.map(msg => msg.id);
    const { data: receipts, error: receiptsError } = await supabaseClient
      .from('MessageReadReceipt')
      .select('messageId')
      .eq('userId', userId)
      .in('messageId', messageIds);
    
    if (receiptsError) {
      console.error('Error fetching read receipts:', receiptsError);
      return 0;
    }
    
    // Count unread messages
    const readMessageIds = receipts?.map(receipt => receipt.messageId) || [];
    const unreadCount = messages.filter(msg => !readMessageIds.includes(msg.id)).length;
    
    console.log(`User ${userId} has ${unreadCount} unread messages in household ${householdId}`);
    return unreadCount;
  } catch (err) {
    console.error('Unexpected error getting unread count:', err);
    return 0;
  }
}

export function subscribeToMessages(householdId: string, callback: (message: Message) => void) {
    console.log(`Setting up message subscription for household: ${householdId}`);
    
    try {
      // Use a unique channel name that includes the household ID
      const channel = supabaseClient
        .channel(`messages-${householdId}`)
        .on(
          'postgres_changes',
          {
            event: 'INSERT',
            schema: 'public',
            table: 'Message',
            filter: `householdId=eq.${householdId}`
          },
          async (payload) => {
            console.log('Subscription received new message:', payload);
            
            // Fetch the complete message with sender information
            try {
              const { data, error } = await supabaseClient
                .from('Message')
                .select(`
                  *,
                  sender:senderId(id, name, avatar)
                `)
                .eq('id', payload.new.id)
                .single();
                
              if (!error && data) {
                console.log('Complete message data:', data);
                callback(data as Message);
              } else {
                // Log error but still use the payload data
                console.error('Error fetching complete message:', error);
                // Convert the payload to match the Message interface as closely as possible
                const simpleMessage: Message = {
                  id: payload.new.id,
                  householdId: payload.new.householdId,
                  senderId: payload.new.senderId,
                  content: payload.new.content,
                  contentType: payload.new.contentType || 'TEXT',
                  createdAt: payload.new.createdAt || new Date().toISOString(),
                  updatedAt: payload.new.updatedAt || new Date().toISOString()
                };
                callback(simpleMessage);
              }
            } catch (err) {
              console.error('Error in subscription callback:', err);
              // Still try to use the payload even if the fetch fails
              callback(payload.new as Message);
            }
          }
        )
        .subscribe((status) => {
          console.log(`Subscription status for household ${householdId}:`, status);
        });
    
      return () => {
        console.log(`Removing subscription for household: ${householdId}`);
        supabaseClient.removeChannel(channel);
      };
    } catch (error) {
      console.error('Error setting up message subscription:', error);
      // Return a no-op cleanup function
      return () => {};
    }
}
```

// Directory: lib, File: databaseReadiness.ts
// File Type: ts
```typescript
// src/lib/databaseReadiness.ts
import { supabaseClient } from './supabase';

/**
 * Check if the Message table is ready to use
 * @returns {Promise<boolean>} True if the table exists and is accessible
 */
export async function isMessageTableReady(): Promise<boolean> {
  try {
    console.log('Checking if Message table is ready...');
    
    // Get the current user session first to ensure authenticated
    const { data: { session } } = await supabaseClient.auth.getSession();
    if (!session) {
      console.error('No active session for database check');
      return false;
    }
    
    // Try to select a single record from the Message table
    const { data, error } = await supabaseClient
      .from('Message')
      .select('id')
      .limit(1);
    
    console.log('Message table check result:', { data, error });
    
    // If there's no error, the table exists and is accessible
    if (!error) {
      console.log('Message table is ready to use');
      return true;
    }
    
    // Log the specific error
    console.error('Message table not ready:', error.message, error.details, error.hint, error.code);
    return false;
  } catch (err) {
    console.error('Error checking Message table:', err);
    return false;
  }
}

/**
 * Check if all chat-related tables are ready to use
 * @returns {Promise<{ready: boolean, tables: Record<string, boolean>}>} Status of all tables
 */
export async function areAllChatTablesReady(): Promise<{ready: boolean, tables: Record<string, boolean>}> {
  try {
    console.log('Checking if all chat tables are ready...');
    
    // Get the current user's session
    const { data: { session } } = await supabaseClient.auth.getSession();
    if (!session) {
      console.error('No active session for database tables check');
      return {
        ready: false,
        tables: {
          message: false,
          messageReadReceipt: false
        }
      };
    }
    
    console.log('User session found:', session.user.id);
    
    // Check if Message table is ready
    const isMessageReady = await isMessageTableReady();
    
    // Check MessageReadReceipt table
    console.log('Checking if MessageReadReceipt table is ready...');
    const { data: receiptData, error: receiptError } = await supabaseClient
      .from('MessageReadReceipt')
      .select('id')
      .limit(1);
    
    console.log('MessageReadReceipt table check result:', { receiptData, receiptError });
    
    const isReceiptReady = !receiptError;
    if (isReceiptReady) {
      console.log('MessageReadReceipt table is ready to use');
    } else {
      console.error('MessageReadReceipt table not ready:', 
        receiptError?.message, 
        receiptError?.details, 
        receiptError?.hint,
        receiptError?.code
      );
    }
    
    // Overall readiness status
    const allReady = isMessageReady && isReceiptReady;
    
    console.log('Chat tables readiness summary:', {
      ready: allReady,
      message: isMessageReady,
      messageReadReceipt: isReceiptReady
    });
    
    return {
      ready: allReady,
      tables: {
        message: isMessageReady,
        messageReadReceipt: isReceiptReady
      }
    };
  } catch (err) {
    console.error('Error checking chat tables:', err);
    return {
      ready: false,
      tables: {
        message: false,
        messageReadReceipt: false
      }
    };
  }
}
```

// Directory: lib, File: email.ts
// File Type: ts
```typescript
// src/lib/email.ts - temporary version without SendGrid dependency

interface InvitationEmailParams {
  to: string;
  inviterName: string;
  householdName: string;
  invitationLink: string;
  role: string;
  message?: string;
  expirationDays?: number;
}

/**
 * Mock implementation that logs emails instead of sending them
 */
export async function sendInvitationEmail({
  to,
  inviterName,
  householdName,
  invitationLink,
  role,
  message,
  expirationDays = 7
}: InvitationEmailParams): Promise<boolean> {
  // Log what would have been sent
  console.log('=== MOCK EMAIL SERVICE ===');
  console.log(`Would send invitation email to: ${to}`);
  console.log(`From: ${inviterName}`);
  console.log(`Household: ${householdName}`);
  console.log(`Role: ${role}`);
  console.log(`Link: ${invitationLink}`);
  if (message) console.log(`Message: ${message}`);
  console.log(`Expires in: ${expirationDays} days`);
  console.log('=========================');
  
  // Return success since we're just mocking
  return true;
}
```

// Directory: lib, File: prisma.ts
// File Type: ts
```typescript
import { PrismaClient } from '@prisma/client'

const globalForPrisma = global as unknown as {
  prisma: PrismaClient | undefined
}

export const prisma = globalForPrisma.prisma ?? new PrismaClient()

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma
```

// Directory: lib, File: supabase.ts
// File Type: ts
```typescript
// src/lib/supabase.ts
import { createClient } from '@supabase/supabase-js';

// Environment variables
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

// Check if we have the required environment variables
if (!supabaseUrl || !supabaseAnonKey) {
  console.error('Missing required Supabase environment variables');
}

// Client for browser usage (with anonymous key)
export const supabaseClient = createClient(
  supabaseUrl || '',
  supabaseAnonKey || '',
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
    }
  }
);

// Admin client for server-side operations (with service role key)
export const supabase = supabaseServiceKey 
  ? createClient(
      supabaseUrl || '',
      supabaseServiceKey,
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false
        }
      }
    )
  : supabaseClient; // Fall back to the client if no service key is provided
```

// Directory: lib, File: test-supabase.ts
// File Type: ts
```typescript
// src/lib/test-supabase.js
const { createClient } = require('@supabase/supabase-js');

// Get environment variables
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

// Check if environment variables are available
if (!supabaseUrl || !supabaseKey) {
  console.error('❌ Missing Supabase environment variables!');
  console.log('Make sure you have NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY in your .env file');
  process.exit(1);
}

// Initialize Supabase
const supabase = createClient(supabaseUrl, supabaseKey);

async function testSupabaseConnection() {
  try {
    console.log('Testing Supabase connection...');
    
    // Test a simple query - trying to access public schema information
    const { data, error } = await supabase
      .from('User')
      .select('count()', { count: 'exact' });
    
    if (error) {
      console.error('❌ Supabase query failed:', error.message);
      
      // Try a different approach - check if we can reach Supabase at all
      const { data: healthData, error: healthError } = await supabase.rpc('get_service_status');
      
      if (healthError) {
        console.error('❌ Could not connect to Supabase:', healthError.message);
      } else {
        console.log('✅ Supabase is reachable, but the query failed. This might be due to:');
        console.log('  - The "User" table doesn\'t exist yet');
        console.log('  - Permissions issues (Row Level Security)');
        console.log('  - The table name is different from "User"');
      }
      
      return false;
    }
    
    console.log('✅ Supabase connection successful!');
    console.log('Query result:', data);
    return true;
  } catch (err) {
    console.error('❌ Unexpected error testing Supabase connection:', err);
    return false;
  }
}

// Run the test with environment variables loaded from .env
require('dotenv').config();
testSupabaseConnection();
```

// Directory: lib, File: utils.ts
// File Type: ts
```typescript
// src/lib/utils.ts

/**
 * Generates a UUID v4 string
 * This can be used for creating unique IDs for database records
 * @returns {string} A UUID v4 string
 */
export function generateUUID(): string {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0;
      const v = c === 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  }
  
  /**
   * Format a date for display
   * @param date Date to format
   * @param includeTime Whether to include the time
   * @returns Formatted date string
   */
  export function formatDate(date: Date | string, includeTime: boolean = false): string {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    
    if (includeTime) {
      return dateObj.toLocaleString();
    }
    
    return dateObj.toLocaleDateString();
  }
  
  /**
   * Truncate a string to a specific length and add ellipsis if needed
   * @param str String to truncate
   * @param length Maximum length
   * @returns Truncated string
   */
  export function truncate(str: string, length: number): string {
    if (str.length <= length) return str;
    return str.slice(0, length) + '...';
  }
  
  /**
   * Delay execution for a specified number of milliseconds
   * Useful for throttling or creating intentional delays
   * @param ms Milliseconds to delay
   * @returns Promise that resolves after the specified time
   */
  export function delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
  
  /**
   * Check if a value is empty (null, undefined, empty string, or empty array)
   * @param value Value to check
   * @returns True if the value is empty
   */
  export function isEmpty(value: any): boolean {
    if (value === null || value === undefined) return true;
    if (typeof value === 'string') return value.trim() === '';
    if (Array.isArray(value)) return value.length === 0;
    if (typeof value === 'object') return Object.keys(value).length === 0;
    return false;
  }
```


// ===== End of lib folder =====

// ===== Start of scripts folder =====

// Consolidated 1 files from the "scripts" folder
// This file contains all code files within the "scripts" folder and its subfolders.

// Directory: scripts, File: test-realtime.js
// File Type: js
```javascript
// src/scripts/test-realtime.js (create this file)

const { supabaseClient } = require('../lib/supabase');

async function testRealtime() {
  console.log('Testing Supabase Realtime...');
  
  const householdId = '538f30e2-2840-4173-a571-32064011eac2'; // your test household ID
  
  // Subscribe to changes
  const channel = supabaseClient
    .channel('messages')
    .on(
      'postgres_changes',
      {
        event: 'INSERT',
        schema: 'public',
        table: 'Message',
        filter: `householdId=eq.${householdId}`
      },
      (payload) => {
        console.log('New message:', payload);
      }
    )
    .subscribe();
  
  console.log('Subscribed to channel. Waiting for messages...');
  
  // Keep the script running
  return new Promise(() => {});
}

testRealtime().catch(console.error);
```


// ===== End of scripts folder =====

// ===== Start of types folder =====

// Consolidated 1 files from the "types" folder
// This file contains all code files within the "types" folder and its subfolders.

// Directory: types, File: task.ts
// File Type: ts
```typescript
// src/types/task.ts
export interface Task {
    id: string; // Required for existing tasks
    title: string;
    description?: string;
    status: 'PENDING' | 'IN_PROGRESS' | 'COMPLETED' | 'SKIPPED';
    priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';
    creatorId: string;
    creatorName?: string;
    assigneeId?: string;
    assigneeName?: string;
    dueDate?: Date | string;
    recurring: boolean;
    recurrenceRule?: string;
    householdId: string;
    completedAt?: Date;
  }
  
  // For creating new tasks without IDs
  export type NewTask = Omit<Task, 'id'> & { id?: string };
```


// ===== End of types folder =====

