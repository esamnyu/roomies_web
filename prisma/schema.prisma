// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  name           String
  password       String
  avatar         String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  households     HouseholdUser[]
  expenses       Expense[]      @relation("ExpenseCreator")
  payments       Payment[]
  tasks          Task[]         @relation("TaskAssignee")
  createdTasks   Task[]         @relation("TaskCreator")
  messages       Message[]
  expenseSplits  ExpenseSplit[]
  readReceipts   MessageReadReceipt[]
}

model Household {
  id          String         @id @default(cuid())
  name        String
  address     String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  members     HouseholdUser[]
  expenses    Expense[]
  tasks       Task[]
  messages    Message[]
  rules       HouseRule[]
}

model HouseholdUser {
  id          String     @id @default(cuid())
  userId      String
  householdId String
  role        UserRole   @default(MEMBER)
  joinedAt    DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  household   Household  @relation(fields: [householdId], references: [id], onDelete: Cascade)

  @@unique([userId, householdId])
}

enum UserRole {
  ADMIN
  MEMBER
  GUEST
}

model Expense {
  id             String         @id @default(cuid())
  householdId    String
  creatorId      String
  title          String
  amount         Float
  date           DateTime
  description    String?
  receipt        String?
  splitType      SplitType      @default(EQUAL)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  household      Household      @relation(fields: [householdId], references: [id], onDelete: Cascade)
  creator        User           @relation("ExpenseCreator", fields: [creatorId], references: [id])
  splits         ExpenseSplit[]
  payments       Payment[]
}

enum SplitType {
  EQUAL
  PERCENTAGE
  CUSTOM
}

model ExpenseSplit {
  id          String     @id @default(cuid())
  expenseId   String
  userId      String
  amount      Float
  percentage  Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  expense     Expense    @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([expenseId, userId])
}

model Payment {
  id          String     @id @default(cuid())
  expenseId   String
  userId      String
  amount      Float
  status      PaymentStatus @default(PENDING)
  date        DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  expense     Expense    @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  PENDING
  COMPLETED
  DECLINED
}

model Task {
  id              String   @id @default(cuid())
  householdId     String
  creatorId       String
  assigneeId      String?
  title           String
  description     String?
  dueDate         DateTime?
  status          TaskStatus @default(PENDING)
  priority        Priority   @default(MEDIUM)
  recurring       Boolean    @default(false)
  recurrenceRule  String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  household       Household  @relation(fields: [householdId], references: [id], onDelete: Cascade)
  creator         User       @relation("TaskCreator", fields: [creatorId], references: [id])
  assignee        User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Message {
  id              String     @id @default(cuid())
  householdId     String
  senderId        String
  content         String
  contentType     ContentType @default(TEXT)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  household       Household  @relation(fields: [householdId], references: [id], onDelete: Cascade)
  sender          User       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  readReceipts    MessageReadReceipt[]
}

model MessageReadReceipt {
  id              String     @id @default(cuid())
  messageId       String
  userId          String
  readAt          DateTime   @default(now())
  message         Message    @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

enum ContentType {
  TEXT
  EXPENSE_REQUEST
  MAINTENANCE_REQUEST
  SYSTEM
}

model HouseRule {
  id              String     @id @default(cuid())
  householdId     String
  title           String
  description     String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  household       Household  @relation(fields: [householdId], references: [id], onDelete: Cascade)
}